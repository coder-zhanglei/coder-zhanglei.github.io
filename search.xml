<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Altium Designer学习笔记01</title>
    <url>/2019/05/18/Altium-Designer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    <content><![CDATA[<h2 id="Altium-Designer15的安装"><a href="#Altium-Designer15的安装" class="headerlink" title="Altium Designer15的安装"></a>Altium Designer15的安装</h2><p>1、 安装包在百度网盘中Altium Designer文件夹下<br>安装教程参考：<a href="https://wenku.baidu.com/view/63535606b9d528ea81c7799e.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/63535606b9d528ea81c7799e.html</a><br><a href="https://wenku.baidu.com/view/60bd5b9c6c175f0e7cd137bb.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/60bd5b9c6c175f0e7cd137bb.html</a></p><p>2、 基本快捷键</p><ul><li>shift+S :切换单层显示和多层显示</li><li>L ： 调出底层的器件</li><li>shift+ctrl+单击 ： 高亮光标所在的已连接网络</li></ul><p>视频教程：b站上有基础的教程很完整可以参考。</p>]]></content>
      <categories>
        <category>画PCB板学习</category>
      </categories>
      <tags>
        <tag>Altium Designer15</tag>
      </tags>
  </entry>
  <entry>
    <title>FPGA电子系统设计方法</title>
    <url>/2019/12/31/FPGA%E7%94%B5%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="电子系统设计步骤"><a href="#电子系统设计步骤" class="headerlink" title="电子系统设计步骤"></a>电子系统设计步骤</h2><p>电子系统设计–&gt; 电子系统实验调试–&gt; 制作电路板–&gt;电子系统安装–&gt; 电子系统调试–&gt; 合格成品</p><h3 id="总体方案确定"><a href="#总体方案确定" class="headerlink" title="总体方案确定"></a>总体方案确定</h3><p>根据掌握的资料，将总体系统分为若干个子系统（硬件单元电路。软件设计的功能模块），并画出有各个子系统相互连接而形成系统原理框图。<br>多分析，多思考，多比较，要从稳定性、工作可靠性、电路简单、成本低、功耗小、调试维修方便等方面综合考量，选出最佳方案。</p><p>1、硬件单元电路设计<br>为了使电子系统的体积小，可靠性高，单元电路尽可能使集成电路组成。计算单元电路参数时应注意以下几点：<br>（1） 在计算元器件工作电流、电压和功率等参数时，应考虑工作条件最为不利的情况，并留有适当的余量。<br>（2） 对于原器件的极限参数必须留有足够的余量，一般取1.5~2倍的额定值<br>（3） 对于电阻、电容参数的取值，应选计算值附近的标称值。电阻值一般在1MΩ内选择：非电解电容一般在100pf~0.47F选择；电解电容一般在1~2000uf范围内选用。<br>（4）在保证电路达到功能指标要求的前提下。尽量减少元器件的品种，价格，体积等。<br>2、软件设计<br>软件设计首先要完成功能模块的设计，功能模块设计好后可以反复使用。用VHDL语言编程写功能模块，用图形输入的方法将各个功能模块连接起来。<br>3、元器件的选择<br>（1）一般优先选择集成电路<br>（2）电阻器和电容器是两种最长见的元器件<br>（3）分立半导体的选择<br>4、计算机模拟仿真<br>5、实验调试<br>6、绘总体电路图<br>（1） 总体电路图尽可能画在同一张图上；注意信号的流向，一般从输入端画起，由左向右或由上至下按信号的流向依次画出各单元电路。<br>（2） 注意总体电路图的紧凑和协调，要求布局合理、排列均匀。<br>（3） 连线一般画成水平线或垂直线，尽可能的减少交叉和拐弯。</p><h3 id="元器件布局与布线"><a href="#元器件布局与布线" class="headerlink" title="元器件布局与布线"></a>元器件布局与布线</h3><p>1、 按照信号流走向布局<br>2、 优先确定特殊元器件位置<br>3、 防止电磁干扰<br>（1）减小磁力线对印制导线的切割<br>（2）两个电感类元件的位置应当使它们的磁场方向相互垂直，减小彼此间的磁力线耦合<br>（3）对干扰源进行磁屏蔽，屏蔽罩应该良好接地<br>（4）使用高频电缆直接传输信号时，电缆的屏蔽层应该一端接地<br>4、抑制热干扰<br>首先要区分发热元器件和温度敏感元器件，尽量不要把几个发热元器件放在一起，并且考虑使用散热器或小风扇等装置，使元器件的温升不超过允许值。大功率器件可以直接固定在机壳上，利用金属外壳传导散热。</p><h3 id="印制焊盘的尺寸及形状"><a href="#印制焊盘的尺寸及形状" class="headerlink" title="印制焊盘的尺寸及形状"></a>印制焊盘的尺寸及形状</h3><p>1、焊盘的内径（引线孔的直径）<br>2、焊盘的外径<br>3、焊盘形状<br>4、灵活设计焊盘</p>]]></content>
      <categories>
        <category>FPGA学习笔记</category>
      </categories>
      <tags>
        <tag>FPGA电子系统设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib简介01</title>
    <url>/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B01/</url>
    <content><![CDATA[<h2 id="安装Matplotlib"><a href="#安装Matplotlib" class="headerlink" title="安装Matplotlib"></a>安装Matplotlib</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="调整Matplotlib参数"><a href="#调整Matplotlib参数" class="headerlink" title="调整Matplotlib参数"></a>调整Matplotlib参数</h2><h3 id="使用参数字典"><a href="#使用参数字典" class="headerlink" title="使用参数字典"></a>使用参数字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#导入模块包</span></span><br><span class="line"><span class="keyword">print</span> （plt.rc_params()）<span class="comment">#打印所有的参数</span></span><br></pre></td></tr></table></figure><p>在以上的参数中，常用的参数解释如下;</p><ul><li>axes：设置坐标轴边界，颜色，坐标刻度值大小和网络的显示</li><li>figure：设置边界颜色，图形大小和子区</li><li>font：设置字体，字号和样式</li><li>grid：设置网络颜色和线型</li><li>legend：设置图例和其中的文本显示</li><li>lines: 设置线条（颜色，线型，宽度等）和标记</li><li>savefig：对保存的图形进行单独设置</li><li>xtick和ytick：为X,Y轴的主刻度和次刻度设置颜色，大小，方向和标签大小<br>下面调用Matplotlib.rc()命令，通过传入关键字修改参数，<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line">pylab.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">plt.rc(<span class="string">"lines"</span>, marker= <span class="string">'x'</span>,linewidth=<span class="number">12</span>, color= <span class="string">'red'</span>)</span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>可以使用matplot.matplotlib_fname()命令查找当前用户的配置文件目录，从而修改Matplotlib的文件参数，代码如下<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">print</span> (plt.matplotlib_fname())</span><br></pre></td></tr></table></figure><p></p><h2 id="常用的API功能"><a href="#常用的API功能" class="headerlink" title="常用的API功能"></a>常用的API功能</h2><ul><li>figure():多次使用figure命令生成多个图时，图片号按顺序增加</li><li>text():添加文字说明，可以在图中的任意位置添加文字，并支持LaTex语法</li><li>xlable()、ylable():用于添加X轴和Y轴标签</li><li>title():用于添加图的标题</li><li>axis([xmin,xmax,ymin,ymax]):用于确定坐标范围</li><li>xlim(xmin,xmax)和ylim(ymin,ymax):用于调整坐标范围</li><li>annotate():文本注释</li><li>xticks(),yticks():设置轴记号，人为设置坐标轴刻度显示的值</li><li>subplot():设置子图，例如subplot（2,3,1）</li><li>axes：在Matplotlib中，整个图像为一个Figure对象</li></ul><h2 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Nov 25 11:39:15 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#使用import导入模块matplotlib.pyplot，并简写成plt</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#使用import导入模块numpy，并简写成np</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment"># 参数解释：start,stop是开始，结束的数字，num是生成多少个数字，默认50个；endpoint是最后一个stop数字是否包含进去，默认包含；retstep,是两个数字间的间距，默认不显示；dtype默认。</span></span><br><span class="line">y = x*<span class="number">3</span> + <span class="number">5</span></span><br><span class="line"><span class="comment">#线性方程y= x*3 + 5</span></span><br><span class="line">plt.title(<span class="string">"线性函数"</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">"x 值"</span>)</span><br><span class="line"><span class="comment">#设置x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">"y 值"</span>)</span><br><span class="line"><span class="comment">#设置y轴标签</span></span><br><span class="line">ax.plot(x, y)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/simple_line.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="增加子图"><a href="#增加子图" class="headerlink" title="增加子图"></a>增加子图</h2><p>案例1：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Nov 26 15:10:23 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">x1 = np.arange(<span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0.0</span>, <span class="number">4.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生x1，x2数据</span></span><br><span class="line">y1 = np.cos(<span class="number">2</span> * np.pi * x1) * np.exp(-x1)</span><br><span class="line">y2 = np.cos(<span class="number">2</span> * np.pi * x2)</span><br><span class="line"><span class="comment">#产生数据y1，y2</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># pyplot通过调用subplot或者add_subplot来增加子图，如p1 = plt.subplot(211) 或者 p1 = plt.subplot(2,1,1)， 表示创建一个2行，1列的图，p1为第一个子图，然后在p1上画曲线，设置标注标题图例等，就可以使用p1来调用相关的函数，可以直接使用pyplot画图，添加label，等。</span></span><br><span class="line">plt.plot(x1, y1)</span><br><span class="line">plt.title(<span class="string">'子图1'</span>)</span><br><span class="line"><span class="comment">#添加标题</span></span><br><span class="line">plt.ylabel(<span class="string">'y1 值'</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(x2, y2)</span><br><span class="line">plt.xlabel(<span class="string">'数量'</span>)</span><br><span class="line"><span class="comment">#添加标签</span></span><br><span class="line">plt.ylabel(<span class="string">'y2 值'</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/subplot_1.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p></p><p>案例2：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Nov 26 15:20:04 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"><span class="comment">#产生f(t)函数</span></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.5</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生t1，t2数据</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(t1, f(t1), <span class="string">'bo'</span>, t2, f(t2), <span class="string">'k'</span>)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">'r--'</span>)</span><br><span class="line"></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/subplot_2.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>PS学习第一课</title>
    <url>/2023/09/15/PS%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
    <content><![CDATA[<h2 id="软件位置"><a href="#软件位置" class="headerlink" title="软件位置"></a>软件位置</h2><pre><code>百度云 Photoshop2022.rar
</code></pre><h2 id="磨皮插件"><a href="#磨皮插件" class="headerlink" title="磨皮插件"></a>磨皮插件</h2><pre><code>portrainture3forPS.exe
</code></pre><h2 id="图层操作"><a href="#图层操作" class="headerlink" title="图层操作"></a>图层操作</h2><p>1、alt+滚轮；放大缩小<br>2、alt+左键；只选择当前图层，其余图层隐藏<br>3、shift+ctrl+alt+E;盖印图层（将所有的效果合并到新的图层上，而不影响原来的图层顺序）<br>4、ctrl+r;打开参考线</p><h2 id="图像调整"><a href="#图像调整" class="headerlink" title="图像调整"></a>图像调整</h2><p>1、快捷键：ctrl+alt+i;菜单栏，图像-&gt;图像大小</p><h2 id="画笔工具"><a href="#画笔工具" class="headerlink" title="画笔工具"></a>画笔工具</h2><h2 id="蒙版的作用"><a href="#蒙版的作用" class="headerlink" title="蒙版的作用"></a>蒙版的作用</h2><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>1、吸管工具<br>（1）选中图层，选择颜色取样器工具，ctrl+U，可调出色相/饱和度调整面板；<br>（2）颜色取样器工具，选择取样点后，alt+左键，可删除取样的点；</p><h2 id="调色命令"><a href="#调色命令" class="headerlink" title="调色命令"></a>调色命令</h2><p>1、红色的互补色是青色；绿色的互补色是品红；蓝色的互补色是黄色</p>]]></content>
      <categories>
        <category>PS学习</category>
      </categories>
      <tags>
        <tag>PS学习第一讲</tag>
      </tags>
  </entry>
  <entry>
    <title>Plotly与GUI开发</title>
    <url>/2019/06/03/Plotly%E4%B8%8EGUI%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="各种Python-GUI编程的实现"><a href="#各种Python-GUI编程的实现" class="headerlink" title="各种Python GUI编程的实现"></a>各种Python GUI编程的实现</h2><h3 id="TKinter"><a href="#TKinter" class="headerlink" title="TKinter"></a>TKinter</h3><p>Tkinter 是绑定了Python的Tk GUI框架，就是Python包装的Tcl代码，通过内嵌在Python的Tcl解释器实现。</p><h3 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h3><p>wxPython是Python对跨平台的GUI框架wxWidgets的包装，作为一个Python的一个扩展模块来实现。</p><h3 id="PyGTK"><a href="#PyGTK" class="headerlink" title="PyGTK"></a>PyGTK</h3><p>PyGTK是Python对GTK+GUI库的一系列包装。</p><h3 id="PySide"><a href="#PySide" class="headerlink" title="PySide"></a>PySide</h3><p>PySide是Qt官方维护</p><h2 id="PyQt的安装"><a href="#PyQt的安装" class="headerlink" title="PyQt的安装"></a>PyQt的安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install PyQt5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install PyQt5==10.1.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>python GUI开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib简介02</title>
    <url>/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B02/</url>
    <content><![CDATA[<h2 id="确定坐标范围"><a href="#确定坐标范围" class="headerlink" title="确定坐标范围"></a>确定坐标范围</h2><p>在matplotlib中，使用xlim(x,y)和ylim(x,y)函数可以确定坐标范围：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-5.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"><span class="comment"># x = np.linspace(-5, 5, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line">y1 = x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">xlabel(<span class="string">'x 值'</span>)</span><br><span class="line">ylabel(<span class="string">'y1 值'</span>)</span><br><span class="line"><span class="comment">#设置x轴范围，x轴只显示（-5,3），总区间（-5,5)</span></span><br><span class="line">xlim(<span class="number">-5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#设置y轴范围</span></span><br><span class="line">ylim(<span class="number">-10</span>, <span class="number">50</span>)</span><br><span class="line">plt.plot(x,y1)</span><br><span class="line">fig= plt.gcf()</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/axis_limit.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图时指在回归分析中，数据点在指教坐标系平面上的分布图。散点图表示因变量随自变量变化的大致趋势，因此可以选择合适的函数对数据点进行拟合。<br>散点图通常用于跨类别的聚合数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment">#产生测试数据</span></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">30</span>)</span><br><span class="line">y =np.sin(x)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">ax1.set_title(<span class="string">'散点图'</span>)</span><br><span class="line"><span class="comment">#设置X轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">'X'</span>)</span><br><span class="line"><span class="comment">#设置Y轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'Y'</span>)</span><br><span class="line"><span class="comment">#画散点图</span></span><br><span class="line">lValue = x</span><br><span class="line">ax1.scatter(x,y,c=<span class="string">'r'</span>,s= <span class="number">100</span>,linewidths=lValue,marker=<span class="string">'o'</span>)</span><br><span class="line"><span class="comment">#设置图标</span></span><br><span class="line">plt.legend(<span class="string">'x1'</span>)</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/scatter_1.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>散点图2：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> rand<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]:</span><br><span class="line">    n = <span class="number">500</span></span><br><span class="line">    x, y = rand(<span class="number">2</span>, n)<span class="comment">#产生2*n的矩阵</span></span><br><span class="line">    ax.scatter(x, y, c=color, label=color,</span><br><span class="line">               alpha=<span class="number">0.3</span>, edgecolors=<span class="string">'none'</span>)</span><br><span class="line"><span class="comment">#设置每个点的颜色，x,y分别代表的横纵坐标，通过横纵坐标确定点的位置，c表示点的颜色color，s表示点的大小size，alpha表示点的透明度，1是不透明，0是透明。</span></span><br><span class="line">ax.legend()</span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#设置网格</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/scatter_2.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p></p><p>scatter函数中比较常用的参数如系：</p><ul><li>x，y:形如shape(n,)的数组，可选值</li><li>s:点的大小（也就是面积），默认值为20</li><li>c：点的颜色或颜色序列，默认为蓝色，其他如c = ‘r’(red),c== g‘green’</li><li>marker:形状，可选值，默认是圆</li></ul><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">#X是1,2,3,4,5,6,7,8,柱的个数</span></span><br><span class="line"><span class="comment"># numpy.random.uniform(low=0.0, high=1.0, size=None), normal</span></span><br><span class="line"><span class="comment">#uniform均匀分布的随机数，normal是正态分布的随机数，0.5-1均匀分布的数，一共有n个</span></span><br><span class="line">Y1 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">Y2 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">plt.bar(X,Y1,width = <span class="number">0.35</span>,facecolor = <span class="string">'lightskyblue'</span>,edgecolor = <span class="string">'white'</span>)</span><br><span class="line"><span class="comment">#width:柱的宽度</span></span><br><span class="line">plt.bar(X+<span class="number">0.35</span>,Y2,width = <span class="number">0.20</span>,facecolor = <span class="string">'yellowgreen'</span>,edgecolor = <span class="string">'white'</span>)</span><br><span class="line"><span class="comment">#水平柱状图plt.barh，属性中宽度width变成了高度height</span></span><br><span class="line"><span class="comment">#打两组数据时用+</span></span><br><span class="line"><span class="comment">#facecolor柱状图里填充的颜色</span></span><br><span class="line"><span class="comment">#edgecolor是边框的颜色</span></span><br><span class="line"><span class="comment">#想把一组数据打到下边，在数据前使用负号</span></span><br><span class="line">fig = plt.gcf()</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/bar_1.html'</span>, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>bar函数的使用方法是：bar(left,height,width,bottom=None,**kwargs)</p><p>left,height,width,bottom这四个参数确定了柱体的位置和大小。默认情况下，left为柱体的居中位置（可以通过align参数改变left值的含义），即：</p><ul><li>（left-width/2,bottom）为左下角位置</li><li>（left-width/2,bottom+height）为右上角位置</li></ul><h2 id="更多扩展"><a href="#更多扩展" class="headerlink" title="更多扩展"></a>更多扩展</h2><pre><code>网址：https://plot.ly.matplotlib/ ,获取Matplotlib与plotly结合的所有官方案例。
</code></pre>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对象概览</title>
    <url>/2019/05/28/Python%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<ul><li>plotly的对象除各种类型的图表外，还包括数据库连接和数据分析工具<h2 id="plotly的绘图对象包括以下类型"><a href="#plotly的绘图对象包括以下类型" class="headerlink" title="plotly的绘图对象包括以下类型"></a>plotly的绘图对象包括以下类型</h2></li></ul><ul><li>2D平面图表</li><li>3D立体图表</li><li>Maps，地图类型的图表</li><li>WebGL格式图表</li><li>Layout，画面布局函数</li><li>Axis，坐标工具，包括2D/3D平面坐标，立体坐标和极坐标（AngularAxis）</li><li>Annotation，图表注释工具。</li><li>Error，误差调整工具，包括x、y、z三种坐标的误差修正</li><li>Figure，图形整合工具</li><li>Font，字体工具</li><li>Legend，图例工具</li><li>Margin，图表边缘间距工具</li><li>Marker，标记工具</li><li>金融行业通用的OHLC数据格式工具</li><li>Array，数据坐标列表</li><li>Data，图表数据整合工具</li><li>Stream，实时图表数据流工具</li><li>Scene，场景工具</li></ul><h3 id="2D平面绘图对象"><a href="#2D平面绘图对象" class="headerlink" title="2D平面绘图对象"></a>2D平面绘图对象</h3><ul><li>Angularaxis，极坐标图表</li><li>Area，区域图</li><li>Bar，条形图</li><li>Box，盒形图</li><li>Candlestick与OHLC，金融股票行业常用的K线图与OHLC曲线图</li><li>ColorBar，彩条图</li><li>Contour，轮廓图（等高线图）</li><li>Line，曲线图</li><li>Heatmap，热点图</li><li>Histogram，直方图</li><li>Histogram2d，2D平面直方图</li><li>Histogram2dContour，二维轮廓直方图</li><li>Pie，饼图</li><li>Scatter，坐标分布图（包括线形图，散点图）<h3 id="3D立体绘图对象"><a href="#3D立体绘图对象" class="headerlink" title="3D立体绘图对象"></a>3D立体绘图对象</h3></li><li>Scatter3D，3D立体散点图</li><li>Surface，表面图</li><li>Mesh3D，3D立体网格图</li><li>Poincloud，点云图<h3 id="Maps地图"><a href="#Maps地图" class="headerlink" title="Maps地图"></a>Maps地图</h3></li><li>ScatterGeo，基于GEO地图模式的散点图（包括线形图）</li><li>Choropleth，立体等值线图</li><li>Scattermapbox，基于地图的散点图<h3 id="WebGL格式图形"><a href="#WebGL格式图形" class="headerlink" title="WebGL格式图形"></a>WebGL格式图形</h3></li><li>ScatterGL，WebGL格式散点图（包括线形图）<h3 id="图表辅助工具"><a href="#图表辅助工具" class="headerlink" title="图表辅助工具"></a>图表辅助工具</h3></li><li>Annotation，图表注释工具。</li><li>Axis，坐标工具，包括2D/3D平面坐标，立体坐标和极坐标（AngularAxis）</li><li>RadialAxis，纵横比调整工具</li><li>Scatterternary，散点三元图</li><li>Scene，场景工具</li><li>XBins、YBins：x轴，y轴辅助参数<h3 id="Layout画面布局函数"><a href="#Layout画面布局函数" class="headerlink" title="Layout画面布局函数"></a>Layout画面布局函数</h3></li><li>3D Axes，三维坐标（x轴，y轴，z轴）</li><li>Axes，平面坐标（x轴，y轴）</li><li>File Settings，文件设置</li><li>Horizontal Legends，水平标记</li><li>Images，插入图片，一般作为背景或地图数据</li><li>Inset Plots，插入图形</li><li>LaTeX，专业排版数据</li><li>Legends，图例设置</li><li>Logos，绘制格式标志</li><li>Multiple Axes，多轴设置</li><li>Setting Graph Size，设置图形的大小</li><li>Setting the Title，Legend Entries，and Axis Title，设置标题，图例调补和轴标题</li><li>Subplots，子图设置，</li><li>Text and Annotations，文本和注释</li><li>Text and Font Styling ，文本和字体样式<br>使用help命令可以查看Layout函数的参数与属性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> pygo</span><br><span class="line">print(help(pygo.Layout))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对象和类</title>
    <url>/2019/04/04/Python%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>Python中所有数据都是以对象的形式出现，只有当你想要创建属于自己的对象或者需要修改已有的对象的行为时，才需要关注对象的内部<br>实现细节。对象就是包含了代码的超级数据结构。</p><h2 id="class-定义类"><a href="#class-定义类" class="headerlink" title="class 定义类"></a>class 定义类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span><span class="comment">#初始化，self是参数指向了这个正在被创建的对象的本身</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在类声明里定义<strong>init</strong>()方法时，第一个参数必须为self，在定义类的方法（函数）时，第一个参数也必须为self。在定义中<strong>init</strong><br>不是必须的。只有当需要区分由该类创建的不同对象时，才需要指定。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>从已有的类衍生出新的类，添加或修改部分功能。习惯称原始的类为父类，超类或基类，将新的类称为子类或衍生类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span><span class="comment">#初始化，self是参数指向了这个正在被创建的对象的本身</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(Person)</span>:</span><span class="comment">#继承了Person</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在子类中可有覆盖父类的方法，从新实现父类的方法即可实现方法的覆盖。</p><h3 id="用super从父类得到帮助"><a href="#用super从父类得到帮助" class="headerlink" title="用super从父类得到帮助"></a>用super从父类得到帮助</h3><p>重子类中调用父类的方法，用super实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span><span class="comment">#初始化，self是参数指向了这个正在被创建的对象的本身</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(Person)</span>:</span><span class="comment">#继承了Person</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__(name)<span class="comment">#调用父类的方法</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="使用属性对特性进行访问和设置"><a href="#使用属性对特性进行访问和设置" class="headerlink" title="使用属性对特性进行访问和设置"></a>使用属性对特性进行访问和设置</h2><p>不希望别人直接访问这个特性，因此需要定义两个方法：getter，setter。<br></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span><span class="comment">#初始化，self是参数指向了这个正在被创建的对象的本身</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(Person)</span>:</span><span class="comment">#继承了Person</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__(name)<span class="comment">#调用父类的方法</span></span><br><span class="line"><span class="meta">    @property    #用于指定getter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        retrun <span class="string">'afad'</span></span><br><span class="line"><span class="meta">    @name.setter  #用于指定setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self,input_name)</span></span></span><br><span class="line">        self.name = input_name</span><br></pre></td></tr></table></figure><p></p><p>如果没有指定setter属性，将无法从类的外部对它进行值的改变。</p><h2 id="使用名称重整保护私有特性"><a href="#使用名称重整保护私有特性" class="headerlink" title="使用名称重整保护私有特性"></a>使用名称重整保护私有特性</h2><p>对那些需要刻意隐藏在类内部的特性有自己的命名规范：由（__）双下划线开头。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        retrun self.__name</span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self,name)</span></span></span><br><span class="line">        self.__name = name#这种，让外部的代码无法使用</span><br></pre></td></tr></table></figure><h2 id="方法的类型’"><a href="#方法的类型’" class="headerlink" title="方法的类型’"></a>方法的类型’</h2><p>有些数据（特性）和函数（方法）是类本身的一部分，还有一些是由类创建的实例的一部分。在类的定义中，以self作为第一个参数的方法<br>都是实例的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.count += <span class="number">1</span>;<span class="comment">#类特性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'I'</span>m an A<span class="string">'</span></span><br><span class="line"><span class="string">    @classmethod#类方法，第一个参数是类本身。参数被写作cls，全称class是保留字</span></span><br><span class="line"><span class="string">    def kids(cls):</span></span><br><span class="line"><span class="string">        print '</span>A has<span class="string">',cls.count,"little objects"</span></span><br><span class="line"><span class="string">easy_A =A()</span></span><br></pre></td></tr></table></figure><h2 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h2><p>特殊方法的名称以双下划线（__）开头和结束。</p><ul><li>表1：和比较相关的方法</li></ul><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">_ _eq_ _(self,other)</td><td style="text-align:center">self == other</td></tr><tr><td style="text-align:center">_ _ ne _ _(self,other)</td><td style="text-align:center">self != other</td></tr><tr><td style="text-align:center">_ _ lt _ _(self,other)</td><td style="text-align:center">self &lt; other</td></tr><tr><td style="text-align:center">_ _gt_ _(self,other)</td><td style="text-align:center">self &gt; other</td></tr><tr><td style="text-align:center">_ _le_ _(self,other)</td><td style="text-align:center">self &lt;= other</td></tr><tr><td style="text-align:center">_ _ge_ _(self,other)</td><td style="text-align:center">self &gt;= other</td></tr></tbody></table><ul><li>表2：和数学相关的方法</li></ul><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">_ _ <em>add</em> _(self,other)</td><td style="text-align:center">self + other</td></tr><tr><td style="text-align:center">_ _ <em>sub</em> _ _(self,other)</td><td style="text-align:center">self != other</td></tr><tr><td style="text-align:center">_ _ _ mul _ _ _(self,other)</td><td style="text-align:center">self * other</td></tr><tr><td style="text-align:center">_ _ <em>floordiv</em> _ _(self,other)</td><td style="text-align:center">self // other</td></tr><tr><td style="text-align:center">_ _ <em>truediv</em> _ _(self,other)</td><td style="text-align:center">self / other</td></tr><tr><td style="text-align:center">_ _ <em>mov</em> _ _(self,other)</td><td style="text-align:center">self % other</td></tr><tr><td style="text-align:center">_ _ <em>pow</em> _ _(self,other)</td><td style="text-align:center">self ** other</td></tr></tbody></table><ul><li>表2：其他种类的方法</li></ul><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">_ _ <em>str</em> _ _(self,other)</td><td style="text-align:center">str(self)</td></tr><tr><td style="text-align:center">_ _ <em>repr</em> _ _(self,other)</td><td style="text-align:center">repr(self)</td></tr><tr><td style="text-align:center">_ _ <em>len</em> _ _(self,other)</td><td style="text-align:center">len(self)</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        self.text = text</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,words)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text.lower = words.text.lower()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self,words)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self,words)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Word(" '</span>self.text<span class="string">' ")'</span></span><br><span class="line">first = word(<span class="string">'ha'</span>)</span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>将类作为参数传入另一个类。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bill</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,description)</span>:</span></span><br><span class="line">        self.description = description</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bill</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,length)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,bill,tail)</span>:</span></span><br><span class="line">        self.bill = bill</span><br><span class="line">        self.tail = tail</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this duck has a '</span>,bill.description,<span class="string">'bill and a'</span>,tail.length,<span class="string">'tail'</span>)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python中的类</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据的归宿</title>
    <url>/2019/04/08/Python%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BD%92%E5%AE%BF/</url>
    <content><![CDATA[<h2 id="文件的输入-输出"><a href="#文件的输入-输出" class="headerlink" title="文件的输入/输出"></a>文件的输入/输出</h2><p>一个运行中的程序会存取放在随机存储器（ARM）上的数据。<br>fileobj = open(filname,mode)<br>mode的第一个字母表明对其的操作：</p><ul><li>r表示读模式</li><li>w表示写模式。如果文件不存在则新创建，如果存在则重写新内容</li><li>x表示文件不存在的情况下创建并写文件</li><li>a表示文件如果存在，在文件的末尾追加写内容<br>mode的第二个字母是文件类型：</li><li>t(或者省略)代表文本类型</li><li>b代表二进制文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fb = open(<span class="string">'test.txt'</span>,<span class="string">'wt'</span>)</span><br><span class="line">fb.write(str1)</span><br><span class="line">fb.close()</span><br></pre></td></tr></table></figure><h3 id="write-写文本文件"><a href="#write-写文本文件" class="headerlink" title="write()写文本文件"></a>write()写文本文件</h3><p>数据大可以分块写：</p><pre><code class="python">fout = open(<span class="string">'relativity'</span>,<span class="string">'wt'</span>)
size = len(pome)
offset = <span class="number">0</span>
chunk = <span class="number">100</span>
<span class="keyword">while</span> Ture:
    <span class="keyword">if</span> offset &gt; size:
        <span class="keyword">break</span>
    fout.write(pome[offset:offset+chunk])
    offset += chunk


</code></pre><h3 id="用read、readline、readlines读取文本文件"><a href="#用read、readline、readlines读取文本文件" class="headerlink" title="用read、readline、readlines读取文本文件"></a>用read、readline、readlines读取文本文件</h3><p>read()读到文件末尾，再次调用read()会返回字符串‘’。 readline()读取文件的一行，readlines()调用时读取一行，并返回单行字符列表。</p><pre><code class="python">fout = open(<span class="string">'relativity'</span>,<span class="string">'wt'</span>)
<span class="keyword">while</span> Ture:
    line = fout.readline()
    <span class="keyword">if</span> <span class="keyword">not</span> line:
        <span class="keyword">break</span>
    poem += line
fout.close()

</code></pre><h3 id="使用with自动关闭文件"><a href="#使用with自动关闭文件" class="headerlink" title="使用with自动关闭文件"></a>使用with自动关闭文件</h3><p>with expression as variable:</p><pre><code class="python"><span class="keyword">with</span> open(<span class="string">'relativity'</span>,<span class="string">'wt'</span>) <span class="keyword">as</span> fout:
  fb.write(str1)

</code></pre><h3 id="使用seek-改变位置"><a href="#使用seek-改变位置" class="headerlink" title="使用seek()改变位置"></a>使用seek()改变位置</h3><p>函数tell()返回距离文件开始处的字节偏移量。函数seek()允许跳转到文件其他字节偏移量的位置。<br>seek(offset,origin)</p><ul><li>如果origin=0，从头开始偏移offset个字节</li><li>如果origin=1，从当前位置偏移offset个字节</li><li>如果origin=2，距离最后结尾处偏移offset个字节</li></ul><pre><code class="python">fin = open(<span class="string">'relativity'</span>,<span class="string">'rt'</span>)
fin.tell()
fin.seek(<span class="number">151</span>)<span class="comment">#偏移到151处</span>
</code></pre><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>数据库展现了表单形式的不同类型数据之间的关系，每一项有对应的关系。NoSQL数据库是键值对形式存储的数据。</p><pre><code class="python">db = sqlite3.connect(<span class="string">'books.db'</span>)<span class="comment">#连接数据库</span>
curs = db.cursor() <span class="comment">#创建一个cursor对象来管理数据库</span>
curs.execute(<span class="string">'''create table book (title text,author text,year int)'''</span>) <span class="comment">#对数据库执行一个或多个sql命令</span>
db.commit()
<span class="comment">#插入数据</span>
ins_str = <span class="string">'insert into book values(?, ?, ?)'</span>
<span class="keyword">with</span> open(<span class="string">'books.csv'</span>,<span class="string">'rt'</span>) <span class="keyword">as</span> infile:
    books = csv.DictReader(infile)
    <span class="keyword">for</span> book <span class="keyword">in</span> books:
        print(book)
        <span class="keyword">print</span> book[<span class="string">' title'</span>]
        curs.execute(ins_str,(book[<span class="string">' title'</span>],book[<span class="string">'author'</span>],book[<span class="string">'year'</span>]))

</code></pre><h3 id="DB-API"><a href="#DB-API" class="headerlink" title="DB-API"></a>DB-API</h3><p>应用程序编程接口。是访问某些服务的函数集合。DB_API是Python中访问关系型数据库的标准API。<br>主要函数如下所示：</p><ul><li>connect（） 连接数据库，包含参数用户名，密码，服务器地址等</li><li>cursor()创建一个cursor对象来管理数据库</li><li>execute()和executemany() 对数据库执行一个或者多个SQL命令</li><li>fetchone()、fetchmany()和fetchall()得到execute之后的结果</li></ul>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python数据的存取</tag>
      </tags>
  </entry>
  <entry>
    <title>github和gitlab</title>
    <url>/2019/04/12/github%E5%92%8Cgitlab/</url>
    <content><![CDATA[<h2 id="github和gitlab的相同点"><a href="#github和gitlab的相同点" class="headerlink" title="github和gitlab的相同点"></a>github和gitlab的相同点</h2><p>二者都是基于web的Git仓库，在很大程度上GitLab是仿照GitHub来做的，它们都提供了分享开源项目的平台，为开发团队提供了存储、分享、<br>发布和合作开发项目的中心化云存储的场所。GitHub同时提供公共仓库和私有仓库，但如果要使用私有仓库，是需要付费的。而GitLab解决了这个问题，你可以在上面创建私人的免费仓库。</p><h2 id="github和gitlab的不相同点"><a href="#github和gitlab的不相同点" class="headerlink" title="github和gitlab的不相同点"></a>github和gitlab的不相同点</h2><p>GitHub同时提供公共仓库和私有仓库，但如果要使用私有仓库，是需要付费的。而GitLab解决了这个问题，你可以在上面创建私人的免费仓库。<br>GitLab让开发团队对他们的代码仓库拥有更多的控制，相比于GitHub，它有不少的特色：</p><ul><li>允许免费设置仓库权限；</li><li>允许用户选择分享一个project的部分代码</li><li>允许用户设置project的获取权限，进一步的提升安全性；可以设置获取到团队整体的改进进度；通过innersourcing让不在权限范围内的人访问不到该资源。</li><li>从代码私有性方面来看，有时公司并不希望员工获取到全部的代码，这个时候GitLab无疑是更好的选择。但对于开源项目而言，GitHub依然是代码托管的首选。</li></ul>]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>github和gitlab的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ boost库</title>
    <url>/2018/10/20/c-%E6%A0%87%E5%87%86%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><ul><li>1 vs2008配置boost库<br><a href="https://blog.csdn.net/qq1987924/article/details/7897503" target="_blank" rel="noopener">https://blog.csdn.net/qq1987924/article/details/7897503</a></li></ul><h2 id="下载boost库"><a href="#下载boost库" class="headerlink" title="下载boost库"></a>下载boost库</h2><p>链接：<a href="https://sourceforge.net/projects/boost/files/boost-binaries/1.83.0/" target="_blank" rel="noopener">https://sourceforge.net/projects/boost/files/boost-binaries/1.83.0/</a><br>参考文献：<a href="https://zhuanlan.zhihu.com/p/663871126" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/663871126</a></p><h2 id="常用到的头文件"><a href="#常用到的头文件" class="headerlink" title="常用到的头文件"></a>常用到的头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;   //标准字符串类</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  //标准向量容器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;     //标准集合容器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;     //标准映射容器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //标准算法</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//打开标准库的名字空间</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>boost库开发</category>
      </categories>
      <tags>
        <tag>c++ &amp; boost</tag>
      </tags>
  </entry>
  <entry>
    <title>c++基础知识积累01</title>
    <url>/2024/06/30/c-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF01/</url>
    <content><![CDATA[<p>string 常用用法</p>]]></content>
      <categories>
        <category>c++基础知识</category>
      </categories>
      <tags>
        <tag>c++文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/30/hello-world/</url>
    <content><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title:Hello World"></a>title:Hello World</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
  </entry>
  <entry>
    <title>Python真正的开发者</title>
    <url>/2019/04/08/Python%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85/</url>
    <content><![CDATA[<h2 id="寻找Python代码"><a href="#寻找Python代码" class="headerlink" title="寻找Python代码"></a>寻找Python代码</h2><ul><li>Python标准库：<a href="http://docs.python.org/3/library/" target="_blank" rel="noopener">http://docs.python.org/3/library/</a></li><li>python包索引(PyPi)：<a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">https://pypi.python.org/pypi</a></li></ul><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><h3 id="安装包的方法"><a href="#安装包的方法" class="headerlink" title="安装包的方法"></a>安装包的方法</h3><ul><li>用pip，如：pip install flask</li><li>用操作系统自带的包管理工具</li><li>源代码安装:python install setup.py</li></ul><h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><h3 id="用pdb进行调试"><a href="#用pdb进行调试" class="headerlink" title="用pdb进行调试"></a>用pdb进行调试</h3><p>1、 语句<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python -m pdb capitals.py   </span><br><span class="line">(Pdb) c  <span class="comment">#输入c（继续），程序会一直运行下去，直到正常结束或者出现错误</span></span><br><span class="line">(Pdb) s  <span class="comment">#单步执行，一行一行的执行Python代码，会进入函数内部</span></span><br><span class="line">(Pdb) n  <span class="comment">#也是单步执行，但是不会进入函数内部</span></span><br><span class="line">(Pdb) l  <span class="comment">#列表，查看之后的几行</span></span><br><span class="line"> -&gt;  <span class="comment"># 指示当前行</span></span><br><span class="line">(Pdb) b 6 <span class="comment">#在第6行设置一段点</span></span><br><span class="line">(Pdb) p line <span class="comment">#打印line的值   </span></span><br><span class="line">(Pdb) l 1 <span class="comment">#l会显示代码行，1表示起始行。从第一行开始</span></span><br></pre></td></tr></table></figure><p></p><h2 id="记录错误日志"><a href="#记录错误日志" class="headerlink" title="记录错误日志"></a>记录错误日志</h2><p>logging模块包含以下内容：</p><ul><li>你想保存到日志中的消息</li><li>不同优先级以及对应的函数：debug()、info()、warn()、error()、critical().</li><li>一个或多个logger对象，主要通过它们使用模块</li><li>把消息写入终端、文件、数据库或者其他地方的handler</li><li>创建输出的formatter；</li><li>基于输入进行筛选的过滤器。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=<span class="string">'DEBUG'</span>,filename=<span class="string">'bulue_ox.log'</span>)<span class="comment">#filename会创建一个fileHandler并对logger进行设置。logging模块至少包含15钟handler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以日期和时间的格式写入日志文件</span></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s - %(message)s"</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'./gzipcompressor.log'</span>,</span><br><span class="line">                    filemode=<span class="string">'a'</span>,</span><br><span class="line">                    level=logging.DEBUG, </span><br><span class="line">                    format=LOG_FORMAT)</span><br></pre></td></tr></table></figure><h2 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h2><p>列表解析比添加元素快2倍。<br>NumPy是Python的一个数学库，它是用c编写的，运行速度很快。Python并不会编译成机器语言，而是被翻译成中间语言，然后被虚拟机解释执行。</p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python开发</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 文章特性设置</title>
    <url>/2021/10/24/hexo-%E6%96%87%E7%AB%A0%E7%89%B9%E6%80%A7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="为字体添加颜色"><a href="#为字体添加颜色" class="headerlink" title="为字体添加颜色"></a>为字体添加颜色</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>这是<label style="color:red">红色</label>字体<br>这是<label style="color:green">绿色</label>字体<br>这是<label style="color:#ff0">黄色</label>字体<br>这是<label style="color:#00f">蓝色</label>字体<br>这是<label style="color:#0ff">青色，蓝绿色</label>字体</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是&lt;label style=&quot;color:red&quot;&gt;红色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:green&quot;&gt;绿色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:yellow&quot;&gt;黄色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:blue&quot;&gt;蓝色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:cyan&quot;&gt;青色，蓝绿色&lt;/label&gt;字体</span><br></pre></td></tr></table></figure><h2 id="文字风格设置"><a href="#文字风格设置" class="headerlink" title="文字风格设置"></a>文字风格设置</h2><p>内容块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 这里的内容显示在内容块中</span><br></pre></td></tr></table></figure><p>显示效果</p><blockquote><p>这里的内容是在内容快中显示的</p></blockquote><p>删除线（中划线），需要使用“~”来包含需要删除线的文本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~fsadfsa~~</span><br></pre></td></tr></table></figure><p>效果显示</p><blockquote><p><del>fsadfsa</del></p></blockquote><p>下划线<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p></p><p>效果显示</p><blockquote><p><u>下划线的文本</u></p></blockquote><p>粗体+斜体，需要使用“***”，也就是三个星号，来包含需要粗体和斜体的文本<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***也就是三个星号***</span><br></pre></td></tr></table></figure><p></p><p>显示效果</p><blockquote><p><strong><em>也就是三个星号</em></strong></p></blockquote><p>斜体，需要使用“*”，也就是一个星号，来包含需要斜体的文本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*也就是一个星号*</span><br></pre></td></tr></table></figure><p>效果显示</p><blockquote><p><em>也就是一个星号</em></p></blockquote>]]></content>
      <categories>
        <category>初识hexo</category>
      </categories>
      <tags>
        <tag>初识hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的基本配置指令01</title>
    <url>/2018/10/04/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A401/</url>
    <content><![CDATA[<h3 id="alias指令：-设置指令的别名"><a href="#alias指令：-设置指令的别名" class="headerlink" title="alias指令： 设置指令的别名"></a>alias指令： 设置指令的别名</h3><ul><li>目的： 使用该指令可以对存在的指令设置一个容易记忆的别名</li><li>语法： alias 别名 = ‘复杂的指令’<h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> p = ‘passwd’</span><br><span class="line"><span class="built_in">alias</span> a = <span class="string">'adduser -d /home/she-p 123456 sun'</span> <span class="comment">#设置别名</span></span><br><span class="line"><span class="built_in">alias</span> <span class="comment">#列出当前已经设置的别名</span></span><br></pre></td></tr></table></figure></li></ul><p>ps： 重启系统别名失效，如果想要永久生效，需要编辑文档/home/gec/.bashrc来实现<br>该文件在root用户下。</p><h3 id="man-显示指令的帮助信息"><a href="#man-显示指令的帮助信息" class="headerlink" title="man:显示指令的帮助信息"></a>man:显示指令的帮助信息</h3><ul><li>目的:用man指令查看shell指令和相关函数</li><li>语法:[-可选参数] 指令名</li><li>说明: ubuntu中man的手册默认没有装。用下面几条命令就行了：<br>sudo apt-get install manpages<br>sudo apt-get install manpages-de<br>sudo apt-get install manpages-de-dev<br>sudo apt-get install manpages-dev<br>ubuntu man手册完善<br>Linux提供了丰富的帮助手册，当你需要查看某个命令的参数时不必到处上网查找，只要man一下即可。<br>Linux 的man手册共有以下几个章节：<br>1、Standard commands （标准命令）<br>2、System calls （系统调用）<br><font color="#7e7129">3、Library functions （库函数）</font><br>4、Special devices （设备说明）<br>5、File formats （文件格式）<br>6、Games and toys （游戏和娱乐）<br>7、Miscellaneous （杂项）<br>8、Administrative Commands （管理员命令）<h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man --<span class="built_in">help</span> <span class="comment">#帮助文档</span></span><br><span class="line">man 3 open <span class="comment">#查看open函数，3代表查看库函数</span></span><br><span class="line">man 1 ls <span class="comment">#查看ls命令，1代表查看标准命令</span></span><br></pre></td></tr></table></figure></li></ul><p>ps：man -k who 后面提到，-k：显示与指定字符匹配的标题字符串的每一行</p><h3 id="apropos：查找使用手册的名字和相关描述"><a href="#apropos：查找使用手册的名字和相关描述" class="headerlink" title="apropos：查找使用手册的名字和相关描述"></a>apropos：查找使用手册的名字和相关描述</h3><ul><li>目标：查找一个不知道的能完成某种特殊任务的命令名称，有时候会忘记执行特定任务的命令，就可以使用apropos找出来</li><li>语法：apropos [必要参数] [选择性参数] 关键词</li><li>参数说明：<br>（1）必要参数</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:center">输出调试信息</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">输出详细的警告信息</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">认为每个关键词是一个通常的表达式</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">认为每个关键词进行精确匹配</td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">对每个关键词进行精确匹配</td></tr></tbody></table><p>（2）非必要参数</p><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-s</td><td style="text-align:center">只在给定的部分进行搜索</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:center">帮助信息</td></tr><tr><td style="text-align:center">-V</td><td style="text-align:center">版本信息</td></tr></tbody></table><p>内建指令：whatis，man</p><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apropos -r ls<span class="comment">#以通常的方式找关键词ls</span></span><br><span class="line">apropos who <span class="comment">#等同于man -k who</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 迁移</title>
    <url>/2021/10/24/hexo-%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="迁移时候主要用到可参考的博客"><a href="#迁移时候主要用到可参考的博客" class="headerlink" title="迁移时候主要用到可参考的博客"></a>迁移时候主要用到可参考的博客</h2><ul><li><a href="https://www.cnblogs.com/iHeling/p/14095937.html" target="_blank" rel="noopener">https://www.cnblogs.com/iHeling/p/14095937.html</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>先安装必备软件<label style="color:red">git</label>, <label style="color:red">node.js</label>,</li></ul><h2 id="必备文件"><a href="#必备文件" class="headerlink" title="必备文件"></a>必备文件</h2><ul><li>从之前的博客文件夹中选择必须要拷贝的文件，备份起来。首先是之前自己修改的文件，像配置文件_config.yml,theme文件夹，source文件夹自己写的原始文件这些都是必须要拷贝走的。除此之外还有scaffolds文件夹(文件的模板)，package.json(使用哪些包)，.gitignore(提交忽略哪些文件夹)</li><li>总结：</li><li>_config.yml</li><li>themes</li><li>source</li><li>scaffolds</li><li>package.json</li><li>.gitignore<br>是需要备份的，其他文件不需要管。</li></ul><h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><h3 id="安装hexo软件"><a href="#安装hexo软件" class="headerlink" title="安装hexo软件"></a>安装hexo软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把必须拷贝的文件，拷贝到新建的文件夹内，执行以下命令</span></span><br><span class="line"><span class="comment"># 在新建的文件夹内打开命令行，安装必要的模块，初始化</span></span><br><span class="line"><span class="comment"># 这里不用hexo init初始化，因为配置文件我们已经拷贝过来</span></span><br><span class="line"></span><br><span class="line">npm install  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其他一些必要的组件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="迁移hexo用到的相关命令"><a href="#迁移hexo用到的相关命令" class="headerlink" title="迁移hexo用到的相关命令"></a>迁移hexo用到的相关命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"coder-zhanglei"</span> <span class="comment">#设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">"1357028281@qq.com"</span> <span class="comment">#设置邮箱</span></span><br><span class="line">git config user.name <span class="comment">#查询设置的用户名</span></span><br><span class="line">git config user.email <span class="comment">#查询设置的邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 正式部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="MARKDOWn编辑"><a href="#MARKDOWn编辑" class="headerlink" title="MARKDOWn编辑"></a>MARKDOWn编辑</h2><h3 id="vscode安装如下插件即可实现markdown语法的编辑"><a href="#vscode安装如下插件即可实现markdown语法的编辑" class="headerlink" title="vscode安装如下插件即可实现markdown语法的编辑"></a>vscode安装如下插件即可实现markdown语法的编辑</h3><ul><li>1、markdown all in one</li><li>2、markdown Preview enhanced，将原生markdown预览的黑色背景改为白色</li><li>3、markdown preview github stying，Github风格的预览</li></ul><label style="color:red">注：这三个插件是实现markdown编辑预览的基本插件，实现更多的markdown语法的功能，可探索更多相关的插件。</label><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>1、 hexo d提交时出现错误：<em>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/do" target="_blank" rel="noopener">http://hexo.io/do</a> TypeError [ERR_INVALID_ARG_TYPE]</em>:</p><label style="color:red">解决方法：</label>该问题是node.js版本过高，切换会旧版本即可，旧版本为：node-v12.22.9-x64.msi<br><br>2、 OpenSSL SSL_read: Connection was reset, <label style="color:red">errno 10054</label> <label style="color:red">解决方法：</label>执行命令<br><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">"false"</span></span><br></pre></td></tr></table></figure><br><br>3、 Failed to connect to github.com <label style="color:red">port 443 after 21098 ms:</label> Timed out<br><br><label style="color:red">解决方法：</label><p><label style="color:#00f">解决方法：</label>我们直接在终端先输入设置代理的命令，再输入取消代理的命令即可解决</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>初识hexo</category>
      </categories>
      <tags>
        <tag>初识hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的next创建about</title>
    <url>/2018/12/09/hexo%E7%9A%84next%E5%88%9B%E5%BB%BAabout/</url>
    <content><![CDATA[<h2 id="hexo的next创建about"><a href="#hexo的next创建about" class="headerlink" title="hexo的next创建about"></a>hexo的next创建about</h2><h3 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h3><ul><li>1、新建一个about页面，命令如下 ：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>注：在myBlog/source下会生成一个行的文件夹about，在该文件夹下会有一个index.md文件</p><pre><code>- 2、 菜单显示about链接，在主题的thems/next/_configy.yml设置中将menu中的about前面的注释去掉
</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives/</span><br><span class="line">categories: /categories/</span><br><span class="line">tags: /tags/</span><br><span class="line">about: /about/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>初识hexo</category>
      </categories>
      <tags>
        <tag>初识hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本配置指令03</title>
    <url>/2019/02/23/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A403/</url>
    <content><![CDATA[<h3 id="manpath-：设置man手册的查询路径"><a href="#manpath-：设置man手册的查询路径" class="headerlink" title="manpath ：设置man手册的查询路径"></a>manpath ：设置man手册的查询路径</h3><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">manpath <span class="comment">#列出目前的查询路径</span></span><br><span class="line">manpath -M /home/zhang <span class="comment">#指定查询路径</span></span><br></pre></td></tr></table></figure><h3 id="free：显示内存信息"><a href="#free：显示内存信息" class="headerlink" title="free：显示内存信息"></a>free：显示内存信息</h3><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -b <span class="comment">#以字节为单位显示</span></span><br><span class="line">free -k <span class="comment">#以KB为单位显示</span></span><br><span class="line">free -m <span class="comment">#以MB为单位显示</span></span><br><span class="line">free -s 10 <span class="comment">#每隔10s执行一次free，连续显示内存信息</span></span><br></pre></td></tr></table></figure><h3 id="crontab-：指定自动执行任务"><a href="#crontab-：指定自动执行任务" class="headerlink" title="crontab ：指定自动执行任务"></a>crontab ：指定自动执行任务</h3><ul><li>语法: crontab [-u&lt;用户名&gt;] [-可选参数]</li></ul><h4 id="创建新的-crontab-文件，或编辑现有文件"><a href="#创建新的-crontab-文件，或编辑现有文件" class="headerlink" title="创建新的 crontab 文件，或编辑现有文件"></a>创建新的 crontab 文件，或编辑现有文件</h4><p>创建 crontab 文件的最简单方法是使用 crontab -e 命令。<br>此命令会调用已为系统环境设置的文本编辑器。系统环境的缺省编辑器在 EDITOR 环境变量中定义。如果尚未设置此变量，crontab 命令将使用缺省编辑器 ed。最好选择您熟悉的编辑器。<br><strong>以下示例说明如何确定是否已定义编辑器，以及如何将 vi 设置为缺省值</strong><br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> <span class="variable">$EDITOR</span></span><br><span class="line">$ </span><br><span class="line">$ EDITOR=vi</span><br><span class="line">$ <span class="built_in">export</span> EDITOR</span><br></pre></td></tr></table></figure><p></p><h4 id="创建-crontab-文件时，该文件会自动放入-var-spool-cron-crontabs-目录，"><a href="#创建-crontab-文件时，该文件会自动放入-var-spool-cron-crontabs-目录，" class="headerlink" title="创建 crontab 文件时，该文件会自动放入 /var/spool/cron/crontabs 目录，"></a>创建 crontab 文件时，该文件会自动放入 /var/spool/cron/crontabs 目录，</h4><p>并以您的用户名命名。如果具有超级用户特权，则可为其他用户或 root 创建或编辑 crontab 文件。<br><strong>$ crontab -e [username]</strong><br><strong>以下示例说明如何为其他用户创建 crontab 文件</strong><br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e jones</span><br><span class="line">1 0 * * 0 rm /home/jones/*.<span class="built_in">log</span> &gt; /dev/null 2&gt;&amp;1 <span class="comment">#添加到新 crontab 文件中的以下命令项将在每个星期日的凌晨 1:00 自动删除用户起始目录中的所有日志文件。由于该命令项不重定向输出，因此将重定向字符添加到 *.log 之后的命令行中。这样可以确保正常执行命令。</span></span><br><span class="line">crontab -l <span class="comment">#列出目前的时程表</span></span><br><span class="line">crontab -r <span class="comment">#删除目前的时程表</span></span><br></pre></td></tr></table></figure><p></p><h4 id="时程表格式如下"><a href="#时程表格式如下" class="headerlink" title="时程表格式如下"></a>时程表格式如下</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> f1 f2 f3 f4 f5 program</span><br><span class="line"><span class="comment">#其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</span></span><br><span class="line"><span class="comment">#当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</span></span><br><span class="line"><span class="comment">#当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</span></span><br><span class="line"><span class="comment">#当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</span></span><br><span class="line"><span class="comment">#当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下的文本编辑01</title>
    <url>/2019/03/11/linux%E4%B8%8B%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%9101/</url>
    <content><![CDATA[<h2 id="vim-文本编辑"><a href="#vim-文本编辑" class="headerlink" title="vim :文本编辑"></a>vim :文本编辑</h2><ul><li>语法：vim [-可选参数] [文件]<h3 id="vim环境下的常用指令"><a href="#vim环境下的常用指令" class="headerlink" title="vim环境下的常用指令"></a>vim环境下的常用指令</h3></li><li>命令模式：<br>D:删除光标所在行后的所有词<br>nG：n为数字，将光标移至第n行位置<br>p：将复制的内容粘贴到光标所在位置<br>r：修改光标所在处的字符<br>x：删除光标所在处的字符<br>X：删除光标所在处的前一个字符<br>d+d：连按两次，将删除光标所在行<br>n+d+d：n为数字，删除光标所在行及其下面的n-1行，共n行<br>y+y：整行复制<br>Ctrl+b：向上翻一页<br>Ctrl+f：向下翻一页<br>Ctrl+d：向后翻半页<br>Ctrl+u：向前翻半页<br>Ctrl+g：在最后一行处显示光标所在位置的行数和文章的总行数</li><li><p>输入模式：<br>i：从当前光标处插入<br>I：从当前光标所在行的行首开始插入<br>o：在当前光标所在行下方新增一行，从新增行的行首开始输入<br>O：在当前光标所在行上方新增一行，从新增行的行首开始输入</p></li><li><p>末行模式<br>：n:加载文件<br>：w:存盘<br>：w newfile：文件另存为<br>：wq：存盘退出<br>：W!：对只读文件强制写入存盘<br>：q：退出<br>：q！：强制退出<br>：set nu：在每行的开头显示行数<br>：set none：取消每行开头的行数显示<br>：/字符串：匹配字符串查找，按n向下查找，N向上查找</p></li></ul><h2 id="wc：计算字数"><a href="#wc：计算字数" class="headerlink" title="wc：计算字数"></a>wc：计算字数</h2><ul><li>语法：wc[-可选参数][文件]</li><li>参数说明</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:center">只显示字符数</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">只显示行数</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">只显示字数</td></tr></tbody></table><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><pre><code class="bash">wc -c ar <span class="comment">#计算字节数</span>
wc -w ar <span class="comment"># 计算字数</span>
wc -l <span class="comment">#计算行数</span>
</code></pre><h2 id="tail-：显示文件的末尾内容"><a href="#tail-：显示文件的末尾内容" class="headerlink" title="tail ：显示文件的末尾内容"></a>tail ：显示文件的末尾内容</h2><ul><li>语法：tail [ 必要参数] [选择性参数][文件]</li><li>参数说明<br>（1）必要参数</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:center">循环读取</td></tr><tr><td style="text-align:center">-q</td><td style="text-align:center">不显示处理信息</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">运行时显示详细的处理信息</td></tr></tbody></table><p>（2）选择性参数</p><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:center">要显示的字节数</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">显示的行数</td></tr><tr><td style="text-align:center">-help</td><td style="text-align:center">帮助信息</td></tr></tbody></table><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><pre><code class="bash">tail -n 30 install.log <span class="comment">#显示文件末尾30行的内容</span>
tail -f 2.log <span class="comment">#显示文件内容。2.log文件是更新的，-f可以动态监测文件末尾的内容</span>
tail -n 5 *.<span class="built_in">log</span> <span class="comment">#显示文件末尾内容</span>
</code></pre>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的基本配置指令02</title>
    <url>/2019/02/22/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A402/</url>
    <content><![CDATA[<h3 id="clear-指令：清除屏幕信息"><a href="#clear-指令：清除屏幕信息" class="headerlink" title="clear 指令：清除屏幕信息"></a>clear 指令：清除屏幕信息</h3><ul><li>目的：对杂乱的屏幕进行清理</li><li>语法： clear</li></ul><h3 id="date-指令：-显示或设置系统时间指令"><a href="#date-指令：-显示或设置系统时间指令" class="headerlink" title="date 指令： 显示或设置系统时间指令"></a>date 指令： 显示或设置系统时间指令</h3><ul><li>目的：根据指定格式显示或设置当前系统的时间</li><li>语法：date [-可选参数][日期和时间格式] 格式为MMDDhhmm<h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date</span><br><span class="line">date “Date:%Y.%m.%d Time:%H.%M.%S”</span><br></pre></td></tr></table></figure></li></ul><h3 id="echo指令：字符串输出"><a href="#echo指令：字符串输出" class="headerlink" title="echo指令：字符串输出"></a>echo指令：字符串输出</h3><ul><li>目的；应用该指令的字符串的值输出到标准输出</li><li>语法：echo [-可选参数] 字符串输出<br>（1）必要参数</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td style="text-align:center">不在最后自动换行</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">若字符串出现以下字符，加以特别处理 \a发出警告 \v删除前一个字符 \c最后不加换行符号 \f换行但光标任停在原来的位置上 \n换行且光标移至行首 \r光标移至行首，但不换行 \t插入tab \v同\f \在输出插入\字符 \nnn 将nnn看做八进制，输出它所代表的ASCII字符</td></tr><tr><td style="text-align:center">-help</td><td style="text-align:center">帮助信息</td></tr><tr><td style="text-align:center">-version</td><td style="text-align:center">版本信息</td></tr></tbody></table><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e “123456\n”</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本配置指令04</title>
    <url>/2019/02/24/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A404/</url>
    <content><![CDATA[<h3 id="export-：设置或在显示环境变量"><a href="#export-：设置或在显示环境变量" class="headerlink" title="export ：设置或在显示环境变量"></a>export ：设置或在显示环境变量</h3><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> -p <span class="comment">#列出所有环境变量</span></span><br><span class="line"><span class="built_in">export</span> M_ENV = http://www.linux.org/ <span class="comment">#定义环境变量</span></span><br></pre></td></tr></table></figure><h3 id="lsmod：显示Linux内核的模块信息"><a href="#lsmod：显示Linux内核的模块信息" class="headerlink" title="lsmod：显示Linux内核的模块信息"></a>lsmod：显示Linux内核的模块信息</h3><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod <span class="comment">#显示载入系统的模块信息</span></span><br></pre></td></tr></table></figure><h3 id="reboot指令：重新启动"><a href="#reboot指令：重新启动" class="headerlink" title="reboot指令：重新启动"></a>reboot指令：重新启动</h3><ul><li>语法: reboot [-可选参数]<h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot -f <span class="comment">#强制重启</span></span><br><span class="line">reboot -i <span class="comment">#关闭网络设置后在重新启动</span></span><br><span class="line">reboot -n <span class="comment">#先保存数据，再重启</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="hostname-：显示或者设置当前系统的主机名"><a href="#hostname-：显示或者设置当前系统的主机名" class="headerlink" title="hostname ：显示或者设置当前系统的主机名"></a>hostname ：显示或者设置当前系统的主机名</h3><ul><li>语法：hostname [必要参数][选择性参数]</li></ul><h4 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname -i <span class="comment">#显示主机ip地址</span></span><br><span class="line">hostname -d <span class="comment">#显示主机域名</span></span><br><span class="line">hostname Apple <span class="comment">#设置主机名称</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件操作与管理01</title>
    <url>/2019/03/06/linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AE%A1%E7%90%8601/</url>
    <content><![CDATA[<h2 id="diff：生成差异文件"><a href="#diff：生成差异文件" class="headerlink" title="diff：生成差异文件"></a>diff：生成差异文件</h2><p>（1）参数说明</p><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:center">显示所有内容，同时标出不同之处</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">对文本文件进行逐行比较，非文本文件看作文本文件进行比较</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">忽略大小写的不同</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">比较目录时递归比较子目录中的文件</td></tr></tbody></table><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff -a a1.txt a3.txt <span class="comment">#比较两个文件的不同</span></span><br><span class="line">diff Desktop/yy1  Desktop/yy2  <span class="comment"># 比较两个文件夹的不同</span></span><br><span class="line">diff -c a1.txt a3.txt <span class="comment">#比较两个文件的不同，并生成差异文件</span></span><br></pre></td></tr></table></figure><h2 id="find-：查找目录或者文件"><a href="#find-：查找目录或者文件" class="headerlink" title="find ：查找目录或者文件"></a>find ：查找目录或者文件</h2><ul><li>语法： find[路径][-可选参数]</li></ul><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find *.txt <span class="comment"># 查找.txt的文件</span></span><br><span class="line">find /root/edsktop/yy1/ -ctime -2  <span class="comment">#查找448小时内被修改过的文件</span></span><br><span class="line">find -name yy* <span class="comment">#查找指定字符串类型的目录</span></span><br><span class="line">find -name yy.*<span class="comment">#查找的结果是以yy命名的文件</span></span><br><span class="line">find -size 0<span class="comment">#查找字节数为0的文件</span></span><br></pre></td></tr></table></figure><h2 id="ftp-：文件传输指令"><a href="#ftp-：文件传输指令" class="headerlink" title="ftp ：文件传输指令"></a>ftp ：文件传输指令</h2><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp 192.168.1.1 connected to 192.168.1.2<span class="comment">#使用ftp地址建立ftp连接</span></span><br></pre></td></tr></table></figure><p>注：建立的过程会输入用户名和密码，建立之后可用get和put指令实现文件的上传和下载<br>删除文件用delete指令</p><h2 id="gunzip：解压文件"><a href="#gunzip：解压文件" class="headerlink" title="gunzip：解压文件"></a>gunzip：解压文件</h2><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunzip yy.txt.gz <span class="comment">#解压文件</span></span><br><span class="line">gunzip -l yy.txt.gz <span class="comment">#解压文件时显示文件相关信息</span></span><br></pre></td></tr></table></figure><h2 id="gzip：压缩文件"><a href="#gzip：压缩文件" class="headerlink" title="gzip：压缩文件"></a>gzip：压缩文件</h2><h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip -v yy.txt <span class="comment">#压缩文件时显示文件相关信息</span></span><br><span class="line">gzip -d yy.txt.gz <span class="comment">#解压指定文件</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本配置指令05</title>
    <url>/2019/02/25/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A405/</url>
    <content><![CDATA[<h3 id="pkill-：杀死进程"><a href="#pkill-：杀死进程" class="headerlink" title="pkill ：杀死进程"></a>pkill ：杀死进程</h3><ul><li>语法: pkill [必要参数][选择性参数][字符串]</li><li>功能说明：pkill指令是和kill指令的结合，用来杀死指定的进程<h4 id="必要参数"><a href="#必要参数" class="headerlink" title="必要参数"></a>必要参数</h4></li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td style="text-align:center">显示新进程</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">与条件不符的进程</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">与条件符合的程序</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">指定终端下的进程</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">指定用户的程序</td></tr></tbody></table><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkill -9 ftp <span class="comment">#杀死进程ftp</span></span><br><span class="line">pkill -t tty1 <span class="comment">#杀死所有终端1下的进程</span></span><br><span class="line">ps -A <span class="comment">#显示所有进程</span></span><br><span class="line">pkill -u kk <span class="comment">#杀死用户kk的所有进程</span></span><br><span class="line">pkill -vu kk <span class="comment">#杀死不属于用户kk的所有进程</span></span><br></pre></td></tr></table></figure><h3 id="pmap-：显示程序的内存信息"><a href="#pmap-：显示程序的内存信息" class="headerlink" title="pmap ：显示程序的内存信息"></a>pmap ：显示程序的内存信息</h3><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pmap -2253 <span class="comment">#显示进程2263的内存信息</span></span><br><span class="line">pmap -x 2253 <span class="comment">#显示进程2263使用内存的详细信息</span></span><br><span class="line">pmap -d 2253 <span class="comment">#显示内存对应同时显示设备号</span></span><br></pre></td></tr></table></figure><h3 id="pwck-：检查密码文件"><a href="#pwck-：检查密码文件" class="headerlink" title="pwck ：检查密码文件"></a>pwck ：检查密码文件</h3><ul><li>语法 : pwck [必要参数][文件]</li></ul><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><pre><code class="bash">pwck /etc/passwd <span class="comment">#检测密码文件</span>

</code></pre>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件操作与管理02</title>
    <url>/2019/03/08/linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AE%A1%E7%90%8602/</url>
    <content><![CDATA[<h2 id="less-一次显示一页文本"><a href="#less-一次显示一页文本" class="headerlink" title="less :一次显示一页文本"></a>less :一次显示一页文本</h2><ul><li>语法 ： less [-参数] 文件名</li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">less a3.txt</span><br></pre></td></tr></table></figure><p>注：显示文本后：按b：向后翻页，d：向后翻半页，h:显示帮助界面，u：向前滚动半页，<br>y:向前滚动一行；回车键：滚动一行；空壳键：滚动一页；q：退出</p><h2 id="mv：移动或更名现有的文件或目录"><a href="#mv：移动或更名现有的文件或目录" class="headerlink" title="mv：移动或更名现有的文件或目录"></a>mv：移动或更名现有的文件或目录</h2><ul><li>语法：mv [-可选参数] 源文件 目标文件/目录</li></ul><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv a.txt b.txt</span><br></pre></td></tr></table></figure><h2 id="ncftp：文件传输指令"><a href="#ncftp：文件传输指令" class="headerlink" title="ncftp：文件传输指令"></a>ncftp：文件传输指令</h2><ul><li>语法：ncftp [-可选参数] [主机/IP地址]</li><li>参数选择</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-u&lt;用户名&gt;</td><td style="text-align:center">使用用户名</td></tr><tr><td style="text-align:center">-p&lt;密码&gt;</td><td style="text-align:center">使用指定密码</td></tr><tr><td style="text-align:center">-P&lt;端口号&gt;</td><td style="text-align:center">使用指定端口号，默认为21</td></tr></tbody></table><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncftp -u sy114 -p 123456 192.168.128.1   <span class="comment">#登录</span></span><br><span class="line"><span class="comment">##相似的命令</span></span><br><span class="line">ncftpget -u sy114 -p 123456 192.168.128.1 /home/yy1/vc <span class="comment">#下载文件</span></span><br><span class="line">ncftpput -u sy114 -p 123456 192.168.128.1 /home/yy1/vc <span class="comment">#上传文件</span></span><br></pre></td></tr></table></figure><p>注：登录上后跟ftp指令相似</p><h2 id="paste：合并文件"><a href="#paste：合并文件" class="headerlink" title="paste：合并文件"></a>paste：合并文件</h2><ul><li>语法：paste [-可选参数] [文件]<h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paste a1 a2 <span class="comment">#合并文件的行</span></span><br><span class="line">paste -s a1 a2 <span class="comment">#合并文件的行，并指定间隔符</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="patch：修补文件，给文件打补丁"><a href="#patch：修补文件，给文件打补丁" class="headerlink" title="patch：修补文件，给文件打补丁"></a>patch：修补文件，给文件打补丁</h2><ul><li>语法： patch [-可选参数] [文件]<h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff a1 a2&gt;sy.diff <span class="comment">#比较文件的差异，生成差异文件sy.diff</span></span><br><span class="line">patch a1&lt;sy.diff <span class="comment">#修复a1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用的指令</title>
    <url>/2019/01/20/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="linux查询进程指令"><a href="#linux查询进程指令" class="headerlink" title="linux查询进程指令"></a>linux查询进程指令</h2><p>1、进程查询指令<br></p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">ps -ef <span class="string">| grep calculatorBuysell | grep -v grep | wc -l</span></span><br></pre></td></tr></table></figure><p></p><p>注：该命令可以查询calculatorBuysell进程的个数</p><p>2、查看Ubuntu版本的命令<br></p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p></p><p>3、查看Linux内核版本的指令<br></p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的日志与进程管理</title>
    <url>/2019/03/16/linux%E7%9A%84%E6%97%A5%E5%BF%97%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%8601/</url>
    <content><![CDATA[<h2 id="nice-设置优先级"><a href="#nice-设置优先级" class="headerlink" title="nice:设置优先级"></a>nice:设置优先级</h2><ul><li>语法：nice [-可选参数] [指令] [属性]<h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> nice -n 17 free -s 60&amp; <span class="comment"># 在后台运行free指令，设置优先级为17</span></span><br><span class="line"><span class="comment"># 注解：将free -s 60&amp;的优先级设为17，通过ps -l输出的NI项就可以看当前系统中相关进程的优先级</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ps指令：报告程序状况"><a href="#ps指令：报告程序状况" class="headerlink" title="ps指令：报告程序状况"></a>ps指令：报告程序状况</h2><ul><li>语法：ps [-可选参数]</li></ul><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -a <span class="comment">#显示系统进程</span></span><br><span class="line">pstree -anh <span class="comment">#显示进程间的关系 a:显示完整的指令，n:以进程ID排序，h:对现在执行的程序进行特别标注</span></span><br></pre></td></tr></table></figure><h2 id="fg：将后台任务拉到前台执行"><a href="#fg：将后台任务拉到前台执行" class="headerlink" title="fg：将后台任务拉到前台执行"></a>fg：将后台任务拉到前台执行</h2><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp 192.198.88.2 &amp;</span><br><span class="line"><span class="built_in">fg</span> %1 <span class="comment">#将ftp拉到前台执行</span></span><br></pre></td></tr></table></figure><h2 id="killall：杀死同名的所有进程"><a href="#killall：杀死同名的所有进程" class="headerlink" title="killall：杀死同名的所有进程"></a>killall：杀死同名的所有进程</h2><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall joe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux用户指令01</title>
    <url>/2019/03/03/linux%E7%94%A8%E6%88%B7%E6%8C%87%E4%BB%A401/</url>
    <content><![CDATA[<h2 id="who：显示系统用户信息"><a href="#who：显示系统用户信息" class="headerlink" title="who：显示系统用户信息"></a>who：显示系统用户信息</h2><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who <span class="comment">#显示当前登录系统的用户信息</span></span><br><span class="line">who -l -H<span class="comment"># 显示用户登录位置</span></span><br></pre></td></tr></table></figure><h2 id="whois：查找用户-域名信息"><a href="#whois：查找用户-域名信息" class="headerlink" title="whois：查找用户/域名信息"></a>whois：查找用户/域名信息</h2><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whois mary <span class="comment">#查找Mary用户的信息</span></span><br><span class="line">whois www.miwifi.com <span class="comment"># 查找目标网络信息</span></span><br></pre></td></tr></table></figure><h2 id="bunzip2，bzip2，bzip2recover：解压-bz2类型的文件，压缩成-bz2文件，损坏-bz2文件的修复"><a href="#bunzip2，bzip2，bzip2recover：解压-bz2类型的文件，压缩成-bz2文件，损坏-bz2文件的修复" class="headerlink" title="bunzip2，bzip2，bzip2recover：解压.bz2类型的文件，压缩成.bz2文件，损坏.bz2文件的修复"></a>bunzip2，bzip2，bzip2recover：解压.bz2类型的文件，压缩成.bz2文件，损坏.bz2文件的修复</h2><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bunzip2 -c filename.bz2 <span class="comment">#解压后文件直接输出到标准输出</span></span><br><span class="line">bzip2 filename</span><br><span class="line">bzip2 -7 -k filename <span class="comment">#压缩文件filename并保留原文件</span></span><br><span class="line">bzip2-b filename.bz2 <span class="comment">#解压文件</span></span><br><span class="line">bzip2recover filename <span class="comment">#修复.bz2文件</span></span><br></pre></td></tr></table></figure><h2 id="linux中cat、more、less命令区别详解"><a href="#linux中cat、more、less命令区别详解" class="headerlink" title="linux中cat、more、less命令区别详解"></a>linux中cat、more、less命令区别详解</h2><p>linux中命令cat、more、less均可用来查看文件内容，主要区别有：<br>cat是一次性显示整个文件的内容，还可以将多个文件连接起来显示，<br>它常与重定向符号配合使用，适用于文件内容少的情况；<br>more和less一般用于显示文件内容超过一屏的内容，并且提供翻页的功能。<br><strong>more比cat强大</strong>，提供分页显示的功能，<strong>less比more更强大</strong>，提供翻页，跳转，查找等命令。<br>而且more和less都支持：用空格显示下一页，按键b显示上一页。下面详细介绍这3个命令。</p>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件操作与管理03</title>
    <url>/2019/03/09/linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AE%A1%E7%90%8603/</url>
    <content><![CDATA[<h2 id="rcp-：远程复制文件或目录"><a href="#rcp-：远程复制文件或目录" class="headerlink" title="rcp ：远程复制文件或目录"></a>rcp ：远程复制文件或目录</h2><ul><li>语法：rcp [- 可选参数]远程/本地主机名：源文件/目录 本地/远程主机名：目标文件/目录</li><li>参数选择</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-p</td><td style="text-align:center">保留源文件/目录的属性</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">处理指定文件夹下的文件及其子目录下的所有文件</td></tr></tbody></table><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rcp -p 192.168.1.121:/home/vc /home/yy/ <span class="comment">#复制文件，将远程文件复制到本地/home/yy/，同时保留源文件的属性，一般主机名不用给</span></span><br></pre></td></tr></table></figure><h2 id="tar-：打包同时压缩-解压文件"><a href="#tar-：打包同时压缩-解压文件" class="headerlink" title="tar ：打包同时压缩/解压文件"></a>tar ：打包同时压缩/解压文件</h2><ul><li>语法：[- 可选参数] [文件]</li><li>参数选择</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:center">压缩文件</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">解压文件</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">添加文件到已存在的备份文件的尾部</td></tr><tr><td style="text-align:center">-j</td><td style="text-align:center">使用bzip2压缩文件</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">使用gzip压缩文件</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">显示详细信息</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:center">指定备份文件</td></tr></tbody></table><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf s1.tar.gz  <span class="comment">#解压s1.tar.gz 文件</span></span><br><span class="line">tar -czvf s1.tar.gz *.txt  <span class="comment">#压缩.txt文件</span></span><br><span class="line">tar  -c a1.txt a2.txt &gt;s1.tar <span class="comment">#打包文件</span></span><br></pre></td></tr></table></figure><h2 id="whereis-，which：查找文件"><a href="#whereis-，which：查找文件" class="headerlink" title="whereis ，which：查找文件"></a>whereis ，which：查找文件</h2><p>-语法 ：whereis/which [-可选参数] 文件</p><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis *.txt <span class="comment">#查找文件，查找目录下的.txt文件</span></span><br><span class="line"><span class="built_in">which</span> az <span class="comment">#查找文件，执行which az， 在环境变量$PATH指定的目录“/usr/bin”下查找文件，显示查找结果</span></span><br></pre></td></tr></table></figure><h2 id="info：读取目录信息"><a href="#info：读取目录信息" class="headerlink" title="info：读取目录信息"></a>info：读取目录信息</h2><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info init &gt;1.log <span class="comment">#显示init的帮助信息</span></span><br><span class="line">info info <span class="comment">#显示info的具体使用方法</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux磁盘操作管理</title>
    <url>/2019/03/13/linux%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%8601/</url>
    <content><![CDATA[<h2 id="badblocks-：检查磁盘坏道"><a href="#badblocks-：检查磁盘坏道" class="headerlink" title="badblocks ：检查磁盘坏道"></a>badblocks ：检查磁盘坏道</h2><ul><li>语法：badblocks [-可选参数] 磁盘设备 [结束块 [启始块]]</li><li>参数说明</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:center">强制检查一个已经挂载的设备</td></tr><tr><td style="text-align:center">-b&lt;区块大小&gt;</td><td style="text-align:center">指定磁盘的区块大小，以字节为单位</td></tr><tr><td style="text-align:center">-c&lt;区块大小&gt;</td><td style="text-align:center">指定每个磁盘区块检查的次数</td></tr><tr><td style="text-align:center">-i&lt;文件&gt;</td><td style="text-align:center">跳过保存在指定文件中的坏道消息，避免重复检查</td></tr><tr><td style="text-align:center">-o&lt;文件&gt;</td><td style="text-align:center">将检查的结果输出到指定的文件中进行保存</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">显示检查进度</td></tr></tbody></table><p>注：/dev/hd:IDE磁盘；/dev/sd:SCSI磁盘；/dev/ed:ESDI磁盘；/dev/fd:软磁盘</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">badblocks /dev/fd0H1440 <span class="comment">#检查整个磁盘是否有坏道</span></span><br><span class="line">badblocks -b /dev/hdal -o had-badblocks <span class="comment">#检查/dev/hdal 是否有坏道，同时将检查的结果保存到文件hda-badlocks中\</span></span><br><span class="line"><span class="comment">#如果有坏道查看文件将显示列表，如果没有无信息被列出</span></span><br></pre></td></tr></table></figure><h2 id="df-磁盘信息"><a href="#df-磁盘信息" class="headerlink" title="df:磁盘信息"></a>df:磁盘信息</h2><ul><li>说明：使用df查看磁盘空间的信息，可以查看文件系统的占有情况。</li><li>语法：df [-可选参数] [文件或设备]</li><li>参数说明</li></ul><table><thead><tr><th style="text-align:center">参 数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-h</td><td style="text-align:center">以可读性较高的方式显示</td></tr><tr><td style="text-align:center">-H</td><td style="text-align:center">相当于“-h”，但在计算时，1K = 1000,而不是1024</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">显示包括0块在内的所有文件系统的情况</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">显示inode节点信息</td></tr></tbody></table><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df <span class="comment">#显示磁盘信息</span></span><br><span class="line">df -h</span><br><span class="line">df -ia</span><br><span class="line">df -t ext2 <span class="comment">#显示当前磁盘的文件系统的信息</span></span><br></pre></td></tr></table></figure><h2 id="du-：显示目录或者文件所占的磁盘空间"><a href="#du-：显示目录或者文件所占的磁盘空间" class="headerlink" title="du ：显示目录或者文件所占的磁盘空间"></a>du ：显示目录或者文件所占的磁盘空间</h2><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du ax <span class="comment">#显示ax文件占用的磁盘空间</span></span><br><span class="line">du <span class="comment">#显示当前目录所占的磁盘空间</span></span><br></pre></td></tr></table></figure><h2 id="tree-：以树状图显示目录内容"><a href="#tree-：以树状图显示目录内容" class="headerlink" title="tree ：以树状图显示目录内容"></a>tree ：以树状图显示目录内容</h2><ul><li>语法：tree [-可选参数] [目录]</li></ul><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>log4cxx移植笔记</title>
    <url>/2022/01/04/log4cxx%E7%A7%BB%E6%A4%8D%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="log4cxx文件的编译"><a href="#log4cxx文件的编译" class="headerlink" title="log4cxx文件的编译"></a>log4cxx文件的编译</h2><p>编译需要的三个文件：<br>1、apache-log4cxx-0.10.0</p><h2 id="log4cxx-配置文件解读"><a href="#log4cxx-配置文件解读" class="headerlink" title="log4cxx 配置文件解读"></a>log4cxx 配置文件解读</h2>]]></content>
      <categories>
        <category>log4cxx</category>
      </categories>
      <tags>
        <tag>log4cxx的移植</tag>
      </tags>
  </entry>
  <entry>
    <title>linux网络服务01</title>
    <url>/2019/03/14/linux%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A101/</url>
    <content><![CDATA[<h2 id="ifconfig-显示或者配置网络设备"><a href="#ifconfig-显示或者配置网络设备" class="headerlink" title="ifconfig: 显示或者配置网络设备"></a>ifconfig: 显示或者配置网络设备</h2><ul><li>语法：ifconfig [网络设备] [-可选参数]</li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig  <span class="comment">#显示当前网络设备状态</span></span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0 <span class="comment">#配置网卡参数</span></span><br><span class="line">ifconfig eth1 down <span class="comment">#关闭网卡</span></span><br><span class="line">ifconfig eth1 up <span class="comment">#开启网卡</span></span><br><span class="line">ifconfig eth1 hw ether 00:10:B2:56:64:2B <span class="comment">#修改网卡的物理地址</span></span><br></pre></td></tr></table></figure><h2 id="ping-测试网络"><a href="#ping-测试网络" class="headerlink" title="ping:测试网络"></a>ping:测试网络</h2><ul><li>语法：ping [-可选参数] 网络地址</li></ul><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 128.168.12.13 <span class="comment">#检测ping的与远端主机的连通情况</span></span><br><span class="line">ping -c 128.168.12.13 <span class="comment">#指定发送数据包的次数</span></span><br></pre></td></tr></table></figure><h2 id="netstat：显示网络状态"><a href="#netstat：显示网络状态" class="headerlink" title="netstat：显示网络状态"></a>netstat：显示网络状态</h2><ul><li>语法：netstat [必要参数] [选择性参数]</li></ul><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -r <span class="comment">#显示系统的路由表</span></span><br><span class="line">netstat -an <span class="comment">#显示详细的网络状况</span></span><br></pre></td></tr></table></figure><h2 id="telnet-远程登录"><a href="#telnet-远程登录" class="headerlink" title="telnet:远程登录"></a>telnet:远程登录</h2><ul><li>语法：telnet [-可选参数] 主机名/IP</li></ul><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 192.168.1.1 <span class="comment">#远程登录</span></span><br></pre></td></tr></table></figure><h2 id="rsh-：远端登录的shell"><a href="#rsh-：远端登录的shell" class="headerlink" title="rsh ：远端登录的shell"></a>rsh ：远端登录的shell</h2><ul><li>语法：rsh [-可选参数] 主机 指令</li></ul><h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig rlogin on <span class="comment">#启动rlogin工具</span></span><br><span class="line">rlogin 192.168.1.1 <span class="comment">#登录远程主机</span></span><br><span class="line">rsh -l mary 192.168.1.1 /bin/<span class="built_in">pwd</span> <span class="comment">#登录远程主机执行指令/bin/pwd,要正确执行该指令，必须现在远程主机192.168.1.1上启动rlogin指令</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux浅见</category>
      </categories>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab 图形绘制</title>
    <url>/2019/08/07/matlab-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<h2 id="二维曲线的绘制"><a href="#二维曲线的绘制" class="headerlink" title="二维曲线的绘制"></a>二维曲线的绘制</h2><h3 id="相关的绘图命令"><a href="#相关的绘图命令" class="headerlink" title="相关的绘图命令"></a>相关的绘图命令</h3><p>1、 figure</p><ul><li>figure：创建一个图形窗口。</li><li>figure(n)：n是正整数，创建一个编号为n的图形窗口</li><li>figure(‘PropertyName’,’PropertyValue’,…):对指定的属性PropertyName，用指定的属性值PropertyValue创建一个新的图形窗口。<br>2、 plot</li><li>plot(x)</li><li>plot(x,y)</li><li>plot(x1,y1,x2,y2)</li><li>plot(x,y,s)其中x，y为向量或矩阵，s为用单引号标记的字符串，用来设置所画数据点的类型、大小、颜色以及数据点之间的连线的类型、粗细、颜色等。实际应用中，s是某些字母或符号的组合。</li><li>plot(x1,y1,s1,x2,y2,s2……)<br>3、 多图形显示<br>(1)、 图形分割</li><li>subplot(m,n,p)将当前窗口分割为m×n个视图区域，并指定地p个视图为当前视图。</li><li>subplot(‘position’,[left bottom width height]):产生的新子区域的位置由用户指定，后面的四元组为区域的具体参数控制，宽高的取值范围都是[0,9]</li></ul><h3 id="图形的叠加"><a href="#图形的叠加" class="headerlink" title="图形的叠加"></a>图形的叠加</h3><p>图形保持命令hold on/off控制原有图形的保持与不保持</p><h3 id="一元函数的绘制fplot"><a href="#一元函数的绘制fplot" class="headerlink" title="一元函数的绘制fplot"></a>一元函数的绘制fplot</h3><ul><li>plot命令是依据给定的数据点来做图的，在实际情况中，一般不清楚函数具体情况，因此依据所选取的数据点作图可能会忽略真实函数的某些特性。</li><li>fplot命令用于指导数据点的选取，通过其内部自适应算法，在函数变化比较平稳处，它所区的值相对稀疏些，在函数变化明显处取的数据点自动密一些。</li></ul><h3 id="图形注释"><a href="#图形注释" class="headerlink" title="图形注释"></a>图形注释</h3><ul><li>title(‘string’),title(fname)</li><li>h = title(….)</li><li>xlable(‘string’)在当前轴对象中的x轴标注说明语句string</li><li>ylabel(‘’)在当前轴对象中的y轴标注说明语句string</li><li>text(x,y,’string’)在图形中指定的位置（x,y）上显示字符串string</li><li>gtext（‘string’,’property’,’propertyvalue’）可以让鼠标在图形的任意位置进行标注。<h3 id="图例标注"><a href="#图例标注" class="headerlink" title="图例标注"></a>图例标注</h3>当在一幅图中出现多种曲线时，用户可以根据自己的需要，利用legend命令对不同的图例进行说明。</li></ul><h2 id="编译-m文件"><a href="#编译-m文件" class="headerlink" title="编译.m文件"></a>编译.m文件</h2><p>在命令窗口中输入<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mcc -m test.m</span><br></pre></td></tr></table></figure><p></p><h2 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h2><p>1、 利用moviein命令对内存进行初始化，创建一个足够大的矩阵，使其能够容纳基于当前坐标轴大小的一系列指定的图形（帧）；moviein(n)可以创建一个足够大的n列矩阵。<br>2、 利用getframe命令生成每个帧。<br>3、 利用movie命令按照指定的速度和次数运行该动画，movie(M,n)可以播放由矩阵M所定义的画面n次默认n时，播放一次。<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[X,Y,Z] = peaks(<span class="number">30</span>);</span><br><span class="line">surf(X,Y,Z)</span><br><span class="line">axis([<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-10</span>,<span class="number">10</span>])</span><br><span class="line">axis off</span><br><span class="line">shading interp</span><br><span class="line">colormap(hot)</span><br><span class="line">M = moviein(<span class="number">20</span>);<span class="comment">%建立一个20列的大矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>= <span class="number">1</span>:<span class="number">20</span></span><br><span class="line">    view(<span class="number">-37.5</span>+<span class="number">24</span>*(<span class="built_in">i</span><span class="number">-1</span>),<span class="number">30</span>)<span class="comment">%改变视点</span></span><br><span class="line">    M(:,<span class="built_in">i</span>) = getframe; <span class="comment">%将图像保存到M矩阵中</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">movie(M,<span class="number">2</span>)<span class="comment">%画面播放两次</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>matlab学习</category>
      </categories>
      <tags>
        <tag>matlab基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab 最优化设计</title>
    <url>/2019/08/22/matlab-%E6%9C%80%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="线性规划（line-programming）"><a href="#线性规划（line-programming）" class="headerlink" title="线性规划（line programming）"></a>线性规划（line programming）</h2><h3 id="MATLAB-求解"><a href="#MATLAB-求解" class="headerlink" title="MATLAB 求解"></a>MATLAB 求解</h3><ul><li>lineprog()是解线性规划的命令。调用格式在软件中可查。</li><li>lsqnonlin()是解决非线性最小二乘法问题。<h2 id="数理统计分析"><a href="#数理统计分析" class="headerlink" title="数理统计分析"></a>数理统计分析</h2>对离散数据和连续数据进行分析处理，即数理统计分析。matlab中包括曲线拟合和回归分析。<h3 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h3>计算样本均值的函数是mean。<h2 id="样本方差与标准差"><a href="#样本方差与标准差" class="headerlink" title="样本方差与标准差"></a>样本方差与标准差</h2>计算样本方差的函数是var；<br>标准差的函数为std；<h2 id="协方差和相关系数"><a href="#协方差和相关系数" class="headerlink" title="协方差和相关系数"></a>协方差和相关系数</h2>计算协方差的函数为cov；<br>计算相关系数的函数为corroef；<br>lyfit(x,y,n):表示用二乘法对已知数据x，y进行拟合，以求得n阶多项式系数向量。<br>[p,s] = polyfit(x,y,n) p为拟合多项式系数向量，s为拟合多项式系数向量的信息结构。<h3 id="函数线性组合"><a href="#函数线性组合" class="headerlink" title="函数线性组合"></a>函数线性组合</h3>g(x) = c1 + c2e^-2x + c3cos(-2x)e^-4x + c4x^2;求出待定系数。<br>实验数据<br>| x | 0 | 0.2 | 0.4 | 0.7 | 0.9 | 0.92 |<br>| y | 2.88 | 2.2576 | 1.9638 | 1.9258 | 2.0862 | 2.109 |<br>解：<br>（1） 编写M文件<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yy</span> = <span class="title">linefit2</span><span class="params">(x,y,A)</span></span></span><br><span class="line">n = <span class="built_in">length</span>(x);</span><br><span class="line">y = <span class="built_in">reshape</span>(y,n,<span class="number">1</span>);</span><br><span class="line">A = A';</span><br><span class="line">yy = A\y;</span><br><span class="line">yy = yy';</span><br></pre></td></tr></table></figure></li></ul><p>(2) 变量量矩阵<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span> <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.7</span> <span class="number">0.9</span> <span class="number">0.92</span>];</span><br><span class="line">y = [<span class="number">2.88</span> <span class="number">2.2576</span> <span class="number">1.9638</span> <span class="number">1.9258</span> <span class="number">2.0862</span> <span class="number">2.109</span>];</span><br></pre></td></tr></table></figure><p></p><p>(3) 输入表达式<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="built_in">ones</span>(<span class="built_in">size</span>(x)); <span class="built_in">exp</span>(<span class="number">-2</span>*x);<span class="built_in">cos</span>(<span class="number">-2</span>*x).*<span class="built_in">exp</span>(<span class="number">-4</span>*x);x.^<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p></p><p>(4) 调用linefit2函数<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">yy = linefit2(x,y,A);</span><br></pre></td></tr></table></figure><p></p><p>(5) 绘制图形<br></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x,y1);</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">0.92</span>]';</span><br><span class="line">A1 = [<span class="built_in">ones</span>(<span class="built_in">size</span>(x)); <span class="built_in">exp</span>(<span class="number">-2</span>*x);<span class="built_in">cos</span>(<span class="number">-2</span>*x).*<span class="built_in">exp</span>(<span class="number">-4</span>*x);x.^<span class="number">2</span>];</span><br><span class="line">y1 = A1 * yy';</span><br><span class="line"><span class="built_in">plot</span>(x,y1);</span><br></pre></td></tr></table></figure><p></p><h2 id="最小二乘法曲线拟合"><a href="#最小二乘法曲线拟合" class="headerlink" title="最小二乘法曲线拟合"></a>最小二乘法曲线拟合</h2><p>MATLAB提供了polyfit函数命令进行最小二乘法的曲线拟合。<br>p = ployfit(x,y,n) 对向量x和y进行n维多项式的最小二乘拟合，输出结果P为含有n+1个元素的行向量，该向量以维数递减的形式给出多项式的系数。n为次数。</p><h2 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h2><p>变量之间的关系可以分为两种：确定性的函数关系和不确定性统计关系。统计分析是研究统计关系的一种数学方法，<strong>可以由一个变量的值去估计另一个变量的值。</strong></p><h3 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h3><p>如果在总体中，因变量与自变量的统计关系符合一元线性的正态误差模型，即对给定的Xi有Yi=b0+b1xi+ε。<br>matlab提供的一元线性回归函数为polyfit，因为一元线性回归其实就是一阶多项式拟合。</p><h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><p>对于因变量y的全面解释往往需要多个自变量的共同作用。当有p个自变量x1,x2,…..xp时，多元线性回归的理论模型为：<br>y = β0+β1x1+….+βxp+ε;<br>其中，ε是随机误差，E(ε) = 0；<br>matlab提供了regress函数进行多元线性回归，。</p>]]></content>
      <categories>
        <category>matlab学习</category>
      </categories>
      <tags>
        <tag>matlab基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab基础知识</title>
    <url>/2019/07/30/matlab%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="matlab基本命令"><a href="#matlab基本命令" class="headerlink" title="matlab基本命令"></a>matlab基本命令</h2><p>1、 path命令<br>在matlab的命令行中输入可以得到matlab的所有搜索路径。使用path扩展搜索目录：path(path,’D:\matlab’)<br>2、 genpath命令<br>在命令行中输入可以得到，有MATLAB所有的搜索路径连接而成的一个长字符串。<br>3、 使addpath命令扩展目录<br>addpathD:\matlab -begin 将matlab添加到整个搜索路径的开始<br>addpathD:\matlab -end 将matlab添加到整个搜索路径的末尾。</p><h3 id="MATLAB帮助系统"><a href="#MATLAB帮助系统" class="headerlink" title="MATLAB帮助系统"></a>MATLAB帮助系统</h3><p>1、 帮助命令<br>help、help+函数名（类）、helpwin和helpdesk，其中后两个是用来调用MATLAB联机帮助窗口。<br>2、 lookfor函数<br>当用户不知道某个函数的确切名称，可以用lookfor函数，根据关键字搜索。<br>3、 其他的帮助命令</p><ul><li>who：内存变量列表</li><li>whos：内存变量的详细信息</li><li>what：目录中的文件列表</li><li>which：确定文件位置</li><li>exist：变量检验函数<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3>1、 cd：显示或者改变工作目录<br>2、 clc：清除工作窗<br>3、 clear：清除内存变量<h3 id="续行符"><a href="#续行符" class="headerlink" title="续行符"></a>续行符</h3>“…”用3个或3个以上的连续黑点表示“续行”</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>主要的数据类型：数字，字符串，向量，矩阵，单元型数据及结构型数据</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><p>在未加特殊说明的情况下，matlab语言将所识别的一切变量视为局部变量，仅在其使用的M文件内有效。如果要将其定义为全局变量<br>加关键字global。</p><h3 id="数字的显示格式"><a href="#数字的显示格式" class="headerlink" title="数字的显示格式"></a>数字的显示格式</h3><p>在默认的状态下，数据为整型，以整数表示，数据为实数，保留小数后4位的精度近式值。</p><h4 id="format控制数字显示格式"><a href="#format控制数字显示格式" class="headerlink" title="format控制数字显示格式"></a>format控制数字显示格式</h4><p>format long,pi ;15位定点表示<br>基本格式：format后加变量的类型用逗号隔开，加要输出的变量。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>所有的字符串都用单引号设定后输入或赋值；字符串相关函数以str开头。</p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><ul><li>冒号法创建向量：x = first：increment：last；向量就相当于一维数组。</li><li>对数分隔的向量，x = logspace（first_value,last_value,number）</li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="矩阵的创建"><a href="#矩阵的创建" class="headerlink" title="矩阵的创建"></a>矩阵的创建</h3><ul><li>eye函数；创建单位矩阵；eye（size(A)） 创建和A相同的单位矩阵</li><li>rand函数，创建随机矩阵</li><li>compan(P) 创建系数向量是P的多项式伴随矩阵</li><li>diag(v) 创建一向量v中的元素为对角的对角阵</li><li>hilb(n) 创建nxn的Hilbert矩阵</li><li>zeros</li><li>ones</li></ul><h3 id="矩阵元素的修改"><a href="#矩阵元素的修改" class="headerlink" title="矩阵元素的修改"></a>矩阵元素的修改</h3><p>A(m,:) = [] ;删除A的第m行<br>A(:,n) = [] ;删除A的第n列<br>A(m,n) = a; 对m行n列的元素赋值</p><h2 id="单元型变量"><a href="#单元型变量" class="headerlink" title="单元型变量"></a>单元型变量</h2><p>单元型变量是以单元为元素的数组，每个元素称为单元，每个单元可以包含其他类型的数组，如实数矩阵、字符串，复数向量。单元<br>变量通常用{}创建，其数据通过数组下标来引用。A={}；</p><h2 id="结构型变量"><a href="#结构型变量" class="headerlink" title="结构型变量"></a>结构型变量</h2><p>结构型变量是根据属性名（field）组织起来的不同数据类型的集合。结构的任何一个属性可以包含不同的数据类型，如字符串，矩阵等。结构型变量用函数struct来创建。s = struct(‘field’,{},’field2’,{},…) ;s = struct(‘field’,values1,’field2,values2’)</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>.* 点乘</li><li>.^ 点乘方</li><li>./ 、 .\ 点右除，点左除</li><li>‘ 矩阵转置。当矩阵是复数时，求矩阵的共轭转置</li><li>.’ 矩阵转置。当矩阵是复数时，不求矩阵的共轭转置<br>注解：点运算是指元素点对点的运算，即矩阵内元素对元素之间的运算。点运算要求参与运算的变量在结构上必须是相似的。</li><li>~= 不等于</li></ul>]]></content>
      <categories>
        <category>matlab学习</category>
      </categories>
      <tags>
        <tag>matlab基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab 程序设计基础</title>
    <url>/2019/08/03/matlab-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p>程序设计语言，程序结构大致可分为顺序结构，循环结构，与分支结构三类。</p><h3 id="程序流程控制指令"><a href="#程序流程控制指令" class="headerlink" title="程序流程控制指令"></a>程序流程控制指令</h3><p>1、 中断命令break<br>2、 return命令<br>3、 等待用户反应命令pause<br>pause指令是暂停指令。程序运行时，到pause指令执行后，程序将暂停，等待用户按任意键后而继续执行。</p><ul><li>pause 暂停程序等待回应</li><li>pause(n) 程序运行过程中，等待n秒后继续运行</li><li>pause on 显示其后的pause指令，并执行pause指令</li><li>pause off 显示其后的pause指令，但不执行该指令<h2 id="人机交互语句"><a href="#人机交互语句" class="headerlink" title="人机交互语句"></a>人机交互语句</h2>1、 input命令<br>v= input(‘string’) %以文本字符串string为信息给出用户提示信息，将用户输入的内容赋值给变量v<br>v = input(‘string’,’s’) % 以文本字符串string为信息给出用户提示信息，将用户输入的内容作为字符串赋值给变量v<br>2、 keyboard命令<br>是调用键盘命令。当用户输入return并按enter键后，控制权交还给M文件。<br>3、 menu命令<br>生成一个菜单供用户选择输入<br>k = menu(‘mtitle’,’opt1’,’opt2’,…..,’optn’)<h2 id="子函数与私有函数"><a href="#子函数与私有函数" class="headerlink" title="子函数与私有函数"></a>子函数与私有函数</h2><h3 id="子函数"><a href="#子函数" class="headerlink" title="子函数"></a>子函数</h3>在函数文件中定义的函数作为主函数，而在函数体内定义的其他函数均被视作子函数。子函数只能为主函数或同一主函数下其他的子函数所调用。<h3 id="私有函数"><a href="#私有函数" class="headerlink" title="私有函数"></a>私有函数</h3>MATLAB语言中把放置在目录private下的函数称为私有函数，这些函数只有private目录的父目录中的函数才能调用，其他目录的函数不能调用</li></ul><h3 id="子函数与私有函数的区别"><a href="#子函数与私有函数的区别" class="headerlink" title="子函数与私有函数的区别"></a>子函数与私有函数的区别</h3><p>1、 私有函数在可用的范围上大于子函数<br>2、 在函数编辑上的结构上，私有函数与一般的函数文件的编辑相同，而子函数则只能在主函数文件中编辑。<br>3、 当在MATLAB的M文件中调用函数时，首先检测该函数是否为此文件加下的子函数，若否，则检测是否为可用的私有函数，任然否，检测该函数是否为MATLAB搜索路径上的其他M文件。</p><h2 id="程序设计的优化"><a href="#程序设计的优化" class="headerlink" title="程序设计的优化"></a>程序设计的优化</h2><p>虽然在MATLAB语言中没有规定使用变量是必须先定义，但是对于未定义的变量，如果操作系统出现越界赋值时，系统将不得不对变量进行扩充，这样大大降低了程序的运行效率，对于可能出现变量的维度不断扩大的情况下，应当预先估计变量可能出现的最大维度，进行预定义。</p>]]></content>
      <categories>
        <category>matlab学习</category>
      </categories>
      <tags>
        <tag>matlab基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly的动态可视化绘图01</title>
    <url>/2019/05/23/plotly%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE01/</url>
    <content><![CDATA[<h2 id="plotly安装"><a href="#plotly安装" class="headerlink" title="plotly安装"></a>plotly安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ploty</span><br><span class="line">pip install ploty --upgrade <span class="comment">#更新plotly</span></span><br></pre></td></tr></table></figure><ul><li>查看帮助<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import plotly </span><br><span class="line"><span class="built_in">help</span>(plotly.offline.plot)</span><br></pre></td></tr></table></figure></li></ul><h2 id="离线绘图函数"><a href="#离线绘图函数" class="headerlink" title="离线绘图函数"></a>离线绘图函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> Scatter, Layout, Data</span><br><span class="line"></span><br><span class="line">py.offline.init_notebook_mode()     <span class="comment">#该条语句是在Jupyter Notebook（此前被称为 IPython notebook）中绘图</span></span><br><span class="line">trace0 = Scatter(  <span class="comment">#确定坐标 x，y</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],</span><br><span class="line">    y = [<span class="number">10</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">17</span>]</span><br><span class="line">)</span><br><span class="line">trace1 = Scatter(</span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],</span><br><span class="line">    y = [<span class="number">16</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">9</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = Data([trace0, trace1])<span class="comment">#两条线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#py.offline.iplot(data, filename='first_offline_start') IPlot是在Notebook中绘图的函数</span></span><br><span class="line">py.offline.plot(data, filename=<span class="string">'first_offline_start'</span>)</span><br><span class="line"><span class="comment">#py.offline.plot(data, filename='first_offline_start',image='png')#保存画出的png图片</span></span><br></pre></td></tr></table></figure><p>参数解释：<br>def plot(figure_or_data, show_link=False, link_text=’Export to plot.ly’,<br>validate=True, output_type=’file’, include_plotlyjs=True,<br>filename=’temp-plot.html’, auto_open=True, image=None,<br>image_filename=’plot_image’, image_width=800, image_height=600,<br>config=None, include_mathjax=False, auto_play=True,<br>animation_opts=None):<br>py.plot是绘制图形的主函数，主要参数如下：<br>figure_or_data：绘图的数据<br>show_link:默认为False，显示右下角的链接<br>link_text:右下角显示的文字，默认为Export to plotly.ly<br>validate:确保所有关键字是有效的。但是当需要额外、非必须的关键字或plo.js版本比graph_reference.json版本旧时，会忽略这部分内容。<br>filename：设置绘图结果的存储路径。<br>image_filename：保存绘制的图片(.png ) 格式</p><h3 id="模块解释"><a href="#模块解释" class="headerlink" title="模块解释"></a>模块解释</h3><p>plotly模块库里的graph_obj（图像对象）子模块的Scatter（数据布局）对象定义，跟函数和对象一样是字典格式。<br>Data函数，把代表两条曲线的变量定义为一组图形数据，一列表的格式[]。</p><h2 id="基本绘图流程"><a href="#基本绘图流程" class="headerlink" title="基本绘图流程"></a>基本绘图流程</h2><ul><li>添加图规数据（add_trace）,使用的是Scatter等函数命令</li><li>设置画面布局，使用layout命令</li><li>集成图形，布局数据，命令有Data，Figure。</li><li>绘制图形的输出，命令是offline.plot,自定义的短命令是pyplt。</li></ul>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly模块开始</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly和Pandas的cufflinks封装</title>
    <url>/2019/06/02/plotly%E5%92%8CPandas%E7%9A%84cufflinks%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装cufflinks"><a href="#安装cufflinks" class="headerlink" title="安装cufflinks"></a>安装cufflinks</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install categories</span><br></pre></td></tr></table></figure><p>cufflinks目前对Pandas的支持仅局限在Jupyter Notebook中，所以要打开Jupiter Notebook运行这些文件。<br>cufflinks是一个简单易用的模块：<br>（1） 获取cufflinks的源代码，<a href="https://gitub.com/santosjorge/cufflinks" target="_blank" rel="noopener">https://gitub.com/santosjorge/cufflinks</a><br>(2) cufflinks更多的案例，在网页中选择Chart Gallery链接。也可以下载文件cufflinks Tutorial - Chart Gallery.ipynb<br>(3) 要获取cufflinks高级的案例代码，Pandas Like Visualization 链接,也可以下载文件cufflinks Tutorial - Pandas Like.ipynb</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.2 快速入门</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.set_index(<span class="string">'x'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>, filename=<span class="string">'tmp/cf_line.html'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.3 快速获取数据</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, theme=<span class="string">'polar'</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter() <span class="comment"># 生成散点图数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>, mode=<span class="string">'markers'</span>, x=<span class="string">'x'</span>, y=<span class="string">'y'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.4 自定义绘图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = cf.datagen.lines(n_traces=<span class="number">3</span>,columns=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]) <span class="comment"># 生成一个3列的DataFrame（默认5列）。</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'black'</span>] <span class="comment"># 自定义每条线的颜色</span></span><br><span class="line">dashes = [<span class="string">'solid'</span>, <span class="string">'dash'</span>, <span class="string">'dashdot'</span>] <span class="comment"># 自定义每条线的Style</span></span><br><span class="line">widths = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment"># 自定义每条线的宽度</span></span><br><span class="line"></span><br><span class="line">plot_url = df.iplot(kind=<span class="string">'scatter'</span>, mode=<span class="string">'lines'</span>, colors=colors, dash=dashes,width=widths,xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'数量'</span>,title=<span class="string">'自定义绘图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.5 常见经典图形</span></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 1） 柱状图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line">df = cf.datagen.bars()</span><br><span class="line">df.iplot(kind=<span class="string">'bar'</span>, filename=<span class="string">r'tmp/cf_bar.html'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 2）柱状图（堆积）</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line">df = cf.datagen.bars(n_categories=<span class="number">4</span>,columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'bar'</span>, barmode=<span class="string">'stack'</span>, filename=<span class="string">'cufflinks/stacked-bar-chart'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 3)散点图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line">df = cf.datagen.lines(<span class="number">2</span>, columns=[<span class="string">'中信证券'</span>,<span class="string">'招商证券'</span>])</span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>,mode=<span class="string">'markers'</span>,size=<span class="number">10</span>,symbol=<span class="string">'x'</span>,colorscale=<span class="string">'paired'</span>,</span><br><span class="line">                          xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'每股盈利增长率'</span>,title=<span class="string">'散点图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 4)价差图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line">df= cf.datagen.lines(<span class="number">2</span>,columns=[<span class="string">'万科A'</span>,<span class="string">'中粮地产'</span>])</span><br><span class="line">df.iplot(kind=<span class="string">'spread'</span>,xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'收益率'</span>,title=<span class="string">'价差图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 5）直方图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df= cf.datagen.histogram(<span class="number">2</span>)</span><br><span class="line">df.iplot(kind=<span class="string">'histogram'</span>,opacity=<span class="number">.75</span>,title=<span class="string">'直方图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 6) 时间序列子图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">'pearl'</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.lines(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(subplots=<span class="literal">True</span>, shape=(<span class="number">4</span>,<span class="number">1</span>), shared_xaxes=<span class="literal">True</span>, fill=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 7) 3D散点图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter3d(<span class="number">2</span>,<span class="number">150</span>)</span><br><span class="line">df.iplot(kind=<span class="string">'scatter3d'</span>,x=<span class="string">'x'</span>,y=<span class="string">'y'</span>,z=<span class="string">'z'</span>,size=<span class="number">15</span>,categories=<span class="string">'categories'</span>,text=<span class="string">'text'</span>,</span><br><span class="line">                             title=<span class="string">'3D散点图'</span>,colors=[<span class="string">'blue'</span>,<span class="string">'pink'</span>],width=<span class="number">0.5</span>,margin=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">                             opacity=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">df.iplot?</span><br><span class="line"><span class="comment">#%%</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>cufflinks模块</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly与Pandas</title>
    <url>/2019/06/02/plotly%E4%B8%8EPandas/</url>
    <content><![CDATA[<h2 id="基本线形图"><a href="#基本线形图" class="headerlink" title="基本线形图"></a>基本线形图</h2><p>Plotly可以识别Pandas数据格式，所以数据是Pandas的DataFrame或Series结构，可以直接传递给Plotly，不用转换为list数据格式<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Scatter(</span><br><span class="line">        x=df[<span class="string">'x'</span>], <span class="comment"># x可以是 DataFrame 的某一列</span></span><br><span class="line">        y=df[<span class="string">'y'</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data, filename=<span class="string">'tmp/basic_line.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="基本散点图"><a href="#基本散点图" class="headerlink" title="基本散点图"></a>基本散点图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df_50 = pd.read_csv(<span class="string">r'dat/000016.csv'</span>, index_col=[<span class="string">'date'</span>]) <span class="comment"># 读取数据</span></span><br><span class="line">df_50.sort_index(inplace=<span class="literal">True</span>) <span class="comment"># 排序</span></span><br><span class="line">df_50 = df_50.loc[<span class="string">'2017-01-03'</span>:,:]</span><br><span class="line">df_300 = pd.read_csv(<span class="string">r'dat/000300.csv'</span>, index_col=[<span class="string">'date'</span>])</span><br><span class="line">df_300.sort_index(inplace=<span class="literal">True</span>) <span class="comment"># 排序</span></span><br><span class="line">df_300 = df_300.loc[<span class="string">'2017-01-01'</span>:]</span><br><span class="line"></span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'x'</span>: df_50.index,</span><br><span class="line">            <span class="string">'y'</span>: df_50.volume,</span><br><span class="line">            <span class="string">'mode'</span>: <span class="string">'markers'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'上证50'</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'x'</span>: df_300.index,</span><br><span class="line">            <span class="string">'y'</span>: df_300.volume,</span><br><span class="line">            <span class="string">'mode'</span>: <span class="string">'markers'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'沪深300'</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'layout'</span>: &#123;</span><br><span class="line">        <span class="string">'xaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'时间'</span>,</span><br><span class="line">                  <span class="comment"># 'type': 'log',</span></span><br><span class="line">                  &#125;,</span><br><span class="line">        <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">"成交量"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = pyplt(fig, filename=<span class="string">'tmp/basic_scatter.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="基本柱状图"><a href="#基本柱状图" class="headerlink" title="基本柱状图"></a>基本柱状图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">N = <span class="number">40</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Bar(</span><br><span class="line">        x=df[<span class="string">'x'</span>], <span class="comment"># x可以是 DataFrame 的某一列</span></span><br><span class="line">        y=df[<span class="string">'y'</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data, filename=<span class="string">r'tmp/basic_bar.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Pandas基本图形</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly的动态可视化绘图02</title>
    <url>/2019/05/24/plotly%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE02/</url>
    <content><![CDATA[<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>plotly没有独立的线形图函数，而是把线形图与散点图全部用Scatter函数实现。</p><p>散点图和线图的混合<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------code</span></span><br><span class="line"><span class="comment"># Create random data with numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line">random_x =  np.linspace(<span class="number">0</span>,<span class="number">1</span>,N)</span><br><span class="line">random_y0 = np.random.randn(N) + <span class="number">5</span></span><br><span class="line">random_y1 = np.random.randn(N)</span><br><span class="line">random_y2 = np.random.randn(N) - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create traces</span></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = random_x,</span><br><span class="line">    y = random_y0,</span><br><span class="line">    mode = <span class="string">'markers'</span>,       <span class="comment">#纯散点图的绘制</span></span><br><span class="line">    name = <span class="string">'markers'</span>        <span class="comment">#曲线名称</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=random_x,</span><br><span class="line">    y=random_y1,</span><br><span class="line">    mode=<span class="string">'lines+markers'</span>,  <span class="comment"># 散点+线 图的绘制</span></span><br><span class="line">    name=<span class="string">'lines+markers'</span>  <span class="comment"># 曲线名称</span></span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=random_x,</span><br><span class="line">    y=random_y2,</span><br><span class="line">    mode=<span class="string">'lines'</span>,  <span class="comment"># 线 图的绘制</span></span><br><span class="line">    name=<span class="string">'lines'</span>  <span class="comment"># 曲线名称</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0, trace1,trace2]</span><br><span class="line">pyplt(data,filename=<span class="string">'scatter_basic_demo.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>markers、lines、lines+markers三个图形的输出格式不同，是因为Scatter函数中的mode参数不同，</p><p>样式的设置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------code</span></span><br><span class="line"><span class="comment"># Create random data with numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line"></span><br><span class="line">random_y0 = np.random.randn(N) + <span class="number">5</span></span><br><span class="line">random_y1 = np.random.randn(N)</span><br><span class="line">random_y2 = np.random.randn(N) - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create traces</span></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=np.random.randn(N),</span><br><span class="line">    y=np.random.randn(N)+<span class="number">2</span>,</span><br><span class="line">    mode=<span class="string">'markers+lines'</span>,  <span class="comment"># 纯散点图的绘制</span></span><br><span class="line">    name=<span class="string">'above'</span>,  <span class="comment"># 曲线名称</span></span><br><span class="line">    marker = dict(</span><br><span class="line">        size = <span class="number">10</span>,<span class="comment">#设置点的宽度</span></span><br><span class="line">        color = <span class="string">'rgba(152, 0, 0, .8)'</span>,<span class="comment">#设置点的颜色</span></span><br><span class="line">        line = dict(</span><br><span class="line">            width = <span class="number">2</span>, <span class="comment">#设置线条的宽度</span></span><br><span class="line">            color = <span class="string">'rgb(0, 0, 0)'</span> <span class="comment">#设置线条的颜色</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=np.random.randn(N),</span><br><span class="line">    y=np.random.randn(N) - <span class="number">2</span>,</span><br><span class="line">    mode=<span class="string">'markers'</span>,  <span class="comment"># 散点+线 图的绘制</span></span><br><span class="line">    name=<span class="string">'Below'</span>,  <span class="comment"># 曲线名称</span></span><br><span class="line">    marker = dict(</span><br><span class="line">        size = <span class="number">10</span>,<span class="comment">#设置点的宽度</span></span><br><span class="line">        color = <span class="string">'rgba(255, 182, 193, .9)'</span>,<span class="comment">#设置点的颜色</span></span><br><span class="line">        line = dict(</span><br><span class="line">            width = <span class="number">2</span>, <span class="comment">#设置线条的宽度</span></span><br><span class="line">            </span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [trace0, trace1]</span><br><span class="line"></span><br><span class="line">layout = dict(</span><br><span class="line">    title = <span class="string">'Styled Scatter'</span>,</span><br><span class="line">    yaxis = dict(zeroline = <span class="literal">True</span>),</span><br><span class="line">    xaxis = dict(zeroline = <span class="literal">False</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = dict(data=data, layout = layout)</span><br><span class="line">pyplt(fig, filename=<span class="string">'scatter_basic_demo.html'</span>)</span><br></pre></td></tr></table></figure><p>使用Scatter函数可以绘制线形图与散点图，主要参数如下;</p><ul><li>connectgaps:布尔变量，用于连接缺失数据</li><li>dx、dy:x、y坐标的步进值，默认值是1<br>= error_x,error_y:x,y出错信息</li><li>fillcolor：填充模式</li><li>hoverfinfo：当用户与图形互动时，鼠标指针显示的参数，包括x，y，z坐标数据，<br>以及text（文字信息），name（图形名称）等参数的组合，可使用+，all，none和skip（忽略）作为组合连接符号，默认是all（全部消失）</li><li>hoveron：当用户与图形互动时，鼠标指针显示的模式，包括points（点图），fills（填充图）和points+fills三种模式</li><li>ids：在动画图表中数据点和图形key键的列表参数。</li><li>legendgroup：图例参数，默认是空字符串</li><li>line：线条参数，包括大小，颜色，格式等</li><li>marker：数据节点参数，包括大小，颜色，格式等</li><li>mode ： 图形格式，包括lines，marker，text，使用+或none等符号进行模式组合</li><li>name：名称参数</li><li>opacity：透明度参数，范围是0~1</li><li>rsrc，xsrc，ysrc，tsrc，idssrc，textsrc，textpositionsrc：字符串源数列表</li><li>r、t：仅用与极坐标图，r用于设置径向坐标（半径），t用于设置角坐标</li><li>showlegend：布尔变量，用于切换图标显示</li><li>stream：数据流，用于实时显示数据图表</li><li>textfont：文本字体参数，包括字体名称，颜色，大小等</li><li>textposition：“文本”元素的位置参数，包括top left（）</li><li>text:文本数据</li><li>type：数据显示模式 constant，percent，sqrt，array（数组）</li><li>x0,y0:坐标起点坐标</li><li>xaxis，yaxis：x，y坐标参数</li><li>xcalendar，ycalender：坐标时间参数的格式，默认是公历。</li><li>x，y：设置坐标x，y轴的坐标数据</li></ul>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly基础图形</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly的动态可视化绘图04</title>
    <url>/2019/05/26/plotly%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE04/</url>
    <content><![CDATA[<h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>示例代码：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment">#Trace</span></span><br><span class="line">trace_basic = [go.Bar(</span><br><span class="line">                x = [<span class="string">'Variable_1'</span>,<span class="string">'Variable_2'</span>,<span class="string">'Variable_3'</span>,<span class="string">'Variable_4'</span>,<span class="string">'Variable_5'</span>],</span><br><span class="line">                y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">)]<span class="comment">#画柱状图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Layout</span></span><br><span class="line">layout_basic = go.Layout(</span><br><span class="line">    title = <span class="string">'The Graph Title'</span>,</span><br><span class="line">    xaxis = go.XAxis(range = [<span class="number">-0.5</span>,<span class="number">4.5</span>], domain = [<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">)</span><br><span class="line"><span class="comment">#Figure</span></span><br><span class="line">figure_basic = go.Figure(data = trace_basic, layout = layout_basic)</span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">pyplt(figure_basic,filename=<span class="string">'Basic_BarChart.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>代码go.Bar是画柱状图的函数，x是柱状图的名称，y是柱状图的值，layout是布局，range = [-0.5,4.5]代表y值的大小，大于-0.5，小于5；domain默认为[0,1]</p><h3 id="柱状簇"><a href="#柱状簇" class="headerlink" title="柱状簇"></a>柱状簇</h3><p>将多个同类型的柱状图的数据叠加在一起即为柱状簇。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment">#Trace</span></span><br><span class="line">trace0 = go.Bar(</span><br><span class="line">                x = [<span class="string">"上海物贸"</span>,<span class="string">"广东明珠"</span>,<span class="string">"五矿发展"</span>],</span><br><span class="line">                y = [<span class="number">4.12</span>, <span class="number">5.32</span>, <span class="number">0.60</span>],</span><br><span class="line">                name = <span class="string">"201609"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace1 = go.Bar(</span><br><span class="line">                x = [<span class="string">"上海物贸"</span>,<span class="string">"广东明珠"</span>,<span class="string">"五矿发展"</span>],</span><br><span class="line">                y = [<span class="number">3.65</span>, <span class="number">6.14</span>, <span class="number">0.58</span>],</span><br><span class="line">                name = <span class="string">"201612"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace2 = go.Bar(</span><br><span class="line">                x = [<span class="string">"上海物贸"</span>,<span class="string">"广东明珠"</span>,<span class="string">"五矿发展"</span>],</span><br><span class="line">                y = [<span class="number">2.15</span>, <span class="number">1.35</span>, <span class="number">0.19</span>],</span><br><span class="line">                name = <span class="string">"201703"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace = [trace0,trace1,trace2]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Layout</span></span><br><span class="line">layout_basic = go.Layout(</span><br><span class="line">    title = <span class="string">'国际贸易板块净资产收益率对比'</span>,</span><br><span class="line">    <span class="comment">#xaxis = go.XAxis(range = [-0.5,5])</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">#Figure</span></span><br><span class="line">figure_basic = go.Figure(data = trace, layout = layout_basic)</span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">pyplt(figure_basic,filename=<span class="string">'Basic_BarChart.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="瀑布式柱状图"><a href="#瀑布式柱状图" class="headerlink" title="瀑布式柱状图"></a>瀑布式柱状图</h3><p><img src="https://i.imgur.com/g3VAMEG.jpg" alt="效果图"></p><p>悬浮的式效果<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">x_data = [<span class="string">'流动负债'</span>,<span class="string">'非流动负债'</span>,<span class="string">'负债'</span>,<span class="string">'所有者权益'</span>,<span class="string">'总资产'</span>]</span><br><span class="line">y_data = [<span class="number">56000000</span>, <span class="number">65000000</span>,<span class="number">65000000</span>,<span class="number">81000000</span>,<span class="number">81000000</span>]</span><br><span class="line">text = [<span class="string">'57,999,848万元'</span>,<span class="string">'8,899,916万元'</span>,<span class="string">'66,899,764万元'</span>,<span class="string">'16,167,657万元'</span>,<span class="string">'83,067,421万元'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Base</span></span><br><span class="line">trace0 = go.Bar(</span><br><span class="line">    x = x_data,</span><br><span class="line">    y = [<span class="number">0</span>,<span class="number">57999848</span>,<span class="number">0</span>,<span class="number">66899764</span>,<span class="number">0</span>],</span><br><span class="line">    marker = dict(</span><br><span class="line">        color = <span class="string">'rgb(255,255,255)'</span>,</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Trace</span></span><br><span class="line">trace1 = go.Bar(</span><br><span class="line">    x=x_data,</span><br><span class="line">    y=[<span class="number">57999848</span>, <span class="number">889916</span>, <span class="number">66899764</span>, <span class="number">16167657</span>, <span class="number">83067421</span>],</span><br><span class="line">    marker=dict(</span><br><span class="line">        color=<span class="string">'rgb(55,128,191,0.7)'</span>,</span><br><span class="line">        line = dict(</span><br><span class="line">            color = <span class="string">'rgba(55,128,191,1.0)'</span>,</span><br><span class="line">            width = <span class="number">2</span>,</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0,trace1]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">'万科A资产负债结构图'</span>,</span><br><span class="line">    barmode = <span class="string">'stack'</span>,</span><br><span class="line">    showlegend = <span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">annotations = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    annotations.append(dict(x = x_data[i], y = y_data[i],text=text[i], font=dict(family=<span class="string">'Arial'</span>, size = <span class="number">14</span>,</span><br><span class="line">                                                                       color = <span class="string">'rgb(245,246,249,1)'</span>),</span><br><span class="line">                                                                       showarrow = <span class="literal">False</span>))</span><br><span class="line">    layout[<span class="string">'annotations'</span>] = annotations</span><br><span class="line"></span><br><span class="line"><span class="comment">#Figure</span></span><br><span class="line">figure_basic = go.Figure(data = data, layout = layout)</span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">pyplt(figure_basic,filename=<span class="string">'Basic_BarChart.html'</span>,image=<span class="string">'png'</span>)</span><br></pre></td></tr></table></figure><p></p><p>trace0 中的y，表示第1,3,5根柱状图从0开始显示，第二根从57999848开始显示，第4根从66899764开始显示，将trace0所示的柱形设置为白色rgb(255,255,255)</p><h3 id="图形样式设置"><a href="#图形样式设置" class="headerlink" title="图形样式设置"></a>图形样式设置</h3><p>样式的设置主要是marker变量的设置。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">marker = dict(</span><br><span class="line">    color = [<span class="string">'rgb....'</span>,<span class="string">'rgb...'</span>]</span><br><span class="line">    line = dict(</span><br><span class="line">          color = <span class="string">'rgb...'</span>,</span><br><span class="line">          width = <span class="number">2</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="水平条图形"><a href="#水平条图形" class="headerlink" title="水平条图形"></a>水平条图形</h2><p>水平条与柱状图类似，只需要在Bar函数中设置orientation=‘h’，x，y的数据交换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">go.Bar(</span><br><span class="line">    x = [<span class="number">29.4</span>, <span class="number">34.62</span>, <span class="number">30.16</span>],</span><br><span class="line">    y = [<span class="string">'万科'</span>,<span class="string">'国农'</span>,<span class="string">'世纪'</span>]，</span><br><span class="line">    orientation = <span class="string">'h'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly基础图形</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly的动态可视化绘图05</title>
    <url>/2019/05/27/plotly%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE05/</url>
    <content><![CDATA[<h2 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h2><p>面积图就是在曲线的下方有所填充。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">s1 = np.random.RandomState(<span class="number">8</span>) <span class="comment">#定义局部种子</span></span><br><span class="line">s2 = np.random.RandomState(<span class="number">9</span>) <span class="comment">#定义局部</span></span><br><span class="line"></span><br><span class="line">rd1 = s1.rand(<span class="number">100</span>)/<span class="number">10</span> - <span class="number">0.02</span></span><br><span class="line">rd2 = s1.rand(<span class="number">100</span>)/<span class="number">10</span> <span class="number">-0.002</span></span><br><span class="line"></span><br><span class="line">initial1 = <span class="number">100000</span></span><br><span class="line">initial2 = <span class="number">100000</span></span><br><span class="line"></span><br><span class="line">total1 = []</span><br><span class="line">total2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rd1)):</span><br><span class="line">    initial1 = initial1*rd1[i] +initial1</span><br><span class="line">    initial2 = initial2*rd2[i] + initial2</span><br><span class="line">    total1.append(initial1)</span><br><span class="line">    total2.append(initial2)</span><br><span class="line">    </span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    y = total1,</span><br><span class="line">    fill = <span class="literal">None</span>,</span><br><span class="line">    mode = <span class="string">'lines'</span>, <span class="comment">#none 无边界线</span></span><br><span class="line">    name = <span class="string">"策略1"</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    y = total2,</span><br><span class="line">    fill = <span class="string">'tonexty'</span>,</span><br><span class="line">    mode = <span class="string">'lines'</span>, <span class="comment">#none 无边界线</span></span><br><span class="line">    name = <span class="string">"策略2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace1, trace2]</span><br><span class="line">layout = dict(</span><br><span class="line">    title = <span class="string">'策略净值曲线'</span>,</span><br><span class="line">    xaxis = dict(title = <span class="string">'交易天数'</span>),</span><br><span class="line">    yaxis = dict(title = <span class="string">'净值'</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = dict(data = data, layout =layout)</span><br><span class="line">pyplt(fig,filename=<span class="string">'basic_areal.html'</span>)</span><br></pre></td></tr></table></figure><p>主要参数：fill，第一条线没有填充，None，第二条线的填充为tonexty.</p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>用plotly绘制直方图用到graph_objs包中的Histogram函数。将数据赋值给函数中的变量x，即x=data，就可绘制直方图，若将数据赋值给y，则绘制水平直方图。histnorm是Histogram函数的<br>另一个属性。用Numpy生成随机数。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">s1 = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">x = s1.randn(<span class="number">1000</span>)</span><br><span class="line">data = [go.Histogram(</span><br><span class="line">    x=x,</span><br><span class="line">    histnorm = <span class="string">'probability'</span></span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt(data,filename=<span class="string">"basic_histogrm.html"</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="重叠直方图"><a href="#重叠直方图" class="headerlink" title="重叠直方图"></a>重叠直方图</h3><p>将layout中设置barmode属性，将其改为‘overlay’,<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layout = go.Layout(barmode = <span class="string">'overlay'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="层叠直方图"><a href="#层叠直方图" class="headerlink" title="层叠直方图"></a>层叠直方图</h3><pre><code>将layout中设置barmode属性，将其改为‘stack’,
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layout = go.Layout(barmode = <span class="string">'stack'</span>)</span><br></pre></td></tr></table></figure><h3 id="累计直方图"><a href="#累计直方图" class="headerlink" title="累计直方图"></a>累计直方图</h3><p>累计直方图是直方图的累积形式，即第n+1个区间的展示数目是第N-1个区间的展示数目与第n个区间中实际样本数目之和，<br>通过设置Histogram函数中的cumulative属性实现，即cumulative = dict(enable = True)<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trace1 = [go.Histogram(</span><br><span class="line">    x = x1</span><br><span class="line">    cumulative = dict(enable=<span class="literal">True</span>)</span><br><span class="line">    )]</span><br></pre></td></tr></table></figure><p></p><h4 id="直方图参数解读"><a href="#直方图参数解读" class="headerlink" title="直方图参数解读"></a>直方图参数解读</h4><ul><li>histnorm:设置纵坐标显示格式，可选的参数有“”，percent，probability，density</li><li>histfunc：指定分组函数，可选的参数有count，sum，avg，min，max</li><li>orientation：设置图形放向，有v和h两个参数，v表示垂直，h表示水平</li><li>cumulative：累计直方图参数，有enableed，directio和currentbin三个关键字。</li><li>autobinx：布尔型，是否自动划分区间</li><li>nbinsx：整形，最大显示区间数目</li><li>xbins：设置划分区间属性</li></ul><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>Pie函数可绘制饼图<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">'股票'</span>,<span class="string">'债券'</span>,<span class="string">'现金'</span>,<span class="string">'衍生品'</span>,<span class="string">'其他'</span>]</span><br><span class="line">values = [<span class="number">33.7</span>, <span class="number">20.33</span>, <span class="number">9.9</span>, <span class="number">8.6</span>, <span class="number">27.47</span>]</span><br><span class="line"></span><br><span class="line">trace = [go.Pie(labels = labels,</span><br><span class="line">                values=values)  ]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">'基金资产配置比例图'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = trace, layout = layout)</span><br><span class="line">pyplt(fig,filename=<span class="string">'basic_pie_chart.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="环形饼图"><a href="#环形饼图" class="headerlink" title="环形饼图"></a>环形饼图</h2><p>绘制环形饼图，只需要在Pie函数中设置控制环形中心空白大小的hole属性即可实现。Pie函数中的hoverinfo属性用于控制当用户将鼠标指针放到环形<br>图上显示的内容，设置为“label+percent”表示显示标签加数据所占的比例。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trace = go.Pie(</span><br><span class="line">    labels = labels,</span><br><span class="line">    values = values,</span><br><span class="line">    hole = <span class="number">0.7</span>,</span><br><span class="line">    hoverinfo = <span class="string">"label+percent"</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly基础图形</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly网页开发01</title>
    <url>/2019/06/03/plotly%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%9101/</url>
    <content><![CDATA[<h1 id="plotly在Django中的应用"><a href="#plotly在Django中的应用" class="headerlink" title="plotly在Django中的应用"></a>plotly在Django中的应用</h1><p>Django是用Python语言开发的一个免费开源的web框架，用于快速搭建高性能、优雅的网站，通过Django可以建立一个高性能web应用花费的时间和精力少。</p><h2 id="安装环境搭建"><a href="#安装环境搭建" class="headerlink" title="安装环境搭建"></a>安装环境搭建</h2><p>安装命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>测试：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试命令</span></span><br><span class="line">django-admin startproject plotly_and_django</span><br><span class="line"><span class="comment">#执行命令后</span></span><br><span class="line">plotly_and_django/</span><br><span class="line">    manage.py</span><br><span class="line">    plotly_and_django/</span><br><span class="line">    settings.py</span><br><span class="line">    urls.py</span><br><span class="line">    wsgi.py</span><br></pre></td></tr></table></figure><p></p><p>这些文件的具体含义如下：<br>(1)、 manage.py:这是项目交互的命令行实用程序，是django-admi.py工具周围的包装，不需要编辑此文件<br>(2)、 plotly_and_django/：用户的项目文件夹，包含以下文件</p><ul><li><strong>init</strong>.py :一个空的文件，用来告诉Python把这个文件当作Python的包对待</li><li>settings.py: 用于调整项目的设置和参数</li><li>urls.py : 用来存储项目中的URL，Django会通过正则表达式来匹配URL</li><li>wsgi.py: 里面包含了通过WSGI方式运行Django项目的一系列参数</li></ul><p>测试服务器：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>purchase memory</title>
    <url>/2018/10/14/purchase-memory/</url>
    <content><![CDATA[<h2 id="选购内存"><a href="#选购内存" class="headerlink" title="选购内存"></a>选购内存</h2><ol><li>内存的分类<br>第一种是DRAM(动态内存),此内存集成度高，功耗和成本低，是目前主流产品，<br>第二种是SRAM（静态内存），广泛用于工作站，高档电脑、大型机和巨型机种的Cache（缓存）</li><li>内存选择<br>（1） DDR SDRAM内存<br>双倍数据速率同步内存，DDR2内存即第二代同步双倍速率动态随机存取存储器。<br>DDR2内存可进行4bit预读取，DDR3可进行8bit，DDR4 16bit预取机制，是DDR3的两倍。<br>（2）选择容量<br>1）用来上网、学习、游戏、办公、炒股、文字处理、配置8GB内存总体够用。<br>2）用来刻录、视频影像处理，8GB够用，16GB好用<br>3）用来编程16GB内存较好<br>4）用来二维或者三维图形图像设计，配置8GB内存勉强用，16GB够用，32GB内存好用。<br>5）用来设计、密集数据采集运算、虚拟现实等，配置16GB内存勉强，32GB够用<br>6）用来作web服务器，配置8GB内存勉强，32GB内存够用。<br>售后也很重要。</li><li>内存的速率<br>目前主流内存的速率小于1.5ns</li><li>“打磨”内存<br>正品的芯片表面一般都有质感，要么有光泽或荧光感，要么就是亚光。如果芯片的表面色泽不存<br>甚至比较粗糙、发毛，芯片必然受到了打磨。<h2 id="内存的生产商"><a href="#内存的生产商" class="headerlink" title="内存的生产商"></a>内存的生产商</h2>1、 金士顿（Kingston）<br>2、 金邦（GEIL）<br>3、 宇瞻（Apacer）<br>4、 胜创（KINGMAX）<h3 id="相关参数的识别"><a href="#相关参数的识别" class="headerlink" title="相关参数的识别"></a>相关参数的识别</h3><img src="https://i.imgur.com/R1QRqPp.jpg" alt="金士顿DDR3内存编号含义“KVR133D3N9/2G”"><br><img src="https://i.imgur.com/DlolEt7.jpg" alt="图2"><br><img src="https://i.imgur.com/omeM34u.jpg" alt="图3"></li></ol>]]></content>
      <categories>
        <category>电脑硬件选购</category>
      </categories>
      <tags>
        <tag>电脑内存</tag>
      </tags>
  </entry>
  <entry>
    <title>purchase hard-disk</title>
    <url>/2018/10/14/purchase-hard-disk/</url>
    <content><![CDATA[<h2 id="选购硬盘"><a href="#选购硬盘" class="headerlink" title="选购硬盘"></a>选购硬盘</h2><p>1、 硬盘的认识<br>硬盘的内部包括磁盘、读写磁头、精密的电动机和线路等。硬盘转速有3600r/min、4500r/min、<br>5400r/min、7200r/min及10000r/min.<br>2、 硬盘的选购指标<br>容量、转速、换成、传输率、接口、单碟容量等。尽量购买保质时间长的硬盘。注意硬盘的生产日期。<br>如果发现后面有个”R“字母，这块硬盘是返修的，或者有“refurbished”的字样，也说明硬盘是返修的。<br>3、 硬盘接口<br>主流用的是SATA接口标准为SATA 3.0规格，它的传输输速率可达到6Gbit/s，因此，选择要注意硬盘的接口。</p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><pre><code>是采用固态电子存储芯片阵列而制成的硬盘，它由控制单元和存储单元组成。固态硬盘在接口、功能和使用方法上与普通硬盘相同。
</code></pre><h2 id="主流硬盘"><a href="#主流硬盘" class="headerlink" title="主流硬盘"></a>主流硬盘</h2><p>1、希捷<br>2、西部数据<br>3、日立<br>4、三星</p><h3 id="硬盘相关参数的识别"><a href="#硬盘相关参数的识别" class="headerlink" title="硬盘相关参数的识别"></a>硬盘相关参数的识别</h3><p><img src="https://i.imgur.com/kf6fHc4.jpg" alt="希捷硬盘编号"><br><img src="https://i.imgur.com/jlWwR5o.jpg" alt="西部数据硬盘编号"></p>]]></content>
      <categories>
        <category>电脑硬件选购</category>
      </categories>
      <tags>
        <tag>电脑硬盘</tag>
      </tags>
  </entry>
  <entry>
    <title>ploty高级图形03</title>
    <url>/2019/05/31/ploty%E9%AB%98%E7%BA%A7%E5%9B%BE%E5%BD%A203/</url>
    <content><![CDATA[<h2 id="3-7-绘制SVG-可伸缩矢量图"><a href="#3-7-绘制SVG-可伸缩矢量图" class="headerlink" title="3.7 绘制SVG(可伸缩矢量图)"></a>3.7 绘制SVG(可伸缩矢量图)</h2><h3 id="矩形图的绘制"><a href="#矩形图的绘制" class="headerlink" title="矩形图的绘制"></a>矩形图的绘制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1.5</span>, <span class="number">4</span>,<span class="number">1.5</span>,<span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">3.75</span>, <span class="number">3.75</span>,<span class="number">2.2</span>,<span class="number">2.2</span>],</span><br><span class="line">    text=[<span class="string">'矩形'</span>, <span class="string">'矩形（填充）'</span>,<span class="string">'矩形（相对于plot+填充）'</span>,<span class="string">'矩形（相对于轴+填充）'</span>],</span><br><span class="line">    mode=<span class="string">'text'</span>,</span><br><span class="line">)</span><br><span class="line">data = [trace0]</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">8</span>],</span><br><span class="line">        <span class="string">'showgrid'</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">6.5</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        <span class="comment"># 普通的矩形</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgba(128, 0, 128, 1)'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 填充颜色的矩形</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgba(128, 0, 128, 1)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">2</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'rgba(128, 0, 128, 0.7)'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 相对于plot的矩形 + 填充颜色</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">0.125</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">0.25</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">0.3</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(50, 171, 96)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'rgba(50, 171, 96, 0.6)'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 相对于轴的矩形 + 填充颜色</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(55, 128, 191)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'rgba(55, 128, 191, 0.6)'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: data,</span><br><span class="line">    <span class="string">'layout'</span>: layout,</span><br><span class="line">&#125;</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/SVG_rectangle.html'</span>)</span><br></pre></td></tr></table></figure><ul><li>参数type。参数值可以是circle(圆)、rect（矩形）、path（路径）、line（线），默认是line。本例使用的是rect</li><li>fillcolor参数，设置填充的颜色，默认是rgba(0,0,0,0)(白色)<h3 id="矩形图应用：设置时间序列区域高亮显示"><a href="#矩形图应用：设置时间序列区域高亮显示" class="headerlink" title="矩形图应用：设置时间序列区域高亮显示"></a>矩形图应用：设置时间序列区域高亮显示</h3></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/day01.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>]) <span class="comment"># 读取数据。</span></span><br><span class="line">df.sort_index(inplace=<span class="literal">True</span>) <span class="comment"># 设置索引列从大到小排序</span></span><br><span class="line">df = df.iloc[<span class="number">-300</span>:<span class="number">-100</span>] <span class="comment"># 选取其中的200行数据</span></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(x=df.index, y=df[<span class="string">'close'</span>], mode=<span class="string">'lines'</span>, name=<span class="string">'temperature'</span>)</span><br><span class="line"></span><br><span class="line">data = [trace0]</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="comment"># 我们通过创建矩形的方式来高亮某一个时间区间</span></span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        <span class="comment"># 首先，我们高亮显示2月4日---&gt;3月6日.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="comment"># x参考系使用绝对坐标系（相对于轴）</span></span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="comment"># y参考系使用相对坐标系（相对于plot）</span></span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="string">'2015-02-04'</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="string">'2015-03-06'</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'#d3d3d3'</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 其次，我们高亮显示区间5月20日---&gt;6月22日.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'rect'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="string">'2015-05-20'</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="string">'2015-06-22'</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'#d3d3d3'</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fig = &#123;<span class="string">'data'</span>: data, <span class="string">'layout'</span>: layout&#125;</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/timestamp_highlight.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="圆形图的绘制"><a href="#圆形图的绘制" class="headerlink" title="圆形图的绘制"></a>圆形图的绘制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1.5</span>, <span class="number">3.5</span>],</span><br><span class="line">    y=[<span class="number">0.75</span>, <span class="number">2.5</span>],</span><br><span class="line">    text=[<span class="string">'无填充圆'</span>,</span><br><span class="line">          <span class="string">'有填充圆'</span>],</span><br><span class="line">    mode=<span class="string">'text'</span>,</span><br><span class="line">)</span><br><span class="line">data = [trace0]</span><br><span class="line"></span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">4.5</span>],</span><br><span class="line">        <span class="string">'zeroline'</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">4.5</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'width'</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="string">'height'</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        <span class="comment"># 无填充圆</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgba(50, 171, 96, 1)'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 有填充圆</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'rgba(50, 171, 96, 0.7)'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgba(50, 171, 96, 1)'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: data,</span><br><span class="line">    <span class="string">'layout'</span>: layout,</span><br><span class="line">&#125;</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/SVG_circle.html'</span>)</span><br></pre></td></tr></table></figure><p>注意：本例中设置了参数 ‘width’: 800, ‘height’: 800,如果参数hight != width,则按照我们自己的方式画出来的圆是一个椭圆，默认是 ‘width’: 450, ‘height’: 750</p><h3 id="圆形图应用：高亮显示散点图的聚集簇"><a href="#圆形图应用：高亮显示散点图的聚集簇" class="headerlink" title="圆形图应用：高亮显示散点图的聚集簇"></a>圆形图应用：高亮显示散点图的聚集簇</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x0 = np.random.normal(<span class="number">2</span>, <span class="number">0.45</span>, <span class="number">300</span>)</span><br><span class="line">y0 = np.random.normal(<span class="number">2</span>, <span class="number">0.45</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">x1 = np.random.normal(<span class="number">6</span>, <span class="number">0.4</span>, <span class="number">200</span>)</span><br><span class="line">y1 = np.random.normal(<span class="number">6</span>, <span class="number">0.4</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">x2 = np.random.normal(<span class="number">4</span>, <span class="number">0.3</span>, <span class="number">200</span>)</span><br><span class="line">y2 = np.random.normal(<span class="number">4</span>, <span class="number">0.3</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=x0,</span><br><span class="line">    y=y0,</span><br><span class="line">    mode=<span class="string">'markers'</span>,</span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=x1,</span><br><span class="line">    y=y1,</span><br><span class="line">    mode=<span class="string">'markers'</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=x2,</span><br><span class="line">    y=y2,</span><br><span class="line">    mode=<span class="string">'markers'</span></span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=x1,</span><br><span class="line">    y=y0,</span><br><span class="line">    mode=<span class="string">'markers'</span></span><br><span class="line">)</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: min(x0),</span><br><span class="line">            <span class="string">'y0'</span>: min(y0),</span><br><span class="line">            <span class="string">'x1'</span>: max(x0),</span><br><span class="line">            <span class="string">'y1'</span>: max(y0),</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'blue'</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'blue'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: min(x1),</span><br><span class="line">            <span class="string">'y0'</span>: min(y1),</span><br><span class="line">            <span class="string">'x1'</span>: max(x1),</span><br><span class="line">            <span class="string">'y1'</span>: max(y1),</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'orange'</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'orange'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: min(x2),</span><br><span class="line">            <span class="string">'y0'</span>: min(y2),</span><br><span class="line">            <span class="string">'x1'</span>: max(x2),</span><br><span class="line">            <span class="string">'y1'</span>: max(y2),</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'green'</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'green'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: min(x1),</span><br><span class="line">            <span class="string">'y0'</span>: min(y0),</span><br><span class="line">            <span class="string">'x1'</span>: max(x1),</span><br><span class="line">            <span class="string">'y1'</span>: max(y0),</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">'fillcolor'</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'showlegend'</span>: <span class="literal">False</span>,</span><br><span class="line">&#125;</span><br><span class="line">data = [trace0, trace1, trace2, trace3]</span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: data,</span><br><span class="line">    <span class="string">'layout'</span>: layout,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/clusters.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly高级图形</tag>
      </tags>
  </entry>
  <entry>
    <title>python items和itertems函数的用法</title>
    <url>/2018/07/28/python-items%E5%92%8Citertems%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一种：创建空字典</span></span><br><span class="line">dict=&#123;&#125;</span><br><span class="line"><span class="comment">#第二种：创建字典常量</span></span><br><span class="line">dict=&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="comment">#第三种：创建字典</span></span><br><span class="line">dict=dict()</span><br></pre></td></tr></table></figure><h2 id="字典的赋值"><a href="#字典的赋值" class="headerlink" title="字典的赋值"></a>字典的赋值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一种：直接赋值</span></span><br><span class="line">dict=&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;;</span><br><span class="line"><span class="comment">#第二种：创建时赋值</span></span><br><span class="line">dict(key1=<span class="string">'value1'</span>,key2=<span class="string">'value2'</span>)</span><br></pre></td></tr></table></figure><h2 id="items函数"><a href="#items函数" class="headerlink" title="items函数"></a>items函数</h2><ul><li>函数说明：items函数，将一个字典以列表的形式返回，因为字典是无序的，所以返回的列表也是无序的。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">3</span>&#125;</span><br><span class="line">a.items()</span><br><span class="line">返回 ：a = [(<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'b'</span>,<span class="number">3</span>)]</span><br></pre></td></tr></table></figure></li></ul><h2 id="iteritems函数"><a href="#iteritems函数" class="headerlink" title="iteritems函数"></a>iteritems函数</h2><ul><li>函数说明：该函数返回一个迭代器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">3</span>&#125;</span><br><span class="line">b = a.iteritems()</span><br><span class="line">list(b) = [(<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'b'</span>,<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">print</span> k,v</span><br><span class="line">    </span><br><span class="line">返回：a <span class="number">1</span> </span><br><span class="line">      b <span class="number">3</span></span><br><span class="line">      </span><br><span class="line">注：在Python <span class="number">3.</span>x 里面，iteritems()方法已经废除了。在<span class="number">3.</span>x里用 items()替换iteritems() ，可以用于 <span class="keyword">for</span> 来循环遍历。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      <categories>
        <category>python相关函数</category>
      </categories>
      <tags>
        <tag>python 字典的访问方法</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本元素：字符串，数字，变量</title>
    <url>/2019/03/26/python%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E6%95%B0%E5%AD%97%EF%BC%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="变量、名字和对象"><a href="#变量、名字和对象" class="headerlink" title="变量、名字和对象"></a>变量、名字和对象</h2><ul><li>Python里所欲的数据都是以对象的形式存在，甚至大型的数据结构、函数以及程序。</li><li>Python是很强类型的，你永远无法修改一个已有的对象的类型，即使它包含的值是可变的。</li><li>变量：就是在程序中为了方便引用内存中的值而为它取的名字。对对象的赋值并不会实际复制值，它只是为数据取个相关的名字，名字是对象的引用而不是对象的本身。<h3 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h3>吧a的值赋给b，相当于给刚刚创建的对象又贴上了标签b<br>type（）；该函数可以打印出对象的类型</li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="运算法则：跟c语言一样"><a href="#运算法则：跟c语言一样" class="headerlink" title="运算法则：跟c语言一样"></a>运算法则：跟c语言一样</h3><ul><li>但是：<br>/ 用来执行浮点除法，<br>// 用来取整，在除法中不能除0</li></ul><h2 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h2><ul><li>0b或0B代表二进制</li><li>0o或0O代表八进制</li><li>0x或0X代表十六进制</li></ul><h3 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h3><ul><li>Python2中一个int包含32位，long包含64位</li><li>Python3中long类型不存在，而int类型变为可以存储任意大小的整数，甚至超过64位</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是不可改变的，无法对字符串进行修改，但可以将字符串的一部分复制到新字符串，来达到修改的效果。</p><h3 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h3><ul><li>字符串可以是单引号，双引号，三引号。<br>双引号是为了创建字符串本身有单引号的字符串，三引号同理。三引号可以跨行创建字符串<h2 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h2><h3 id="使用字符串函数"><a href="#使用字符串函数" class="headerlink" title="使用字符串函数"></a>使用字符串函数</h3>str（）可以将其参数转换为字符串<br>len（）获取字符串的长度<br>split（）对字符串进行分割，括号内填分割的字符<br>join（）对字符串进行合并<br>capitalize（）让字符串的首字母变成大写<br>title（）让所有单词开头变成大写<br>upper（）让所有字母变成大写<br>lower（）让所有字母变成小写<br>seapcase（）让所有字母大小写转换<br>center（30）在30个字符位居中<br>ljust（30）在30个字符位左对齐<br>rjust（30）在30个字符位右对齐<br>replace（）字符串替换，格式replace（’a ‘,’a famous’,100）把a 替换为a famous，替换100处。<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3>用+号可以直接将两个字符串相加。<h3 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h3>用*号可以进行字符串的复制。<blockquote><blockquote><blockquote><p>start = “nan” * 4 //可将nan复制4遍</p></blockquote></blockquote></blockquote><h3 id="用-提取字符串"><a href="#用-提取字符串" class="headerlink" title="用[]提取字符串"></a>用[]提取字符串</h3>偏移量可以从0开始增加到字符串长度-1。<br>从左到右从0开始，从右到左从-1开始计数，</li></ul><h3 id="start-end-step-可对字符串进行分片。"><a href="#start-end-step-可对字符串进行分片。" class="headerlink" title="[start:end:step] 可对字符串进行分片。"></a>[start:end:step] 可对字符串进行分片。</h3><p>[:] 提取从开头到结尾的整个字符串<br>[start:]从start提取到结尾<br>[：end]从头提取到end-1<br>[star:end] 从start提取到end-1<br>[start:end:step] 从start提取到end-1，步长为step</p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python基本元素</tag>
      </tags>
  </entry>
  <entry>
    <title>python eval函数</title>
    <url>/2018/10/04/python-eval%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Python中eval函数的作用"><a href="#Python中eval函数的作用" class="headerlink" title="Python中eval函数的作用"></a>Python中eval函数的作用</h2><p>1、函数说明<br>eval函数就是实现list、dict、tuple与str之间的转化<br>str函数把list、dict、tuple转为字符串<br>eg1：字符串转换成列表<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"[[1,2], [3,4], [5,6], [7,8], [9,0]]"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b = eval(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">    &lt;type <span class="string">'str'</span>&gt;</span><br><span class="line">    [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p></p><p>eg2:字符串转换成字典<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"&#123;1: 'a', 2: 'b'&#125;"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b = eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">    &lt;type <span class="string">'str'</span>&gt;</span><br><span class="line">    &lt;type <span class="string">'dict'</span>&gt;</span><br><span class="line">    &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><p></p><p>eg3：字符串转换成元组<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"([1,2], [3,4], [5,6], [7,8], (9,0))"</span></span><br><span class="line">print(type(a))</span><br><span class="line">b=eval(a)</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">    &lt;type <span class="string">'str'</span>&gt;</span><br><span class="line">    &lt;type <span class="string">'tuple'</span>&gt;</span><br><span class="line">    ([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], (<span class="number">9</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>python相关函数</category>
      </categories>
      <tags>
        <tag>Python eval函数</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数</title>
    <url>/2019/03/31/python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>依次输入def，函数名，带有参数的圆括号，最后紧跟冒号（:），一个函数可以接受任何类型的值作为输入变量，并且返回任何数量的任何类型的结果。<br>如果函数不显示调用return，会默认返回none。<br>注：none不代表false，作为布尔值和FALSE是一样的。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span></span></span><br><span class="line"><span class="function">    <span class="title">pass</span></span></span><br></pre></td></tr></table></figure><p></p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><pre><code>传入的参数值是按照顺序依次复制过去的，顺序不同，参数的引用结果不同、
</code></pre><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>调用参数时可以指定对应参数的名字，这样可以不遵从顺序传入的原则。若一部分指定了参数名字，而另一部分参数没有指定名字，则没指定名字的<br>按照顺序传入的原则调用。</p><h3 id="指定默认参数值"><a href="#指定默认参数值" class="headerlink" title="指定默认参数值"></a>指定默认参数值</h3><pre><code>默认参数值在函数被指定时已经计算出来了，而不是在程序运行时。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(wine,entree,dessert=<span class="string">'pudding'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-收集位置参数"><a href="#使用-收集位置参数" class="headerlink" title="使用*收集位置参数"></a>使用*收集位置参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>星号将一组可变数量的位置参数集合成参数值的元组。同样的道理，如果你的函数同时有限定的位置参数，那么*args会收集剩下的参数。
</code></pre><h3 id="使用-收集关键字参数"><a href="#使用-收集关键字参数" class="headerlink" title="使用**收集关键字参数"></a>使用**收集关键字参数</h3><pre><code>使用两个星号可以将参数收集到一个字典中，参数的名字是字典的键，对应参数的值是字典的值。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(**args)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>如果把带有*args和**args的位置参数混合起来，就会按照顺序解析。
</code></pre><h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><pre><code>在函数体开始的部分附上函数定义说明的文档，就是函数的字符串。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(**args)</span>:</span></span><br><span class="line">      <span class="string">'echo return its input argument'</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#可以定义更长的字符串</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(**args)</span>:</span></span><br><span class="line">      <span class="string">'''echo return its input argument</span></span><br><span class="line"><span class="string">      gdjglajfgag jfaojigiab fjajofdi '''</span></span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>用Python函数help()可以打印出一个函数的文档字符串。如：help(print_args)
</code></pre><h2 id="一等公民：函数（函数复杂定义及应用）"><a href="#一等公民：函数（函数复杂定义及应用）" class="headerlink" title="一等公民：函数（函数复杂定义及应用）"></a>一等公民：函数（函数复杂定义及应用）</h2><p>Python中一切皆对象，包括数字，字符串，元组，列表，字典，函数。函数是Python中一等公民，可以把它们（返回值赋给变量），可以作为<br>被其他函数调用，也可以从其他函数中返回值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数中的函数,传入的值是一个函数名，在一个函数中调用另一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_something</span><span class="params">(func)</span></span></span><br><span class="line"><span class="function">    <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">#传参函数的函数</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">run_something</span><span class="params">(func,arg1,arg2)</span></span></span><br><span class="line"><span class="function">    <span class="title">func</span><span class="params">(arg1,arg2)</span></span></span><br></pre></td></tr></table></figure><h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><pre><code>可以在函数中定义另外一个函数
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回的是一个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(**args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> inner()</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>闭包：一个可以被动态创建的可以记录外部变量的函数。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回的是一个函数，</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s"</span> ,%args</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h3 id="匿名函数：lambda-函数"><a href="#匿名函数：lambda-函数" class="headerlink" title="匿名函数：lambda()函数"></a>匿名函数：lambda()函数</h3><pre><code>lambda函数是用一个语句表达的匿名函数，可以用它来代替小的函数。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_stroy</span><span class="params">(words,func)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        print(func(word))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enliven</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word.capitalize() + <span class="string">'!'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#调用函数为</span></span><br><span class="line">edit_stroy(starirs,enliven)</span><br><span class="line"><span class="comment">#用匿名函数为</span></span><br><span class="line">edit_stroy(starirs,<span class="keyword">lambda</span> word: word.capitalize() + <span class="string">'!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lambda函数接收一个参数word。在冒号和末尾圆括号之间的部分为函数的定义。</span></span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器使用来创建一个Python对象的。用它可以迭代庞大的序列，且不需要在内存中创建和存储整个序列。通常，生成器是为迭代器产生数的。<br>它会记录上一次调用的位置，并且返回下一个值。这一点和普通函数都是不一样的，一般函数不记录前一次调用，而且都会在函数的第一行执行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(first=<span class="number">0</span>,last=<span class="number">10</span>,step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    number=first</span><br><span class="line">    <span class="keyword">while</span> number &lt; last:</span><br><span class="line">        <span class="keyword">yield</span> number   <span class="comment">#记录上一次调用的位置，并且返回下一个值</span></span><br><span class="line">        number += step</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><pre><code>装饰器实质是一个函数 =。它把一个函数作为输入并且返回另外一个函数。通常使用如下技巧：
</code></pre><ul><li>*args 和 **kwargs</li><li>闭包</li><li>作为参数的函数</li></ul><h2 id="名称中的-和-的用法"><a href="#名称中的-和-的用法" class="headerlink" title="名称中的_和_的用法"></a>名称中的_和_的用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(first=<span class="number">0</span>,last=<span class="number">10</span>,step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    number=first</span><br><span class="line">    <span class="keyword">while</span> number &lt; last:</span><br><span class="line">        <span class="keyword">yield</span> number   <span class="comment">#记录上一次调用的位置，并且返回下一个值</span></span><br><span class="line">        number += step</span><br><span class="line"></span><br><span class="line">my_range._name_ <span class="comment">#显示函数名</span></span><br><span class="line">my_range._doc_ <span class="comment">#显示文档字符串</span></span><br></pre></td></tr></table></figure><h2 id="try和except处理错误"><a href="#try和except处理错误" class="headerlink" title="try和except处理错误"></a>try和except处理错误</h2><pre><code>正常执行try后面的语句，错误则执行except后面的语句。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>：</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>：</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>获取异常对象：
    except exceptiontype as name
如：except IndexError as err：将一个IndexError异常值赋给err
</code></pre>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python代码结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python外壳：代码结构</title>
    <url>/2019/03/30/python%E5%A4%96%E5%A3%B3%EF%BC%9A%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><pre><code>python 没有用花括号（{}）或者关键字(begin和end)来划分代码段，Python用空白来区分代码结构，
</code></pre><p>用严格的缩进来区分代码块结构。用“#”号来对代码进行注释。用“\”做为续行符来连接不同行的代码。</p><h2 id="if、elif和else"><a href="#if、elif和else" class="headerlink" title="if、elif和else"></a>if、elif和else</h2><pre><code>用法跟c语言的一样，不同的是，在每个判断语句后不用加括号，但是要加冒号(:),表示判断的结束。
</code></pre><p>每个判断语句下面的执行语句，要有严格的缩进，表示一个代码块。</p><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><pre><code>in 表示属于，其余跟c一样。在连接不同的比较时，有and ，or，not布尔操作符进行不同判断语句的连接。
</code></pre><p>比如：5 &lt; x and x &lt; 10;可以写成： 5 &lt; x &lt; 10;是同样的效果。</p><h4 id="真值的判断"><a href="#真值的判断" class="headerlink" title="真值的判断"></a>真值的判断</h4><pre><code>在所有的比较判断中，非空（零）即真。
</code></pre><h2 id="while和for循环"><a href="#while和for循环" class="headerlink" title="while和for循环"></a>while和for循环</h2><pre><code>判断同if一样，while 语句后的冒号（：）表示该语句的结束（如：while count &lt; 5 :）;
</code></pre><p>for循环，在Python中也称对容器的迭代；其中列表，字符串，元组，集合等都是可以迭代的对象，<br>基本语法：如：for rabbit in rabbits: rabbits可以是上述的迭代对象。元组或列表的迭代都是产生<br>一项，而字符串的迭代则产生单个字符。<br>对字典的迭代，可以迭代键（for key in keys.key(): 或for key in keys:）也可以迭代值<br>（for value in value.value():）,也可以用元组的方式返回<br>（for item in accusation.items(): 或者分别赋值 for card,contents in accusation.items():）。</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><pre><code>break和continue都是在循环体里使用，break跳出整个循环，continue跳出当前循环。
</code></pre><h3 id="在循环外使用else"><a href="#在循环外使用else" class="headerlink" title="在循环外使用else"></a>在循环外使用else</h3><pre><code>基本形式如下：
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> pos &lt; len(num):</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>： <span class="comment">#没有执行break</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment">#for的结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cheese <span class="keyword">in</span> cheeses:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>： <span class="comment">#没有执行break</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><pre><code>上述代码，如果没有执行break，即没有找到可执行的解。则执行else。
</code></pre><h2 id="用zip-并行迭代"><a href="#用zip-并行迭代" class="headerlink" title="用zip()并行迭代"></a>用zip()并行迭代</h2><pre><code>所谓并行迭代就是把多个列表（或者其他容器）放在一起同时迭代，在最短序列用完后，迭代结束。
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">days = [<span class="string">'mon'</span>,<span class="string">'tue'</span>,wed]</span><br><span class="line">fruits = [<span class="string">'banana'</span>,<span class="string">'orangs'</span>,<span class="string">'peach'</span>]</span><br><span class="line">drinks = [<span class="string">'offee'</span>,<span class="string">'tea'</span>,<span class="string">'beer'</span>]</span><br><span class="line"><span class="comment">#在最短序列用完后结束迭代</span></span><br><span class="line"><span class="keyword">for</span> day, fruits, drinks <span class="keyword">in</span> zip(days, fruits, drinks):</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">#用zip()配对两个元组</span></span><br><span class="line">English = <span class="string">'mon'</span>,<span class="string">'tue'</span>,<span class="string">'wed'</span></span><br><span class="line">french = <span class="string">'lundi'</span>,<span class="string">'mardi'</span>,<span class="string">'mercredi'</span></span><br><span class="line"></span><br><span class="line">list(zip(English, french))</span><br><span class="line"><span class="comment">#生成字典</span></span><br><span class="line">dict(zip(English, french))</span><br></pre></td></tr></table></figure><h2 id="用range（）生成自然序列"><a href="#用range（）生成自然序列" class="headerlink" title="用range（）生成自然序列"></a>用range（）生成自然序列</h2><pre><code>range()函数可以返回在特定区间的自然序列，range(start,stop,step),start默认为0，产生的最后一个
</code></pre><p>数的值是stop的前一个：stop - 1。step默认为1；也可以反向创建自然序列，step = -1；<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向创建</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br></pre></td></tr></table></figure><p></p><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><pre><code>推导式是一个或者多个迭代器快速简洁地创建数据结构的一种方法，可以将循环和条件判断
</code></pre><p>相结合，从而避免语法冗长。</p><h3 id="列表和集合推导式"><a href="#列表和集合推导式" class="headerlink" title="列表和集合推导式"></a>列表和集合推导式</h3><pre><code>语法：[expression for item in iterable]
      [expression for item in iterable if condition]

集合语法：{expression for expression in iterable} 中括号变为花括号      
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">number_list = [number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>)]</span><br><span class="line">a_list = [number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">cells = [(row, col) <span class="keyword">for</span> row <span class="keyword">in</span> rows <span class="keyword">for</span> col <span class="keyword">in</span> cols]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> cells:</span><br><span class="line">    print(cell)</span><br></pre></td></tr></table></figure><h2 id="字典的推导式"><a href="#字典的推导式" class="headerlink" title="字典的推导式"></a>字典的推导式</h2><pre><code>语法： {key_expression:value_expression for expression in iterable}
也可以有if判断，以及多个for循环迭代
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">words = <span class="string">'letters'</span></span><br><span class="line"></span><br><span class="line">letter_counts = &#123;letter:words.count(letter) <span class="keyword">for</span> letter <span class="keyword">in</span> words&#125;</span><br><span class="line">print(letter_counts)</span><br><span class="line">    &#123;<span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'r'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">2</span>, <span class="string">'l'</span>: <span class="number">1</span>, <span class="string">'t'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">#对于程序执行来说，两次调用word.count(letter)浪费时间，因为‘t’和‘e’出现了两次</span></span><br><span class="line"><span class="comment"># 优化如下</span></span><br><span class="line">letter_counts = &#123;letter:words.count(letter) <span class="keyword">for</span> letter <span class="keyword">in</span> set(words)&#125;<span class="comment">#这是对集合进行迭代而不是字符串</span></span><br></pre></td></tr></table></figure><h2 id="生成器推导式"><a href="#生成器推导式" class="headerlink" title="生成器推导式"></a>生成器推导式</h2><pre><code>元组是没有推导式的。用圆括号是生成器推导式
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_thing=(number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_thing</span><br><span class="line">&lt;type <span class="string">'generator'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> number <span class="keyword">in</span> number_thing:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> number</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment">#一个生成器只能运行一次，之后就会被擦除</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python代码结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python出错ModuleNotFoundError: No module named &#39;sklearn.cross_validation&#39;</title>
    <url>/2019/04/28/python%E5%87%BA%E9%94%99ModuleNotFoundError-No-module-named-sklearn-cross-validation/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><h2 id="sklearn更新后在执行以上代码时可能会出现这样的问题："><a href="#sklearn更新后在执行以上代码时可能会出现这样的问题：" class="headerlink" title="sklearn更新后在执行以上代码时可能会出现这样的问题："></a>sklearn更新后在执行以上代码时可能会出现这样的问题：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">'sklearn.cross_validation'</span></span><br></pre></td></tr></table></figure><h2 id="此时可以考虑使用以下方法导入库："><a href="#此时可以考虑使用以下方法导入库：" class="headerlink" title="此时可以考虑使用以下方法导入库："></a>此时可以考虑使用以下方法导入库：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><p>此时就不会报错了。</p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python容器：列表、元组、字典与集合</title>
    <url>/2019/03/29/python%E5%AE%B9%E5%99%A8%EF%BC%9A%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h2><p>列表和元组都是包含0个或者多个元素，与字符不同，不要求所含元素的种类相同。元组是不可变的，列表是可变的。</p><h3 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h3><p>列表适合利用顺序和位置定位某一元素。<br>用[]或者list（）创建列表<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_list = list()</span><br><span class="line">number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#列表的值允许重复</span></span><br><span class="line"><span class="comment">#列表可以包含列表</span></span><br></pre></td></tr></table></figure><p></p><h3 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h3><pre><code>list()将其他数据类型转换为列表
split()函数可以将字符串分割为列表
[offset]获取列表元素，也可以用来修改相应的元素，指定切片提取元素，列如：marxes[::2]步长为2，从后往前去以负数（-1）开始，marxes[::-1]可实现逆序
append()添加元素到尾部
extend（）或+=合并列表
insert（）在指定位置插入元素，如：marxes.insert(3,&apos;fadfa&apos;)
del  删除元素，如：del marxes[0],del是Python语句而不是列表方法，marxes[1].del无法进行调用。
remove()删除具有指定元素如：marxes.remove(&apos;fadfa&apos;)
pop()获取并删除指定位置的元素，如marxes.pop()弹出最后一个元素，括号可以加元素的索引
index()查询具有指定元素的位置marxes.index（&apos;1122&apos;）
count()记录特定值出现的次数
join（）转换为字符串，join是字符串的方法而不是列表的方法。‘445’.join(marxes)
sort()重新排列元素：sort()会对原列表进行排序，改变原列表的内容，sorted()返回排好序的列表副本，原列表不变，排序中默认从小到大，可以通过reverse=true或false改变先后顺序
len()获取列表长度
in 判断值是否存在
</code></pre><h4 id="用等号（-）或者copy（）复制列表"><a href="#用等号（-）或者copy（）复制列表" class="headerlink" title="用等号（=）或者copy（）复制列表"></a>用等号（=）或者copy（）复制列表</h4><pre><code>等号，是给原始列表多加一个标签，而不会从新生成一个新列表，用下面的方法：
</code></pre><ul><li>列表copy函数</li><li>list()函数</li><li>列表分片</li></ul><h3 id="元组的创建"><a href="#元组的创建" class="headerlink" title="元组的创建"></a>元组的创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empy = ()</span><br><span class="line">one = <span class="string">'fafdsa'</span>,  <span class="comment">#每个元素后跟一个逗号，多个元素中最后一个元素的逗号可以省略</span></span><br><span class="line">a,b,c = <span class="string">'afd'</span>,<span class="string">'fsadf'</span>,<span class="string">'454'</span> <span class="comment">#一次性将元组值赋给多个变量</span></span><br></pre></td></tr></table></figure><h3 id="元组函数"><a href="#元组函数" class="headerlink" title="元组函数"></a>元组函数</h3><pre><code>tuple(marx_list) 可以将其他类型转换为元组
</code></pre><h4 id="元组的特点"><a href="#元组的特点" class="headerlink" title="元组的特点"></a>元组的特点</h4><ul><li>元组占用的空间小</li><li>不会意外修改元组的值</li><li>可以将元组作为字典的键</li><li>命名元组可以作为对象的替代</li><li>函数的参数是以元组的形式传递的</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><pre><code>字典中每个元素有对应的键，通过键来访问元素，键可以是任意的变量，但通常是字符，字典是可变的，可以通过修改键值对字典进行修改，键之间是不能重复
</code></pre><h3 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empy = &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="字典的函数"><a href="#字典的函数" class="headerlink" title="字典的函数"></a>字典的函数</h3><pre><code>dict（） 转换为字典
用[key] 添加或修改元素，也可以用以获取元素
update()合并字典
del pythons[&apos;121&apos;]删除具有指定键的元素
clear（）删除所有元素
in判断是否存在
key()获取所键
values()获取所有值
items()获取所有键值对以元组的形式返回
用copy复制字典
</code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就像舍弃了值，只剩键一样的字典</p><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empy = set()</span><br></pre></td></tr></table></figure><h3 id="集合的函数"><a href="#集合的函数" class="headerlink" title="集合的函数"></a>集合的函数</h3><pre><code>用in测试值是否存在
set()将其他类型转换为集合
&amp; 或intersection() 合并及运算符，可用以获取集合中的交集
| 或 union()获取集合中的并集，
- 或 difference()获取集合中的差集
^ 或symmtric_difference()获取两个集合的异或集
&lt;= 或者 issubset()判断一个集合是否是另一个集合的子集
</code></pre>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python容器</tag>
      </tags>
  </entry>
  <entry>
    <title>python的安装</title>
    <url>/2019/04/11/python%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Python的下载"><a href="#Python的下载" class="headerlink" title="Python的下载"></a>Python的下载</h2><p>Python 下载链接：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>注：点击下载链接后跳转页面，在页面的files标题下选择下载的版本</p><h3 id="Linux或unix下"><a href="#Linux或unix下" class="headerlink" title="Linux或unix下"></a>Linux或unix下</h3><p>Python 下载链接：<a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">https://www.python.org/ftp/python/</a></p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>anaconda是一个针对科学设计的多合一安装包：包括Python本体，标准库以及许多实用的第三方库。<br>下载链接：<a href="https://repo.continuum.io/archive/" target="_blank" rel="noopener">https://repo.continuum.io/archive/</a> anaconda将所有文件都安装到属于它自己的目录中。不需要特殊的权限来执行安装</p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python玩转数据</title>
    <url>/2019/04/05/python%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="Python数据编码"><a href="#Python数据编码" class="headerlink" title="Python数据编码"></a>Python数据编码</h2><ul><li>表1：编码方式</li></ul><table><thead><tr><th style="text-align:center">编码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">‘ascii’</td><td style="text-align:center">经典的7比特ASCII编码</td></tr><tr><td style="text-align:center">‘utf-8’</td><td style="text-align:center">最长用的以8比特为单位的变长编码</td></tr><tr><td style="text-align:center">‘latin-1’</td><td style="text-align:center">被称为ISO 8859-1编码</td></tr><tr><td style="text-align:center">‘cp-1252’</td><td style="text-align:center">windows常用编码</td></tr><tr><td style="text-align:center">‘unicode-escape’</td><td style="text-align:center">Python中Unicode的转义文本格式，\uxxxx或者\uxxxxxxxx</td></tr></tbody></table><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>解码是将字节序列转化为Unicode字符串的过程。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">place = <span class="string">'abcrdddd'</span></span><br><span class="line">place_bytes = place.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">place2 = place.decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>尽可能统一使用UTF-8编码，出错率低，兼容性好，可以表达所有的Unicode字符</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="使用-的旧式格式化"><a href="#使用-的旧式格式化" class="headerlink" title="使用%的旧式格式化"></a>使用%的旧式格式化</h3><ul><li>表2：转换类型</li></ul><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">十进制整数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">八进制整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">十进制浮点数</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">以科学计数法表示的浮点数</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">十进制或科学计数法表示的浮点数</td></tr><tr><td style="text-align:center">%%</td><td style="text-align:center">文本值%本身</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'%s'</span> %<span class="number">42</span></span><br><span class="line"><span class="string">'%10d %10f %10s'</span> %(n,f,s) <span class="comment">#最小域宽为10个字符，右对齐</span></span><br><span class="line"><span class="string">'%-10d %-10f %-10s'</span> %(n,f,s) <span class="comment">#最小域宽为10个字符，左对齐</span></span><br><span class="line"><span class="string">'%10.4d %10.4f %10.4s'</span> %(n,f,s) <span class="comment">#设定最大字符宽度为4，右对齐，浮点数的精度限制在小数点后4位</span></span><br></pre></td></tr></table></figure><h3 id="使用-和format的新式格式化"><a href="#使用-和format的新式格式化" class="headerlink" title="使用{}和format的新式格式化"></a>使用{}和format的新式格式化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(n,f,s)</span><br><span class="line"><span class="string">'&#123;2&#125; &#123;0&#125; &#123;1&#125;'</span>.format(n,f,s)<span class="comment">#0代表第一个参数</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'n'</span>:<span class="number">42</span>,<span class="string">'f'</span>:<span class="number">7.03</span>,<span class="string">'s'</span>:<span class="string">'string cheese'</span>&#125;</span><br><span class="line"><span class="string">'&#123;0[n]&#125; &#123;0[f]&#125; &#123;0[s]&#125; &#123;1&#125;'</span>.format(d,<span class="string">'other'</span>)<span class="comment">#0代表整个字典，&#123;1&#125;代表字典后面的字符串的值</span></span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;0:&gt;10d&#125; &#123;1:&gt;10f&#125; &#123;2:&gt;10s&#125;'</span>.format(n,f,s)<span class="comment">#最小域宽为10个字符，左对齐</span></span><br><span class="line"><span class="string">'&#123;0:&lt;10d&#125; &#123;1:&lt;10f&#125; &#123;2:&lt;10s&#125;'</span>.format(n,f,s)<span class="comment">#最小域宽为10个字符，右对齐</span></span><br><span class="line"><span class="string">'&#123;0:^10d&#125; &#123;1:^10f&#125; &#123;2:^10s&#125;'</span>.format(n,f,s)<span class="comment">#最小域宽为10个字符,居中</span></span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;0:&lt;10.4d&#125; &#123;1:&lt;10.4f&#125; &#123;2:&lt;10.4s&#125;'</span>.format(n,f,s)<span class="comment">#设定最大字符宽度为4，右对齐，浮点数的精度限制在小数点后4位</span></span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;0:!^20s&#125;'</span>.format(<span class="string">'BIG SALE'</span>)<span class="comment">#用！代替空格填充</span></span><br></pre></td></tr></table></figure><h2 id="使用正则表达式匹配"><a href="#使用正则表达式匹配" class="headerlink" title="使用正则表达式匹配"></a>使用正则表达式匹配</h2><p>相关功能都在标准库re中，因此首先需要引用他。match()函数用于查看源是否是以模式开头</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.match(<span class="string">'You'</span>,<span class="string">'Young Frankenstein'</span>)</span><br><span class="line">youpatter = re.compile(<span class="string">'You'</span>) <span class="comment">#编译以加快匹配速度</span></span><br><span class="line">result = youpatter.match(<span class="string">'Young Frankenstein'</span>)</span><br></pre></td></tr></table></figure><ul><li>search()返回第一次成功匹配，如果存在的话</li><li>findall() 返回所有不重叠的匹配，如果存在的话</li><li>split()会根据pattern将source切分成若干段，返回这些片段组成的列表，</li><li>sub()需要一个额外的参数replacement，它会把source中所有匹配的pattern改成replacement</li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>表1：特殊字符</p><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">匹配</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">一个数字字符</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">一个非数字字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">一个字母或数字字符</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">一个非字母非数字字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">空白符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">非空白符</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">单词边界</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">非单词边界</td></tr></tbody></table><p>表2：模式标识符</p><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">匹配</th></tr></thead><tbody><tr><td style="text-align:center">abc</td><td style="text-align:center">文本值</td></tr><tr><td style="text-align:center">（expr）</td><td style="text-align:center">expr</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">除\n外的任何字符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">源字符串的开头</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">源字符串的结尾</td></tr><tr><td style="text-align:center">prev?</td><td style="text-align:center">0个或1个prev</td></tr><tr><td style="text-align:center">prev*</td><td style="text-align:center">0个或多个prev，尽可能多地匹配</td></tr><tr><td style="text-align:center">prev*?</td><td style="text-align:center">0个或多个prev，尽可能少地匹配</td></tr><tr><td style="text-align:center">prev+</td><td style="text-align:center">1个或多个prev，尽可能多地匹配</td></tr><tr><td style="text-align:center">prev+？</td><td style="text-align:center">1个或多个prev，尽可能少地匹配</td></tr><tr><td style="text-align:center">prev{m}</td><td style="text-align:center">m个连续的prev</td></tr><tr><td style="text-align:center">prev{m,n}</td><td style="text-align:center">m到n个连续的prev，尽可能多地匹配</td></tr><tr><td style="text-align:center">prev{m,n}？</td><td style="text-align:center">m到n个连续的prev，尽可能少地匹配</td></tr><tr><td style="text-align:center">[ abd ]</td><td style="text-align:center">a或b或c</td></tr><tr><td style="text-align:center">[^abd ]</td><td style="text-align:center">非（a或b或c）</td></tr><tr><td style="text-align:center">prev{?=next}</td><td style="text-align:center">如果后面为next，返回prev</td></tr><tr><td style="text-align:center">prev{?!next}</td><td style="text-align:center">如果后面非next，返回prev</td></tr><tr><td style="text-align:center">（?&lt;=prev）next</td><td style="text-align:center">如果前面为prev，返回next</td></tr><tr><td style="text-align:center">（?&lt;!prev）next</td><td style="text-align:center">如果前面非prev，返回next</td></tr></tbody></table><p>注：在匹配是为了防止转义用r’\bxxxxx’， “expr1 | expr2” 表示 eppr1或expr2 。</p><h3 id="模式：定义匹配的输出"><a href="#模式：定义匹配的输出" class="headerlink" title="模式：定义匹配的输出"></a>模式：定义匹配的输出</h3><p>当使用match()或search()时，所有的匹配会以m.group()的形式返回到对象m中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source = <span class="string">''' I wish I may,I wish I might have a dish of fish tonight'''</span></span><br><span class="line">m = re.search(<span class="string">r'(. dish\b).*(\bfish)'</span>,source)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()</span><br><span class="line"><span class="string">'a dish of fish'</span></span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'(?P&lt;DISH&gt;. dish\b).*(?P&lt;FISH&gt;\bfish)'</span>,source)<span class="comment">#(?P&lt;name&gt;expr)这样的匹配模式会匹配expr，并将匹配结果存入name的组中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">  (<span class="string">'a dish'</span>, <span class="string">'fish'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">'DISH'</span>)</span><br><span class="line">  <span class="string">'a dish'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">'FISH'</span>)</span><br><span class="line">  <span class="string">'fish'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python系统</title>
    <url>/2019/04/08/python%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li>创建文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fb = open(<span class="string">'test.txt'</span>,<span class="string">'wt'</span>)</span><br><span class="line">fb.close()</span><br></pre></td></tr></table></figure><ul><li>检查文件是否存在</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(<span class="string">'oops.txt'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>用isfile()检查是否为文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断是否文件</span></span><br><span class="line">name = <span class="string">'oops.txt'</span></span><br><span class="line">os.path.isfile(name)</span><br><span class="line"><span class="comment">#判断是否是目录</span></span><br><span class="line">os.path.isdir(name)</span><br><span class="line"><span class="comment">#isabs()判断参数是否是一个绝对路径名，参数不需要是一个真正的文件</span></span><br><span class="line">os.path.isabs(name)</span><br><span class="line">os.path.isabs(<span class="string">'/big/fake/name'</span>)</span><br></pre></td></tr></table></figure></li><li><p>copy()复制文件<br>copy()函数来自另一个模块shutil</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copy(oops.txt,<span class="string">'ohno.txt'</span>)</span><br></pre></td></tr></table></figure><ul><li>rename()重命名文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'ohno.txt'</span>,<span class="string">'ohwell.txt'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>用abspath()获取路径名<br>该函数会把相对路径扩展为一个绝对路径名<br>os.path.abspath(‘oops.txt’)</p></li><li><p>realpath()获取符号的路径名</p></li><li><p>remove 删除文件<br>os.remove(‘oops.txt’)</p></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>创建目录<br>os.mkdir(‘pomes’)</li><li>rmdir()删除目录<br>os.rmdir(‘pomes’)</li><li><p>列出目录内容<br>os.listdir(‘pomes’)</p></li><li><p>使用chdir()修改当前目录<br>可以从一个目录跳转到另一个目录<br>os.chdir(‘pomes’)</p></li><li><p>glob()列出匹配文件</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> golb</span><br><span class="line">glob.glob(<span class="string">'m*'</span>)<span class="comment">#获取以m开头的文件和目录</span></span><br><span class="line">glob.glob(<span class="string">'？？'</span>)<span class="comment">#获取所有名称为两个字符的文件和目录</span></span><br><span class="line">glob.glob(<span class="string">'m????e'</span>)<span class="comment">#获取名称为6个字符并且以m开头以e结尾</span></span><br><span class="line">glob.glob(<span class="string">'[klm]*e'</span>)<span class="comment">#获取所有以k、l或者m开头的文件和目录</span></span><br><span class="line"><span class="comment">#[!abc]会匹配除了a、b和c之外的所有字符</span></span><br></pre></td></tr></table></figure><h2 id="程序和进程"><a href="#程序和进程" class="headerlink" title="程序和进程"></a>程序和进程</h2><p>进程之间是相互隔离的，一个进程无法访问其他进程的内容，也无法操作其他进程。操作系统会根据所有正在运行的进程，给每一个进程一小段运行时间，然后切换到<br>其他进程，这样既可以做到公平又可以响应用户操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()<span class="comment">#获取当前进程id号</span></span><br><span class="line">os.getcwd()<span class="comment">#当前工作目录</span></span><br><span class="line">os.getuid()<span class="comment">#获取用户ID</span></span><br><span class="line">os.getgid()<span class="comment">#获取用户组ID</span></span><br></pre></td></tr></table></figure><h3 id="subprocess创建进程"><a href="#subprocess创建进程" class="headerlink" title="subprocess创建进程"></a>subprocess创建进程</h3><p>import subprocess<br>ret = subprocess.getoutput(‘date’)</p><h2 id="使用multiprocessing创建进程"><a href="#使用multiprocessing创建进程" class="headerlink" title="使用multiprocessing创建进程"></a>使用multiprocessing创建进程</h2><p>multiprocessing模块可以在一个程序中运行多个进程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_this</span><span class="params">(what)</span>:</span></span><br><span class="line">    whoami(what)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whoami</span><span class="params">(what)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Process %s says:%s'</span> %(os.getpid(),what)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    whoami(<span class="string">"I'm the main program"</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        p = multiprocessing.Process(target=do_this,args=(<span class="string">"I'm function %d"</span> %n))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="使用terminate-终止进程"><a href="#使用terminate-终止进程" class="headerlink" title="使用terminate()终止进程"></a>使用terminate()终止进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = multiprocessing.Process(target=do_this,args=(<span class="string">"I'm function %d"</span> %n))</span><br><span class="line">p.start()</span><br><span class="line">p.terminate()</span><br></pre></td></tr></table></figure><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>import calendar<br>calendar.isleap(1900)#判断1900是否死闰年</p><h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h3><p>dattime定义了4个主要的对象：</p><ul><li>date 处理年、月、日</li><li>time 处理时、分、秒</li><li>datetime 处理日期和时间同时出现的情况</li><li>timedelta处理日期和时间的间隔</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date </span><br><span class="line">halloween = date(<span class="number">2014</span>,<span class="number">10</span>,<span class="number">31</span>)</span><br><span class="line">halloween.day</span><br><span class="line">halloween.month</span><br><span class="line">halloween.isoformat()<span class="comment">#打印一个date对象，ISO是ISO 8601，一种表示日期和时间的国际标准</span></span><br></pre></td></tr></table></figure><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><p>一种表示绝对时间的方法是计算从某个起点开始的秒数。unix时间使用的是从1970年1月1日0点开始的秒数。<br>time模块的time()函数会返回当前时间的纪元<br>localtime()函数返回当前系统时区下的时间，gmtime()返回UTC时间<br>strftime()<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">now = time.time()</span><br><span class="line">time.ctime(now) <span class="comment">#把一个纪元值转换为一个字符</span></span><br><span class="line">curtime = time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime(time.time()))<span class="comment">#获取当天的时间</span></span><br><span class="line">cur = time.mktime(time.strptime(curtime,<span class="string">'%Y-%m-%d'</span>))</span><br></pre></td></tr></table></figure><p></p><h2 id="读写日期和时间"><a href="#读写日期和时间" class="headerlink" title="读写日期和时间"></a>读写日期和时间</h2><table><thead><tr><th>格式化字符串</th><th style="text-align:right">日期/时间单元</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td>%Y</td><td style="text-align:right">年</td><td style="text-align:center">1900-…</td></tr><tr><td>%m</td><td style="text-align:right">月</td><td style="text-align:center">01-12</td></tr><tr><td>%B</td><td style="text-align:right">月名</td><td style="text-align:center">January，….</td></tr><tr><td>%b</td><td style="text-align:right">月名缩写</td><td style="text-align:center">Jan-…</td></tr><tr><td>%d</td><td style="text-align:right">日</td><td style="text-align:center">01-31</td></tr><tr><td>%A</td><td style="text-align:right">星期</td><td style="text-align:center">Sunday，….</td></tr><tr><td>%a</td><td style="text-align:right">星期缩写</td><td style="text-align:center">Sun-…</td></tr><tr><td>%H</td><td style="text-align:right">时（24小时制）</td><td style="text-align:center">00-23</td></tr><tr><td>%I</td><td style="text-align:right">时（12小时制）</td><td style="text-align:center">01-12….</td></tr><tr><td>%p</td><td style="text-align:right">上午/下午</td><td style="text-align:center">AM，PM</td></tr><tr><td>%M</td><td style="text-align:right">分</td><td style="text-align:center">00-59</td></tr><tr><td>%S</td><td style="text-align:right">秒</td><td style="text-align:center">00-59</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">fmt =<span class="string">"It's %A ,%B %d,%Y,local time  %I:%M%S%p"</span></span><br><span class="line">t = time.localtime()</span><br></pre></td></tr></table></figure><h2 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h2><ul><li>arrow分</li><li>dateutil</li><li>iso8601</li><li>fleming 提供许多时区的函数</li></ul>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python系统</tag>
      </tags>
  </entry>
  <entry>
    <title>python盒子：模块、包、程序</title>
    <url>/2019/04/02/python%E7%9B%92%E5%AD%90%EF%BC%9A%E6%A8%A1%E5%9D%97%E3%80%81%E5%8C%85%E3%80%81%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>主要是sys库，调用sys.argv<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'fafdsaf:'</span>,sys.argv)<span class="comment">#接收外部的参数</span></span><br></pre></td></tr></table></figure><p></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="使用别名导入模块"><a href="#使用别名导入模块" class="headerlink" title="使用别名导入模块"></a>使用别名导入模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> report <span class="keyword">as</span> wr <span class="comment"># 把report别名为wr</span></span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>把多个模块组织成文件层次，称之为包。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主程序是boxes/weather.py</span></span><br><span class="line"><span class="keyword">from</span> source <span class="keyword">import</span> daily,weekly<span class="comment">#模块1：boxes/sources/daily.py  模块2：boxes/source/weekly.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还要在sources目录下添加一个文件：init.py。这个文件可以是空的，但是不能少</span></span><br><span class="line"><span class="comment">#在主程序下就可以调用source目录下的文件了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> report <span class="keyword">as</span> wr <span class="comment"># 把report别名为wr</span></span><br></pre></td></tr></table></figure><p></p><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>模块deque，from collections import deque;函数popleft()去掉最左边的项并返回该项，pop()去掉最右边的项并返回该项。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    dq = deque(word)</span><br><span class="line">    <span class="keyword">while</span> len(dq) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> dq.popleft != dq.pop()：</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="itertools迭代代码结构"><a href="#itertools迭代代码结构" class="headerlink" title="itertools迭代代码结构"></a>itertools迭代代码结构</h2><p>在for…in循环中调用迭代函数，每次会返回一项，并记住当前调用的状态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itertools.chain([[<span class="number">1</span>,<span class="number">2</span>],[<span class="string">'a'</span>,<span class="string">'b'</span>]):</span><br><span class="line">    print(item) <span class="comment">#每次输出一项</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">cycle()是在参数之间循环的无限迭代器</span><br><span class="line">accumulate()计算积累的值</span><br></pre></td></tr></table></figure><h2 id="友好输出pprint"><a href="#友好输出pprint" class="headerlink" title="友好输出pprint"></a>友好输出pprint</h2><p>pprint()会尽量排列输出元素从而增加可读性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br></pre></td></tr></table></figure><h2 id="获取更多python代码"><a href="#获取更多python代码" class="headerlink" title="获取更多python代码"></a>获取更多python代码</h2><ul><li>pypi: <a href="http://pypi.python.org" target="_blank" rel="noopener">http://pypi.python.org</a> 也称为cheese shop</li><li>github： <a href="http://github.com/python" target="_blank" rel="noopener">http://github.com/python</a></li><li>readthedocs <a href="https://readthedoces.org" target="_blank" rel="noopener">https://readthedoces.org</a></li></ul>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python程序</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32 uip心得</title>
    <url>/2019/06/25/stm32-uip%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="uip时钟"><a href="#uip时钟" class="headerlink" title="uip时钟"></a>uip时钟</h2><p>uIP-APP文件夹下的clock-arch.c文件是记录数据收发的时钟，即协议的系统心跳，系统心跳是用stm32中的定时器进行定时。<br>改变定时的时间即可改变数据的收发速度。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//clock-arch.c文件</span></span><br><span class="line"><span class="keyword">extern</span> u32 uip_timer;<span class="comment">//uip 计时器，每10ms增加1.</span></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">clock_time_t</span></span><br><span class="line">clock_time(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> uip_timer; <span class="comment">/* 10ms 单位 */</span>	 </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器文件下的定时中断</span></span><br><span class="line"><span class="comment">//定时器6中断服务程序	 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM6_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS 	</span></span><br><span class="line">	OSIntEnter();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">if</span> (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET) <span class="comment">//检查指定的TIM中断发生与否:TIM 中断源 </span></span><br><span class="line">	&#123;</span><br><span class="line">        uip_timer++;<span class="comment">//uip计时器增加1	</span></span><br><span class="line">	&#125; </span><br><span class="line">		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);  <span class="comment">//清除TIMx的中断待处理位:TIM 中断源 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS	</span></span><br><span class="line">	OSIntExit();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>				    		  			    	    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><p>1、 初始化硬件参数<br>2、 初始化uip协议<br>3、 绑定本机ip地址<br>4、 绑定网关<br>5、 设置网络掩码<br>6、 监听网路端口<br></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">uip_ipaddr_t</span> ipaddr;  <span class="comment">//定义uipIP地址变量</span></span><br><span class="line">   <span class="comment">//初始化硬件芯片-----ENC28J60</span></span><br><span class="line">    <span class="keyword">while</span>(tapdev_init())	<span class="comment">//初始化ENC28J60错误</span></span><br><span class="line">&#123;								   </span><br><span class="line">	delay_ms(<span class="number">200</span>);	</span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">//初始化uip协议</span></span><br><span class="line">   uip_init();				<span class="comment">//uIP初始化	</span></span><br><span class="line">   AnalyzeIpAddress();   <span class="comment">//解析IP地址</span></span><br><span class="line">   uip_ipaddr(ipaddr, UIP_DRIPADDR0,UIP_DRIPADDR1,UIP_DRIPADDR2,UIP_DRIPADDR3);	<span class="comment">//设置本地设置IP地址</span></span><br><span class="line">uip_sethostaddr(ipaddr);					    </span><br><span class="line">uip_ipaddr(ipaddr, UIP_DRIPADDR0,UIP_DRIPADDR1,UIP_DRIPADDR2,UIP_DRIPADDR2); 	<span class="comment">//设置网关IP地址(其实就是你路由器的IP地址)</span></span><br><span class="line">uip_setdraddr(ipaddr);						 </span><br><span class="line">uip_ipaddr(ipaddr, <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>);	<span class="comment">//设置网络掩码</span></span><br><span class="line">uip_setnetmask(ipaddr);</span><br><span class="line">   uip_listen(HTONS(<span class="number">1200</span>));			<span class="comment">//监听1200端口,用于TCP Server</span></span><br></pre></td></tr></table></figure><p></p><h2 id="网络事件处理"><a href="#网络事件处理" class="headerlink" title="网络事件处理"></a>网络事件处理</h2><p>uip_input(); IP包处理，该函数是和应用层结合的关键函数，该函数本质上是调用底层uip_process(UIP_DATA)函数，uip_process函数回调应用层的函数void tcp_server_demo_appcall(void)，<br>同理，事件轮询函数，即对每个client的事件的轮询函数uip_udp_periodic，都是调用uip_process，然后掉应应用层的回调函数，对每个client事件进行轮询。作为服务器可将数据发送到每个客户端。<br>在应用层里可以解析收到的数据和发送数据。(struct tcp_demo_appstate *)&amp;uip_conn-&gt;appstate; 该变量是存储需要发送的数据长度和数据内容。<br>底层存储发送数据用的是uip_conn结构体，该结构体类有对应的ip和相应的应用层的数据接口，收到和发送的数据都存储在uip_buf中，数据的长度存储在uip_len中。应用层所有的操作都是对<br>底层变量uip_buf,和uip_len进行赋值。发送数据都先调用uip_arp_out()函数;加以太网头结构，然后调用硬件网格芯片接口函数tapdev_send();发送数据到以太网。在此之前已经在应用层回调函数中对发送的数据进行<br>赋值，即对uip_buf,和uip_len 进行了赋值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应用层发送函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_server_senddata</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_demo_appstate</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">tcp_demo_appstate</span> *)&amp;<span class="title">uip_conn</span>-&gt;<span class="title">appstate</span>;</span></span><br><span class="line">	<span class="comment">//s-&gt;textptr : 发送的数据包缓冲区指针</span></span><br><span class="line">	<span class="comment">//s-&gt;textlen ：数据包的大小（单位字节）		   </span></span><br><span class="line">	<span class="keyword">if</span>(s-&gt;textlen&gt;<span class="number">0</span>)uip_send(s-&gt;textptr, s-&gt;textlen);<span class="comment">//发送TCP数据包	 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//底层发送函数，对底层uip_buf变量进行赋值，对uip_len进行赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uip_send</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(len &gt; <span class="number">0</span>) </span><br><span class="line">  &#123;</span><br><span class="line">    uip_slen = len;</span><br><span class="line">    <span class="keyword">if</span>(data != uip_sappdata) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(uip_sappdata, (data), uip_slen);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真正的发送函数</span></span><br><span class="line">tapdev_send();<span class="comment">//发送数据到以太网，该数是对网络芯片的操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用层的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_server_demo_appcall</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcp_demo_appstate</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">tcp_demo_appstate</span> *)&amp;<span class="title">uip_conn</span>-&gt;<span class="title">appstate</span>;</span></span><br><span class="line">	<span class="keyword">if</span>(uip_aborted())tcp_server_aborted();		<span class="comment">//连接终止</span></span><br><span class="line"> 	<span class="keyword">if</span>(uip_timedout())tcp_server_timedout();	<span class="comment">//连接超时   </span></span><br><span class="line">	<span class="keyword">if</span>(uip_closed())tcp_server_closed();		<span class="comment">//连接关闭	   </span></span><br><span class="line"> 	<span class="keyword">if</span>(uip_connected())tcp_server_connected();	<span class="comment">//连接成功	    </span></span><br><span class="line">	<span class="keyword">if</span>(uip_acked())tcp_server_acked();			<span class="comment">//发送的数据成功送达 </span></span><br><span class="line">	<span class="comment">//接收到一个新的TCP数据包 </span></span><br><span class="line">	<span class="keyword">if</span> (uip_newdata())<span class="comment">//收到客户端发过来的数据</span></span><br><span class="line">	&#123;</span><br><span class="line">			<span class="keyword">if</span>(uip_len&gt;<span class="number">199</span>)</span><br><span class="line">			&#123;		   </span><br><span class="line">				((u8*)uip_appdata)[<span class="number">199</span>]=<span class="number">0</span>;</span><br><span class="line">			&#125;		    </span><br><span class="line">	    	<span class="built_in">strcpy</span>((<span class="keyword">char</span>*)tcp_server_receive,uip_appdata);	</span><br><span class="line">			tcp_server_sta|=<span class="number">1</span>&lt;&lt;<span class="number">6</span>;<span class="comment">//表示收到客户端数据</span></span><br><span class="line">            <span class="comment">//反馈信息可在这儿赋值</span></span><br><span class="line">            </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tcp_server_sta&amp;(<span class="number">1</span>&lt;&lt;<span class="number">5</span>))<span class="comment">//有数据需要发送</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(sendFlag &lt; clientFlag)</span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;textptr=tcp_server_sendCache;</span><br><span class="line">            s-&gt;textlen=<span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)tcp_server_sendCache);</span><br><span class="line">            sendFlag++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sendFlag = <span class="number">0</span>;</span><br><span class="line">            tcp_server_sta&amp;=~(<span class="number">1</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//清除标记</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="comment">//当需要重发、新数据到达、数据包送达、连接建立时，通知uip发送数据 </span></span><br><span class="line">	<span class="keyword">if</span>(uip_rexmit()||uip_newdata()||uip_acked()||uip_connected()||uip_poll())</span><br><span class="line">	&#123;</span><br><span class="line">		tcp_server_senddata();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络事件处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//uip事件处理函数</span></span><br><span class="line"><span class="comment">//必须将该函数插入用户主循环,循环调用.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uip_polling</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 i;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">timer</span> <span class="title">periodic_timer</span>, <span class="title">arp_timer</span>;</span></span><br><span class="line">	<span class="keyword">static</span> u8 timer_ok=<span class="number">0</span>;	 </span><br><span class="line">	<span class="keyword">if</span>(timer_ok==<span class="number">0</span>)<span class="comment">//仅初始化一次</span></span><br><span class="line">	&#123;</span><br><span class="line">		timer_ok = <span class="number">1</span>;</span><br><span class="line">		timer_set(&amp;periodic_timer,CLOCK_SECOND/<span class="number">2</span>);  <span class="comment">//创建1个0.5秒的定时器 </span></span><br><span class="line">		timer_set(&amp;arp_timer,CLOCK_SECOND*<span class="number">10</span>);	   	<span class="comment">//创建1个10秒的定时器 </span></span><br><span class="line">	&#125;				 </span><br><span class="line">	uip_len=tapdev_read();	<span class="comment">//从网络设备读取一个IP包,得到数据长度.uip_len在uip.c中定义</span></span><br><span class="line">	<span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>) 			<span class="comment">//有数据</span></span><br><span class="line">	&#123;   </span><br><span class="line">		<span class="comment">//处理IP数据包(只有校验通过的IP包才会被接收) </span></span><br><span class="line">		<span class="keyword">if</span>(BUF-&gt;type == htons(UIP_ETHTYPE_IP))<span class="comment">//是否是IP包? </span></span><br><span class="line">		&#123;</span><br><span class="line">			uip_arp_ipin();	<span class="comment">//去除以太网头结构，更新ARP表</span></span><br><span class="line">			uip_input();   	<span class="comment">//IP包处理</span></span><br><span class="line">			<span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量 uip_len &gt; 0</span></span><br><span class="line">			<span class="comment">//需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)		    </span></span><br><span class="line">			<span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)<span class="comment">//需要回应数据</span></span><br><span class="line">			&#123;</span><br><span class="line">				uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">				tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (BUF-&gt;type==htons(UIP_ETHTYPE_ARP))<span class="comment">//处理arp报文,是否是ARP请求包?</span></span><br><span class="line">		&#123;</span><br><span class="line">			uip_arp_arpin();</span><br><span class="line"> 			<span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line">			<span class="comment">//需要发送的数据在uip_buf, 长度是uip_len(这是2个全局变量)</span></span><br><span class="line"> 			<span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)tapdev_send();<span class="comment">//需要发送数据,则通过tapdev_send发送	 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(timer_expired(&amp;periodic_timer))	<span class="comment">//0.5秒定时器超时</span></span><br><span class="line">	&#123;</span><br><span class="line">		timer_reset(&amp;periodic_timer);		<span class="comment">//复位0.5秒定时器 </span></span><br><span class="line">		<span class="comment">//轮流处理每个TCP连接, UIP_CONNS缺省是40个  </span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;UIP_CONNS;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			uip_periodic(i);	<span class="comment">//处理TCP通信事件  </span></span><br><span class="line">	 		<span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line">			<span class="comment">//需要发送的数据在uip_buf, 长度是uip_len (这是2个全局变量)</span></span><br><span class="line">	 		<span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">				tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UIP_UDP	<span class="comment">//UIP_UDP </span></span></span><br><span class="line">		<span class="comment">//轮流处理每个UDP连接, UIP_UDP_CONNS缺省是10个</span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;UIP_UDP_CONNS;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			uip_udp_periodic(i);	<span class="comment">//处理UDP通信事件</span></span><br><span class="line">	 		<span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line">			<span class="comment">//需要发送的数据在uip_buf, 长度是uip_len (这是2个全局变量)</span></span><br><span class="line">			<span class="keyword">if</span>(uip_len &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">				tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line">		<span class="comment">//每隔10秒调用1次ARP定时器函数 用于定期ARP处理,ARP表10秒更新一次，旧的条目会被抛弃</span></span><br><span class="line">		<span class="keyword">if</span>(timer_expired(&amp;arp_timer))</span><br><span class="line">		&#123;</span><br><span class="line">			timer_reset(&amp;arp_timer);</span><br><span class="line">			uip_arp_timer();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式网络通信</category>
      </categories>
      <tags>
        <tag>stm32 上uip移植</tag>
      </tags>
  </entry>
  <entry>
    <title>qt-for-android的安装</title>
    <url>/2019/03/05/qt-for-android%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="QT软件的安装"><a href="#QT软件的安装" class="headerlink" title="QT软件的安装"></a>QT软件的安装</h2><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p><a href="https://pan.baidu.com/s/1o8CxKaptmVthHVE3x3sjXw" target="_blank" rel="noopener">https://pan.baidu.com/s/1o8CxKaptmVthHVE3x3sjXw</a> zndu<br>参考相关博客链接：<a href="https://www.jianshu.com/p/437465a530dc" target="_blank" rel="noopener">https://www.jianshu.com/p/437465a530dc</a><br><a href="https://blog.csdn.net/qq_32250025/article/details/79106662" target="_blank" rel="noopener">https://blog.csdn.net/qq_32250025/article/details/79106662</a></p><h3 id="1、安装安装-java-jdk-android-ndk-android-sdktools"><a href="#1、安装安装-java-jdk-android-ndk-android-sdktools" class="headerlink" title="1、安装安装  java -jdk ,android-ndk,android-sdktools"></a>1、安装安装 java -jdk ,android-ndk,android-sdktools</h3><ul><li>安装 java -jdk，<br>对应版本：jdk1.8.0_201</li><li>安装android-ndk ，<br>安装ndk的时候，android-ndk-r10e以上的版本没有arm-linux-androideabi-gdb.exe，所以<br>在下载安装包的时候不能下载版本太高，10以下的版本就够.</li><li>安装android-sdktools<br>在安装sdk的时候会出现jdk找不到，或者版本过低，这时要先配置环境变量。当配置好环境变量出现版本过低的时候要重新下载jdk安装文件重新安装<br>，之前我安装jdk-11.0.2后，再安装sdk时出现版本过低，重新下载了jdk1.8.0_201安装就可以。<br>在配置qt文件的时候会出现不适一个平台，这时候要启动sdk文件夹下的SDK Manager.exe安装Android包。</li><li>安装ant<br>这个是在qt软件上:工具-&gt;选项-&gt;android:下的Ant executable项后面有一个下载的符号，点击可自动下载。<br>ps：对应的软件都在网盘里<h3 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h3>(1) JAVA_HOME 值： C:\Program Files\Java\jdk1.8.0_45<br>(2)ANDROID_HOME 值：D:\Android\sdk<br>(3)CLASSPATH 值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li></ul><h3 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h3><p>在构建的时候选择Android构建和运行就能够编译出.apk文件，对应的文件再编译文件夹下的/bin目录</p>]]></content>
      <categories>
        <category>QT学习</category>
      </categories>
      <tags>
        <tag>QT for Android环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>vs 2008&amp;2015</title>
    <url>/2018/07/28/vs-2008/</url>
    <content><![CDATA[<h2 id="vs-的快捷键"><a href="#vs-的快捷键" class="headerlink" title="vs 的快捷键"></a>vs 的快捷键</h2><p><a href="https://www.cnblogs.com/feichengwulai/articles/3515899.html" target="_blank" rel="noopener">https://www.cnblogs.com/feichengwulai/articles/3515899.html</a></p><ol><li>空格和tab键的设置<br>首先，先后按下两组快捷键Ctrl+R和Ctrl+W可以显示程序中的空格显示为圆点的样式，这样，在编码时，就可以知道Tab键是否为空格了。<br>同样，再次按下上述快捷键可以取消该显示。</li><li>将Tab键改为四个空格的方法：<br>Tools-&gt;Options-&gt;Text Editor-&gt;C/C++-&gt;Tabs中的Tab选项由Keep tabs该为Insert Space</li><li>注释</li></ol><ul><li>注释：ctrl+ K + C</li><li>取消注释：ctrl +K + U</li></ul><ol start="4"><li>全屏显示/全屏退出<br>shift + alt + enter</li><li>快速切换窗口<br>使用组合键“Ctrl+Tab”（此时可以打开IDE的导航，获得鸟瞰视 图）。</li><li>调试相关</li></ol><ul><li>调试启动： F5</li><li>调试重新启动：ctrl+shift+F5</li><li>调试（开始执行不调试）：ctrl+F5</li><li>ctrl+shift+f9取消所有断点</li><li>F10跨过程执行</li><li>F11单步逐句执行</li></ul><ol start="7"><li>窗口快捷键</li></ol><ul><li>ctrl+w，s 打开解决方案管理器</li><li>ctrl+w，c 类视图</li><li>ctrl+w，e 错误列表</li><li>ctrl+w，o 输出视图</li><li>f4或者ctrl+w，p 属性窗口</li><li>ctrl+w，x 工具箱</li></ul><ol start="8"><li>调用智能提示<br>1）方法1：使用组合键“Ctrl+J”；<br>2）方法2：使用组合键“Alt+→”</li><li>回到上一个光标位置/前进到下一个光标位置<br>1）回到上一个光标位置：使用组合键“Ctrl + -”；<br>2）前进到下一个光标位置：“Ctrl + Shift + - ”。<h2 id="vs2015的调试技巧"><a href="#vs2015的调试技巧" class="headerlink" title="vs2015的调试技巧"></a>vs2015的调试技巧</h2></li></ol><ul><li>在调试过程中，打开不同的调试窗口<br>调试-&gt;窗口-&gt;（选择要打开的窗口）</li></ul>]]></content>
      <categories>
        <category>vs学习</category>
      </categories>
      <tags>
        <tag>VS快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>table test</title>
    <url>/2018/10/05/table/</url>
    <content><![CDATA[<h2 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h2><table><thead><tr><th>水果</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>香蕉</td><td style="text-align:right">$1</td><td style="text-align:center">5</td></tr><tr><td>苹果</td><td style="text-align:right">$1</td><td style="text-align:center">6</td></tr><tr><td>草莓</td><td style="text-align:right">$1</td><td style="text-align:center">7</td></tr></tbody></table><blockquote><p><img src="https://imgur.com/a/rlB0eKF" alt="fsadfasfasf"></p></blockquote><blockquote><p><img src="https://imgur.com/a/l9bKiYc" alt="截图"></p></blockquote><blockquote><p><img src="/images/plot_image.jpg" alt="tttt" title="tup"><br><img src="/.com//images\plot_image.jpg" alt="tttt" title="tup"></p></blockquote><blockquote><p><img src="/images/plot_image.jpg" alt="tttt"><br><img src="/images/image.png" alt="dfasdfa"></p></blockquote><blockquote><p><img src="https://imgur.com/gallery/us-apaches-danish-leopards-dq2NC3z" alt="fsdafsaf"></p></blockquote><blockquote><p><img src="https://i.imgur.com/8paVuUa.jpg" alt="my photo"><br><img src="https://static.jyshare.com/images/runoob-logo.png" width="50%"><br><img src="https://static.jyshare.com/images/runoob-logo.png" alt="RUNOOB 图标"></p></blockquote><p><img src="https://static.jyshare.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p>]]></content>
      <categories>
        <category>学习表格</category>
      </categories>
      <tags>
        <tag>表格的格式</tag>
      </tags>
  </entry>
  <entry>
    <title>代码库常见错误</title>
    <url>/2019/04/14/%E4%BB%A3%E7%A0%81%E5%BA%93%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="Git新建分支出现fatal-Not-a-valid-object-name-‘master’错误"><a href="#Git新建分支出现fatal-Not-a-valid-object-name-‘master’错误" class="headerlink" title="Git新建分支出现fatal: Not a valid object name: ‘master’错误"></a>Git新建分支出现fatal: Not a valid object name: ‘master’错误</h2><p>原因是没有提交一个对象，要先commit之后才会真正建立master分支，此时才可以建立其它分支。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add c++</span><br><span class="line">git commot -m <span class="string">"提交c++"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后创建分支</span></span><br><span class="line">git branch wap</span><br><span class="line">git branch -a <span class="comment">#查看分支</span></span><br></pre></td></tr></table></figure><h2 id="出现error-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout"><a href="#出现error-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout" class="headerlink" title="出现error: The following untracked working tree files would be overwritten by checkout"></a>出现error: The following untracked working tree files would be overwritten by checkout</h2><p>pull代码出现error: The following untracked working tree files would be overwritten by checkout</p><p>$ git clean -d -fx “”</p><h2 id="Git使用之-pathspec-master-did-not-match-any-file-s-known-to-git"><a href="#Git使用之-pathspec-master-did-not-match-any-file-s-known-to-git" class="headerlink" title="Git使用之(pathspec master did not match any file(s) known to git)"></a>Git使用之(pathspec master did not match any file(s) known to git)</h2><p>不能查看分支<br>git checkout master<br>提示如下错误:<br>error: pathspec ‘master’ did not match any file(s) known to git</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>1.首先我们看一下分支情况:<br>git branch -a<br>2.如果没有看到你想要的分支,先获取所有分支:<br>git fetch 需要注意的是: 和push不同, fetch会自动获取远程 `新加入’ 的分支.</p><h2 id="执行git-push出现”Everything-up-to-date”"><a href="#执行git-push出现”Everything-up-to-date”" class="headerlink" title="执行git push出现”Everything up-to-date”"></a>执行git push出现”Everything up-to-date”</h2><p>在github上git clone一个项目，在里面创建一个目录，然后git push的时候，出现报错”Everything up-to-date”</p><p>原因：<br>1）没有git add .<br>2）没有git commit -m “提交信息”<br>如果上面两个步骤都成功执行，还出现这个错误是因为创建的目录下是空的，目录下必须有文件才能git push上传成功。<br>在github上创建文件的时候，在新文件名后加/符号就是文件夹，但是这种方式只支持英文名目录，中文名目录不支持。</p><h2 id="对于在git上面拉代码报”error-RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errno-10054”解决方法"><a href="#对于在git上面拉代码报”error-RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errno-10054”解决方法" class="headerlink" title="对于在git上面拉代码报”error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054”解决方法"></a>对于在git上面拉代码报”error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054”解决方法</h2><p>主要原因是安全设置的问题：<br>首先执行git config http.sslVerify “false” 若出现下列错误<br>git config http.sslVerify “false” fatal: not in a git directory<br>再继续执行 git config –globle http.sslVerify “false” 问题解决</p>]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>github代码库错误总结</tag>
      </tags>
  </entry>
  <entry>
    <title>创建自己的github代码库</title>
    <url>/2019/04/13/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E4%BB%A3%E7%A0%81%E5%BA%93/</url>
    <content><![CDATA[<h2 id="我的代码库"><a href="#我的代码库" class="headerlink" title="我的代码库"></a>我的代码库</h2><p>网址： <a href="https://github.com/coder-zhanglei/zhanglei.github.io.git" target="_blank" rel="noopener">https://github.com/coder-zhanglei/zhanglei.github.io.git</a><br>参考的博客： <a href="https://www.cnblogs.com/zhixi/p/9584624.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhixi/p/9584624.html</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、 在github上创建自己账号，建立自己的代码库，已完成<br>2、 安装git软件，下载地址：<a href="https://windows.github.com/" target="_blank" rel="noopener">https://windows.github.com/</a> 或 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br>注：安装好git后右键就有Git Bash Here可以打开git上传下载文件的框</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>1、 添加本地目录到远程仓库<br>在你的本地文件目录下右击，就会出现Git Bash选项，点击进入。<br>2、 设置用户名和邮箱地址。这两个值是作为上传时记录的值。输入命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> git config --global user.name <span class="string">"用户名"</span></span><br><span class="line"> git config --global user.email <span class="string">"邮箱"</span></span><br><span class="line"><span class="comment">#设置好后可以用命令查看当前的设置：</span></span><br><span class="line">git config --global user.name</span><br></pre></td></tr></table></figure><h2 id="下载和上传远程仓库的文件"><a href="#下载和上传远程仓库的文件" class="headerlink" title="下载和上传远程仓库的文件"></a>下载和上传远程仓库的文件</h2><p>1、 首先初始化本地仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>注：会生成.git的隐藏文件。没有生成就是没初始化成功</p><p>2、 连接远程仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin <span class="string">"https://github.com/GitHub用户名/代码仓库名称.git"</span></span><br><span class="line">git remote add origin  https://github.com/coder-zhanglei/zhanglei.github.io.git</span><br></pre></td></tr></table></figure><p>可以通过git remote -v 查看本地链接到的远程仓库<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p></p><p>若分支设置错误，可以查看后切换分支<br>【git remote rm origin】 删除现有远程仓库<br>【git remote add origin url】添加新远程仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>1、 从远程仓库拉取所有更新（每次上传项目都要操作）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>注意：此处极易报错！<br>因为远程代码仓库和本地代码仓库合并后，可能会有冲突，如有报错，使用git status查看状态</p><p>pull，因为两个仓库不同，发现refusing to merge unrelated histories，无法pull<br>因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在git pull，这句代码是在git 2.9.2版本发生的，最新的版本需要添加–allow-unrelated-histories<br>git pull origin master –allow-unrelated-histories<br>注：在 git pull origin master –allow-unrelated-histories此步操作时，.gitignore文件错误冲突并没有解决，只是强制合并忽略掉了</p><h3 id="创建分支，上传文件"><a href="#创建分支，上传文件" class="headerlink" title="创建分支，上传文件"></a>创建分支，上传文件</h3><p>因为git是分布式管理，所以尽量不要在master主分支上作开发，例如自己有一个项目，在外面开发时，可以使用分支1，在家开发时可以使用分支2，如果有其他人参入 ，分别 使用分支3，4，5<br>每次提交本地代码时候，先合并远程master主分支到本地，再提交</p><p>1、 创建本地分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p>2、 切换本地分支<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p></p><p>3、 本地分支提交</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git  add .</span><br><span class="line">git  commit -m ‘dev<span class="string">'</span></span><br><span class="line"><span class="string">git push -u origin dev</span></span><br></pre></td></tr></table></figure><p>4、 合并本地分支到master</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   git  checkout master</span><br><span class="line">   git pull origin master</span><br><span class="line">   git merge origin/master  //合并分支，分支替换为需要合并的分支，即把master替换为“mycode”</span><br><span class="line">   git status</span><br><span class="line">   </span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 12 commits.</span><br><span class="line">  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">   <span class="comment">#上面的意思就是你有12个commit，需要push到远程master上 </span></span><br><span class="line">   <span class="comment">#执行下面命令即可</span></span><br><span class="line"></span><br><span class="line">   git push origin master</span><br></pre></td></tr></table></figure><h4 id="上传指令的区别"><a href="#上传指令的区别" class="headerlink" title="上传指令的区别"></a>上传指令的区别</h4><p>$ git push origin</p><p>上面命令表示，将当前分支推送到origin主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。<br>$ git push 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。<br>$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。<br>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。</p><h2 id="仓库的管理"><a href="#仓库的管理" class="headerlink" title="仓库的管理"></a>仓库的管理</h2><p>删除仓库，参考博客：<a href="https://blog.csdn.net/weixin_42152081/article/details/80635777" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42152081/article/details/80635777</a><br>分支的管理 ：参考博客：<a href="https://blog.csdn.net/wankui/article/details/53328369" target="_blank" rel="noopener">https://blog.csdn.net/wankui/article/details/53328369</a></p><h3 id="一-删除已有仓库"><a href="#一-删除已有仓库" class="headerlink" title="一.删除已有仓库"></a>一.删除已有仓库</h3><p>如果我们想要删除Github中没有用的仓库，应该如何去做呢？<br>进入到我们需要删除的仓库里面，找到“settings”即仓库设置：<br>然后，在仓库设置里拉到最底部，找到“Danger Zone”即危险区域：<br>点击“Delete this repository”这样就可以删除该仓库了。</p><h3 id="二-删除Github中的某个文件或文件夹"><a href="#二-删除Github中的某个文件或文件夹" class="headerlink" title="二.删除Github中的某个文件或文件夹"></a>二.删除Github中的某个文件或文件夹</h3><p>1.本地仓库和远程仓库同时删除<br>例如要删除如图所示的_config.yml和index.md两个文件：<br>我们先在本地把两个文件删除，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add * //把本地仓库的文件上传到缓存。</span><br><span class="line">git commit -m <span class="string">'del'</span> //把第一步上传到缓存的东西上传到本地仓库，其中<span class="string">'del'</span>是操作标识，内容随便填，方便用户观看。</span><br><span class="line">git push origin master //把本地仓库的文件上传到远程仓库。</span><br></pre></td></tr></table></figure><p>这样，再打开远程仓库就可以看到两个文件已经被删除了：</p><h2 id="列几个常用的git命令"><a href="#列几个常用的git命令" class="headerlink" title="列几个常用的git命令"></a>列几个常用的git命令</h2><p>git init 项目初始化<br>git clone 拉取项目<br>git add . 添加到暂存区<br>git commit -m 添加commit信息<br>git push 将本地分支推送到服务器上去<br>git pull origin master 本地与服务器端同步</p><p>git log 查看日志<br>git status 查看当前状态<br>git tag 查看版本号<br>git diff 查看尚未提交的更新</p><h3 id="git-fetch：相当于是从远程获取最新版本到本地，不会自动merge"><a href="#git-fetch：相当于是从远程获取最新版本到本地，不会自动merge" class="headerlink" title="git fetch：相当于是从远程获取最新版本到本地，不会自动merge"></a>git fetch：相当于是从远程获取最新版本到本地，不会自动merge</h3><p>Git log -p master..origin/master 比较本地的master分支和origin/master分支的差别<br>查看对比一下 ，具体效果这里就不贴了，各位可以自行测试<br>git merge origin/master 进行合并</p><p>需要注意的是: 和push不同, fetch会自动获取远程`新加入’的分支.</p>]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>创建自己的代码库</tag>
      </tags>
  </entry>
  <entry>
    <title>彩票开发及选号笔记</title>
    <url>/2023/06/13/%E5%BD%A9%E7%A5%A8%E5%BC%80%E5%8F%91%E5%8F%8A%E9%80%89%E5%8F%B7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="选号规则"><a href="#选号规则" class="headerlink" title="选号规则"></a>选号规则</h2><p>1、假定上一次开过的全部都不中<br>2、假定随机（机选）的都不中<br>3、假定10次以上没开过奖的都不中<br>4、在剩下的选频率出现多次的且距上次开奖较近的号码<br>5、选具有一定规律的号码</p><ul><li>（1）开奖过的号码呈斜线</li><li>（2）多次连开，有二有三，有三有四，类似这样的号码</li></ul><h2 id="概率计算"><a href="#概率计算" class="headerlink" title="概率计算"></a>概率计算</h2><ul><li>根据上一期的开奖号码，计算下一期出现的概率</li><li>每个号根据历史出现概率计算下一期出现的概率</li><li>计算总体趋势的集中度</li></ul><h2 id="开奖号码统计"><a href="#开奖号码统计" class="headerlink" title="开奖号码统计"></a>开奖号码统计</h2><ul><li>近10期开奖号码出现的次数</li><li>近10期没有开奖的号出现的次数</li></ul><h2 id="计算输出"><a href="#计算输出" class="headerlink" title="计算输出"></a>计算输出</h2><ul><li>将每次计算出的号码输出到一个文件中</li><li>需要描述得到该组号码的理论依据</li></ul><h2 id="中奖数据"><a href="#中奖数据" class="headerlink" title="中奖数据"></a>中奖数据</h2><ul><li><p>另外我找了一篇文章，或许你可以参考其中”应用程序编程兼容性“，文章中指出”PtrSafe 属性向 VBA 编译器指示 Declare 语句面向 64 位版本的 Office 2010。如果不使用此属性，那么在 64 位系统中使用 Declare 语句会导致编译时错误“。</p></li><li><p>个人建议先备份Excel文件，然后在Excel中同时敲击Alt键和F11键，打开Excel VBA编辑器，然后找”Declare“，在它后面添加”PtrSafe“测试。</p></li><li><p>下面展示如何在Declare语句中使用其中某些项</p></li></ul><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> URLDownloadToFile <span class="keyword">Lib</span> <span class="string">"urlmon"</span> <span class="keyword">Alias</span> <span class="string">"URLDownloadToFileA"</span> (<span class="keyword">ByVal</span> pCaller <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> szURL <span class="keyword">As</span> <span class="built_in">String</span>, <span class="keyword">ByVal</span> szFileName <span class="keyword">As</span> <span class="built_in">String</span>, <span class="keyword">ByVal</span> dwReserved <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpfnCB <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span> <span class="comment">'-下载文件</span></span><br></pre></td></tr></table></figure><ul><li><p><img src="images/image-1.png" alt="alt text"></p></li><li><p>获取历史中奖信息</p></li></ul><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="comment">'================================================================================</span></span><br><span class="line">np = <span class="number">100</span> <span class="comment">'要更新的彩票期数,当需要更新全部期数时，令 np = rc</span></span><br><span class="line"><span class="comment">'================================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> rg = xlSheetSHN.QueryTables.Add(Connection:=<span class="string">"TEXT;"</span> &amp; cz, Destination:=xlSheetSHN.Range(<span class="string">"A3"</span>))</span><br><span class="line">    <span class="keyword">With</span> rg</span><br><span class="line">        .Name = czmc</span><br><span class="line">        .FieldNames = <span class="literal">True</span></span><br><span class="line">        .RowNumbers = <span class="literal">False</span></span><br><span class="line">        .FillAdjacentFormulas = <span class="literal">False</span></span><br><span class="line">        .PreserveFormatting = <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>彩票开发</category>
      </categories>
      <tags>
        <tag>彩票选号规则</tag>
      </tags>
  </entry>
  <entry>
    <title>大牛们的博客网站</title>
    <url>/2018/12/09/%E5%A4%A7%E7%89%9B%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="大牛们的博客网址"><a href="#大牛们的博客网址" class="headerlink" title="大牛们的博客网址"></a>大牛们的博客网址</h2><ul><li><a href="http://www.yanmin99.com/" target="_blank" rel="noopener">http://www.yanmin99.com/</a><h2 id="hexo-博客迁移"><a href="#hexo-博客迁移" class="headerlink" title="hexo 博客迁移"></a>hexo 博客迁移</h2></li><li><a href="https://www.cnblogs.com/iHeling/p/14095937.html" target="_blank" rel="noopener">https://www.cnblogs.com/iHeling/p/14095937.html</a></li></ul>]]></content>
      <categories>
        <category>初识hexo</category>
      </categories>
      <tags>
        <tag>初识hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>华为云服务器简介</title>
    <url>/2023/07/27/%E5%8D%8E%E4%B8%BA%E4%BA%91/</url>
    <content><![CDATA[<h2 id="华为云ECS"><a href="#华为云ECS" class="headerlink" title="华为云ECS"></a>华为云ECS</h2><p>1、什么是ECS<br>ECS(elastic compute service，弹性计算服务)可动态扩展的服务器器<br>2、服务器的作用<br>完全的管理权限<br>快照备份和恢复<br>自定义镜像</p><h2 id="试用的阿里云服务器"><a href="#试用的阿里云服务器" class="headerlink" title="试用的阿里云服务器"></a>试用的阿里云服务器</h2><p>1、 账户：root<br>2、 密码：zhanglei123456@%<br>3、 登录网址：<a href="https://ecs.console.aliyun.com/server/region/cn-hangzhou?__refreshToken=1690470900169" target="_blank" rel="noopener">https://ecs.console.aliyun.com/server/region/cn-hangzhou?__refreshToken=1690470900169</a> 阿里云官网控制台即可进入<br>4、 试用时间：2023.07.27-2023.10.27<br>5、 公网IP地址：121.43.179.148 私网ip:172.28.188.134</p><h2 id="本地登录云服务器"><a href="#本地登录云服务器" class="headerlink" title="本地登录云服务器"></a>本地登录云服务器</h2><pre><code>当本地登录云服务器，不能成功登录时在阿里云的实例控制台上查找连接帮助。
连接帮助位置：操作-&gt;...-&gt;远程连接-&gt;连接帮助
</code></pre>]]></content>
      <categories>
        <category>华为云</category>
      </categories>
      <tags>
        <tag>华为云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>编写qt遇到的问题</title>
    <url>/2024/10/17/%E7%BC%96%E5%86%99qt%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="在编写获取网络数据时使用connet报错"><a href="#在编写获取网络数据时使用connet报错" class="headerlink" title="在编写获取网络数据时使用connet报错"></a>在编写获取网络数据时使用connet报错</h1><p>一、Qt开发，报错如下：<br>error: C3861: “connect”: 找不到标识符<br>二、问题分析<br>connect函数归属于QObject。</p><p>使用Q_OBJECT宏，需要类继承QObject或其子类。使用connect可以指明QObject：</p><p>QObject::connect(sender, signal, receiver, slot);</p><p>QObject是Qt类体系的唯一基类，重要性就像MFC中的CObject或Delphi中的TObject，是Qt各种功能的活水源头。头文件#include<qobject></qobject></p><p>三、解决方案<br>继承QObject，并添加Q_OBJECT宏。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udp</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">udp</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="用vs添加QT中的库后出现"><a href="#用vs添加QT中的库后出现" class="headerlink" title="用vs添加QT中的库后出现"></a>用vs添加QT中的库后出现</h1><p><img src="images/image-6.png" alt="alt text"></p><h2 id="Set-environment-variable-TRACEDESIGNTIME-true-and-restart-Visual-Studio-to"><a href="#Set-environment-variable-TRACEDESIGNTIME-true-and-restart-Visual-Studio-to" class="headerlink" title="Set environment variable TRACEDESIGNTIME = true and restart Visual Studio to"></a>Set environment variable TRACEDESIGNTIME = true and restart Visual Studio to</h2><p>1、怎么设置环境变量 TRACEDESIGNTIME = true<br>开始菜单找到下图：<br>第一步：打开图中cmd<br><img src="images/image-7.png" alt="alt text"></p><p>第二步：关闭VS<br>第三步：输入：set TraceDesignTime=true<br><img src="images/image-8.png" alt="alt text"><br>第四步：输入： devenv重新打开VS，将提示<br>注意（执行完，不要关闭CMD命令行窗口）<br><img src="images/image-9.png" alt="alt text"></p><p>第五步：找到vs生成日志 *.designtime.log文件<br>默认路径：C:\Users\Administrator\AppData\Local\Temp<br>如果不是可以，查看环境变量中的%TEMP%的设置<br><img src="images/image-10.png" alt="alt text"></p><h1 id="在写信号与槽时当参数使用引用时，有可能不执行"><a href="#在写信号与槽时当参数使用引用时，有可能不执行" class="headerlink" title="在写信号与槽时当参数使用引用时，有可能不执行"></a>在写信号与槽时当参数使用引用时，有可能不执行</h1><p>当信号的参数使用引用时，如果在信号发射后引用的实体被销毁或作用域结束，槽函数将无法访问到有效的数据，从而导致执行失败。为了避免这种情况，可以在连接信号和槽时使用Qt::UniqueConnection来确保连接的有效性，或者在连接前先断开已有的连接再重新连接‌</p><h1 id="汉字出现乱码的情况"><a href="#汉字出现乱码的情况" class="headerlink" title="汉字出现乱码的情况"></a>汉字出现乱码的情况</h1><p>painter.drawText(rect, Qt::AlignCenter, QStringLiteral(“蓝球”));<br>使用 QStringLiteral(“蓝球”)，可使汉字在面板上正常显示</p>]]></content>
      <categories>
        <category>qt基类介绍</category>
      </categories>
      <tags>
        <tag>qt中的各个基类</tag>
      </tags>
  </entry>
  <entry>
    <title>彩票界面设计qt</title>
    <url>/2024/10/07/%E5%BD%A9%E7%A5%A8%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1qt/</url>
    <content><![CDATA[<h1 id="主界面的选择"><a href="#主界面的选择" class="headerlink" title="主界面的选择"></a>主界面的选择</h1><p>主界面基类选择QMainWindow,包含菜单栏，工具栏，状态条等，作为基础界面设计。</p>]]></content>
      <categories>
        <category>彩票</category>
      </categories>
      <tags>
        <tag>界面设计、qt</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2018/07/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="代码样式"><a href="#代码样式" class="headerlink" title="代码样式"></a>代码样式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c++类的框架：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFristBlog</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>：</span><br><span class="line">        MyFristBlog();</span><br><span class="line">        ~MyFristBlog();</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">float</span> j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载主题的命令"><a href="#下载主题的命令" class="headerlink" title="下载主题的命令"></a>下载主题的命令</h2><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
注：next是主题的名称，git clone是hexo命令，https://github.com/iissnan/hexo-theme-next是下载主题的网站，themes是下载的目录
</code></pre><h2 id="hexo的基础配置"><a href="#hexo的基础配置" class="headerlink" title="hexo的基础配置"></a>hexo的基础配置</h2><h3 id="修改全局的config-yml文件"><a href="#修改全局的config-yml文件" class="headerlink" title="修改全局的config.yml文件"></a>修改全局的config.yml文件</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">theme:landscape   把landscap改为我们要替换的主题 如next</span><br><span class="line">然后进行主题更新：</span><br><span class="line">cd themes/next</span><br><span class="line">git pull</span><br><span class="line">再通过</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line">或者</span><br><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br><span class="line">这样就将博客上传到github上了</span><br></pre></td></tr></table></figure><h3 id="添加about标签"><a href="#添加about标签" class="headerlink" title="添加about标签"></a>添加about标签</h3><p>在博客所在目录下用：<br>hexo new page about<br>这样会添加一个about文件夹，里面包含一个index.md。在这个文件内，可以编写一些about的信息。<br>然后，进入themes/jacman(进入你使用的主题下)打开_config.yml，在menu中添加about的链接。<br></p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">首页: /</span><br><span class="line">归档: /archives</span><br><span class="line">关于: /about</span><br><span class="line">这样就会再页面菜单中生成一个关于about的链接了。</span><br></pre></td></tr></table></figure><p></p><h3 id="添加categories分类和tags标签"><a href="#添加categories分类和tags标签" class="headerlink" title="添加categories分类和tags标签"></a>添加categories分类和tags标签</h3><p>1、新建标签<br>hexo new page tags<br>hexo new page categories<br>2、确认站点配置文件里有tag_dir: tags category_dir: categories<br>3、确认主题配置文件里有tags: /tags categories: /categories<br>4、编辑站点的source/tags/index.md，添加<br>title: tags<br>date: 2015-10-20 06:49:50<br>type: “tags”<br>comments: false<br>5、编辑站点的source/categories/index.md，添加<br>title: categories<br>date: 2015-10-20 06:49:50<br>type: “categories”<br>comments: false</p><p>注：编写tags和categories：冒号后面要有空格，格式如下：<br></p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">title: javascript深入理解(一)js类型知多少</span><br><span class="line">date: <span class="number">2018</span>-<span class="number">07</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">18</span>:<span class="number">12</span></span><br><span class="line">tags:</span><br><span class="line">    - javascript</span><br><span class="line">categories:</span><br><span class="line">    - javascript深入理解</span><br></pre></td></tr></table></figure><p></p><h2 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>初识hexo</category>
      </categories>
      <tags>
        <tag>初识hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>学习软件的安装</title>
    <url>/2018/10/19/%E5%AD%A6%E4%B9%A0%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="vs软件的安装"><a href="#vs软件的安装" class="headerlink" title="vs软件的安装"></a>vs软件的安装</h2><ol><li>安装软件<br>百度云盘的visual studio 文件夹下有安装包：zmvss2k8.iso，兼容性补丁包：VS2008SP1ENUX1512962.iso<br>以及番茄助手：Visual Assist X 2048</li><li>安装步骤<br>先安装zmvss2k8.iso，再安装VS2008SP1ENUX1512962.iso。安装文件是.exe结尾的目标文件。再安装番茄助手<br>安装后将破解动态库VA_X.dll替换到安装文件夹下。<br>注：安装过程中会出现安装Windows的.net文件。打开Windows的更新直接更新</li><li>配置boost库<br><a href="https://blog.csdn.net/qq1987924/article/details/7897503" target="_blank" rel="noopener">https://blog.csdn.net/qq1987924/article/details/7897503</a></li></ol><h2 id="modelsim安装"><a href="#modelsim安装" class="headerlink" title="modelsim安装"></a>modelsim安装</h2><ol><li>软件位置<br>百度网盘上modelsim文件夹下</li><li>安装步骤<br>先安装.exe的文件，再打开破解器破解，破解方式： <a href="https://www.cnblogs.com/lamblabs/p/8604360.html" target="_blank" rel="noopener">https://www.cnblogs.com/lamblabs/p/8604360.html</a><h2 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h2></li><li>软件位置<br>百度网盘上Python软件文件夹下</li><li>安装步骤<br>直接安装无需破解<h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2></li><li>安装步骤<br>软件在百度云盘上虚拟机软件文件夹下，直接安装无需破解<h2 id="hexo和git的安装"><a href="#hexo和git的安装" class="headerlink" title="hexo和git的安装"></a>hexo和git的安装</h2></li><li>安装步骤<br>软件在百度云盘的hexo&amp;git文件夹下直接安装<br>注：进入我的博客文件夹下安装</li><li>配置hexo<br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></li></ol><h2 id="QT的安装"><a href="#QT的安装" class="headerlink" title="QT的安装"></a>QT的安装</h2><ol><li>安装步骤<br>软件的位置在百度网盘上qt软件文件夹下，安装教程参考如下网站：<br><a href="https://jingyan.baidu.com/article/656db918d9292ae380249c4f.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/656db918d9292ae380249c4f.html</a></li></ol><h2 id="quartus-II的安装"><a href="#quartus-II的安装" class="headerlink" title="quartus II的安装"></a>quartus II的安装</h2><ol><li>软件位置<br>百度网盘上，FPGA的文件夹下</li><li>安装及破解步骤<br><a href="https://blog.csdn.net/qq_18649781/article/details/81025650" target="_blank" rel="noopener">https://blog.csdn.net/qq_18649781/article/details/81025650</a></li></ol>]]></content>
      <categories>
        <category>安装软件</category>
      </categories>
      <tags>
        <tag>软件的安装</tag>
      </tags>
  </entry>
  <entry>
    <title>番茄助手的安装</title>
    <url>/2019/03/24/%E7%95%AA%E8%8C%84%E5%8A%A9%E6%89%8B%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="visual-assist的安装"><a href="#visual-assist的安装" class="headerlink" title="visual assist的安装"></a>visual assist的安装</h2><p>1、 visual assist软件下载<br><a href="https://pan.baidu.com/s/1uD7GmjuSbdemNOdEhFqReQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1uD7GmjuSbdemNOdEhFqReQ</a> rr8i</p><p>2、 visual assist X通用补丁下载<br><a href="https://pan.baidu.com/s/1u-vOHdN7-m5vqiG6R1aEpA" target="_blank" rel="noopener">https://pan.baidu.com/s/1u-vOHdN7-m5vqiG6R1aEpA</a> ed1q</p><p>步骤：<br>安装完visual assist软件软件后，打开通用补丁，直接点击安装就破解了visual assist，如果之前有<br>安装过其他的破解补丁，先点击卸载，卸载后再安装。</p><h2 id="自定义vs的快捷键"><a href="#自定义vs的快捷键" class="headerlink" title="自定义vs的快捷键"></a>自定义vs的快捷键</h2><p>1、步骤<br>工具-&gt;选项-&gt;环境-&gt;键盘；<br>搜索你定义快捷键的功能，然后按自定义的快捷键即可；<br>比如：<br>修改返回上一处光标位置，之前的快捷键是“Ctrl + -”；搜索“向后”（Navigatebackward），然后修改自己的快捷键即可，<br>同理向前（navigateForward）。</p>]]></content>
      <categories>
        <category>visual studio的使用</category>
      </categories>
      <tags>
        <tag>visual assist</tag>
      </tags>
  </entry>
  <entry>
    <title>有用的学习网站</title>
    <url>/2018/07/23/%E6%9C%89%E7%94%A8%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<hr><h2 id="大神的博客：http-www-yanmin99-com"><a href="#大神的博客：http-www-yanmin99-com" class="headerlink" title="大神的博客：http://www.yanmin99.com/"></a>大神的博客：<a href="http://www.yanmin99.com/" target="_blank" rel="noopener">http://www.yanmin99.com/</a></h2><h2 id="linux公社"><a href="#linux公社" class="headerlink" title="linux公社"></a>linux公社</h2><ul><li>免费下载地址：<a href="http://linux.linuxidc.com/" target="_blank" rel="noopener">http://linux.linuxidc.com/</a></li><li>用户名与密码都是 <a href="http://www.linuxidc.com" target="_blank" rel="noopener">www.linuxidc.com</a></li></ul><h2 id="Markdown-学习网站"><a href="#Markdown-学习网站" class="headerlink" title="Markdown 学习网站"></a>Markdown 学习网站</h2><ol><li>Markdown 介绍与入门<br><a href="https://blog.csdn.net/u010565454/article/details/65937558" target="_blank" rel="noopener">https://blog.csdn.net/u010565454/article/details/65937558</a></li><li>简介 Markdown<br><a href="https://ouweiya.gitbooks.io/markdown/" target="_blank" rel="noopener">https://ouweiya.gitbooks.io/markdown/</a><br>注：该网页刷新很慢，建议使用第一个</li><li>MaHua在线markdown<br><a href="http://mahua.jser.me/" target="_blank" rel="noopener">http://mahua.jser.me/</a></li><li>好用的Markdown编辑器<br><a href="https://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">https://www.williamlong.info/archives/4319.html</a></li><li>Markdown : An error occurred with the Html rendering component<br><a href="https://blog.csdn.net/gxseveryday/article/details/80031755" target="_blank" rel="noopener">https://blog.csdn.net/gxseveryday/article/details/80031755</a></li><li>MarkdownPad2.5 注册码<br><a href="https://www.jianshu.com/p/9e5cd946696d" target="_blank" rel="noopener">https://www.jianshu.com/p/9e5cd946696d</a></li><li>markdown文件的基本常用编写语法（图文并茂）<br><a href="https://blog.csdn.net/tyyking/article/details/79682157" target="_blank" rel="noopener">https://blog.csdn.net/tyyking/article/details/79682157</a><h2 id="视频学习网站"><a href="#视频学习网站" class="headerlink" title="视频学习网站"></a>视频学习网站</h2></li></ol><ul><li>1 电子工程师在线课堂<br><a href="http://www.moore8.com/courses/list/" target="_blank" rel="noopener">http://www.moore8.com/courses/list/</a></li></ul><h2 id="课业答案"><a href="#课业答案" class="headerlink" title="课业答案"></a>课业答案</h2><ul><li>1 国际交流英语视听说B2<br><a href="https://wenku.baidu.com/view/4b2d7bc3f121dd36a32d8283.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/4b2d7bc3f121dd36a32d8283.html</a></li><li>2 国际交流英语视听说B2 Further Listening参考答案<br><a href="https://wenku.baidu.com/view/2d43ec5e5901020207409cf8.html?pn=51" target="_blank" rel="noopener">https://wenku.baidu.com/view/2d43ec5e5901020207409cf8.html?pn=51</a></li><li>3 《误差理论与数据处理(第6版)》费业泰-课后答案<br><a href="https://wenku.baidu.com/view/372fcd1b3d1ec5da50e2524de518964bcf84d222.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/372fcd1b3d1ec5da50e2524de518964bcf84d222.html</a></li><li>4 研究生英语读写教程（2）<br><a href="http://www.doc88.com/p-9863795133644.html" target="_blank" rel="noopener">http://www.doc88.com/p-9863795133644.html</a></li></ul><h2 id="hexo-amp-git"><a href="#hexo-amp-git" class="headerlink" title="hexo&amp;git"></a>hexo&amp;git</h2><ul><li>1 利用github+hexo搭建自己的博客<br><a href="https://blog.csdn.net/u012150360/article/details/72793482" target="_blank" rel="noopener">https://blog.csdn.net/u012150360/article/details/72793482</a></li><li>2 使用hexo+GitHub一步一步搭建属于自己的博客<br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></li><li>2 vue-cli 安装过程中报错npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall scandir解决<br><a href="https://blog.csdn.net/u010622874/article/details/80499523" target="_blank" rel="noopener">https://blog.csdn.net/u010622874/article/details/80499523</a></li><li>3 npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall scandir解决方法<br><a href="https://blog.csdn.net/brain_bo/article/details/80675282" target="_blank" rel="noopener">https://blog.csdn.net/brain_bo/article/details/80675282</a></li><li>4 hexo 搜索功能<br><a href="https://blog.csdn.net/ganzhilin520/article/details/79047983" target="_blank" rel="noopener">https://blog.csdn.net/ganzhilin520/article/details/79047983</a></li><li>5 Hexo安装配置详解<br><a href="https://blog.csdn.net/tonydandelion2014/article/details/61615898" target="_blank" rel="noopener">https://blog.csdn.net/tonydandelion2014/article/details/61615898</a></li><li>6 Hexo配置文件详细说明<br><a href="https://blog.csdn.net/gyq1998/article/details/78294689" target="_blank" rel="noopener">https://blog.csdn.net/gyq1998/article/details/78294689</a><h2 id="wox-使用说明"><a href="#wox-使用说明" class="headerlink" title="wox 使用说明"></a>wox 使用说明</h2></li><li>1 Wox - 开源免费强大的快捷启动器辅助工具，快速高效率打开软件/搜索文件！<br><a href="https://blog.csdn.net/xiaotongbiji/article/details/80620228" target="_blank" rel="noopener">https://blog.csdn.net/xiaotongbiji/article/details/80620228</a></li></ul>]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
      <tags>
        <tag>学习网站</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑的组成</title>
    <url>/2018/10/15/%E7%94%B5%E8%84%91%E7%9A%84%E7%BB%84%E6%88%90/</url>
    <content><![CDATA[<h2 id="电脑装机维修预备知识"><a href="#电脑装机维修预备知识" class="headerlink" title="电脑装机维修预备知识"></a>电脑装机维修预备知识</h2><ul><li>1 主机的内部构造<br>主机中主要包括：电源、cpu、内存、主板、硬盘、显卡、声卡、网卡、光驱等<br>（1）主板<br>主板把电脑的各个部件联系到一起，各个部件通过主板进行数据的传输。它工作的<br>稳定性直接影响整机的工作的稳定。</li><li>2 电脑的软件系统<br>（1）操作系统软件<br>（2）程序设计软件<br>（3）应用软件<br>注： 连接各个设备时电源线要最后连接，其他设备随意。</li></ul><h2 id="制定多核电脑配置方案"><a href="#制定多核电脑配置方案" class="headerlink" title="制定多核电脑配置方案"></a>制定多核电脑配置方案</h2><ul><li>1 原则<br>（1）购买电脑的目的<br>简单用途普通配置，复杂用途高档配置。<br>（2）购买者的资金状况<br>（3）确定资金消费重点<br>如果购机时资金不是很充足，这时应该根据购机目的和实际情况，确定资金消费的、<br>重点。如商务用机，应侧重于显示器和主板的选择。</li><li>2 配置方案类型<br>（1）入门型用户<br>2000-3000元<br>（2）大众型用户<br>3000-6000<br>（3）专业型用户<br>6000-10000<h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2>依次单击“开始-&gt;所有应用-&gt;windows管理工具-&gt;系统信息”</li></ul>]]></content>
      <categories>
        <category>电脑硬件选购</category>
      </categories>
      <tags>
        <tag>主机硬件结构</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-第二章：系统设计</title>
    <url>/2019/11/02/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="结构化分析"><a href="#结构化分析" class="headerlink" title="结构化分析"></a>结构化分析</h2><p>结构化方法遵循的原理是自顶向下、逐步求精，使用的工具有数据流图、数据字典、判定表、判定树和结构化语言等。<br>1969年Bohm和jacopini首次证明了只要用三种结构（顺序，选择和循环）就能表达一个入口和出口的流程图所能表达的任何程序<br>逻辑。</p><h2 id="面向对象分析的基本过程"><a href="#面向对象分析的基本过程" class="headerlink" title="面向对象分析的基本过程"></a>面向对象分析的基本过程</h2><p>需求陈述的内容包括问题范围、功能需求、性能需求、应用环境及假设条件等。</p><h3 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h3><p>面向对象建模得到模型包含对象的三个要素：对象模型（静态结构）、交互次序（动态结构）和数据变换（功能模型）。大型系统的对<br>象模型由4个层次组成：主题层、对象层、特征层（可细分为属性层、服务层）、关系层。</p><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>结构设计的一般准则：划分模块时，尽量做到高内聚，低耦合，保持模块的相对独立性，以此为原则优化初始化的软件结构。</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>所有软件结构设计都是要以模块化为基础，模块由单独命名和可编程的构件集成，以满足问题的需求。模块的基本属性有：</p><ul><li>接口：模块的输入输出口</li><li>功能：指模块实现什么功能</li><li>逻辑：描述内部如何实现要求的功能及所需的数据</li><li>状态：指模块的运行环境，即模块的调用与被调用关系<br>在设计模块时要考虑软件的模块数目、模块接口成本和软件总成本之间的关系。<br>模块数越多接口越多。<h4 id="模块的耦合"><a href="#模块的耦合" class="headerlink" title="模块的耦合"></a>模块的耦合</h4>耦合表示软件结构内不同模块彼此之间相互依赖的紧密程度，是衡量软件模块结构质量好坏的度量。软件设计应追求尽可能的松散合<br>，避免强耦合。越松散，模块间的联系就越少。模块的独立性就越强。<br>一般的耦合分为：数据、控制、公共环境、内容和标记耦合。<br>耦合原则：尽量使用数据耦合，少使用控制耦合，限制公共耦合，完全不使用内容耦合。<h4 id="模块的内聚"><a href="#模块的内聚" class="headerlink" title="模块的内聚"></a>模块的内聚</h4>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。简单的说，理想内聚的模块只做一件事<br>。<br>模块尽量使用高内聚，少用中内聚，不用低内聚。<h3 id="设计的优化"><a href="#设计的优化" class="headerlink" title="设计的优化"></a>设计的优化</h3>（1） 输入部分求精<br>（2） 输出部分求精<br>（3） 变化部分求精<h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3>描述详细设计的常用的三种工具：图形，表格和语言，以下是设计的具体方法。</li><li>结构化语言</li><li>判定表</li><li>判定树</li><li>结构化程序设计<h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><h4 id="面向对象抽象方法"><a href="#面向对象抽象方法" class="headerlink" title="面向对象抽象方法"></a>面向对象抽象方法</h4>分类的原则是抽象，即忽略事物的非本质特征，只注意那些与当前目标相关的本质特征，从而找出事物的特性，把具有共同性质的事<br>物划分为一类，得到一个抽象的概念。<br>面向对象方法支持过程抽象和数据抽象。类似一种抽象数据类型，对外提供方法，对内封装数据及实现。参数化抽象是指在类的规格<br>说明描述时，不具体说明所要操作的数据类型，而是把数据类型作为参数。这使得类的抽象程度更高。比如c++中的“模板”机制。</li></ul><h4 id="面向对象的基本原理"><a href="#面向对象的基本原理" class="headerlink" title="面向对象的基本原理"></a>面向对象的基本原理</h4><p>面向对象的而基本原理如下：<br>（1） 抽象（过程，数据）<br>（2） 封装<br>（3） 继承<br>（4） 消息<br>（5） 组织方法（对象和属性、类专成员、整体与部分）<br>（6） 功能分类（基本函数，状态-文件-响应、对象生命历程）<br>（7） 分类结论<br>（8） 组织结构<br>（9） 实例连接<br>（10） 消息连接</p><h2 id="数据库系统模型和结构"><a href="#数据库系统模型和结构" class="headerlink" title="数据库系统模型和结构"></a>数据库系统模型和结构</h2><h3 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h3><p>（1） 层次模型<br>（2） 网状模型<br>（3） 关系模型<br>（4） 数据独立存取模型</p><h3 id="关系数据库的范式理论"><a href="#关系数据库的范式理论" class="headerlink" title="关系数据库的范式理论"></a>关系数据库的范式理论</h3><p>有5中不同层次的范式：第一范式（1nf）、第二范式（2nf）、第三范式（3nf）、第四范式（4nf）、第五范式（5nf）。一个<br>低一级范式的关系模型，通过分解方法转换为若干个高一级范式的关系模式的集合，称为规范化。</p><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>要求元组中的每一个数据项都不能再分割，都是原子项，记作1NF。简单的说就是表中每一个元素都是单一的、不可再分的数据。</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>满足第一范式，并且每个非关键字属性都完全依赖于主关键字。</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>符合第二范式，所有非关键字属性之间不存在函数依赖关系。即非主关键字不能拆分为其他关键字的组合。</p><h4 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h4><p>符合第三范式，在关系模型中没有超过一个的多值事实。多值事实就是某个属性有若干个值，这些值由另一个属性的一个值决定。</p><h4 id="第五范式"><a href="#第五范式" class="headerlink" title="第五范式"></a>第五范式</h4><p>符合第五范式的表不能分解成两个或则多个表，且不丢失信息。</p><h3 id="范式之间的关系"><a href="#范式之间的关系" class="headerlink" title="范式之间的关系"></a>范式之间的关系</h3><p>一般程度来说，规范化程度低会造成数据冗余和操作异常，但是范式程度低则检索直接，处理比较简单；范式程度高可以减少操作异<br>常和减少数据冗余，但是规范化程度高则在检索是要访问更多的关系，即需要做更多的操作，比较复杂。</p>]]></content>
      <categories>
        <category>软件工程学习</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
      </tags>
  </entry>
  <entry>
    <title>选购CPU</title>
    <url>/2018/10/15/%E9%80%89%E8%B4%ADCPU/</url>
    <content><![CDATA[<h2 id="初识cpu"><a href="#初识cpu" class="headerlink" title="初识cpu"></a>初识cpu</h2><p>CPU是central processing unit的缩写，中文名称是“中央处理器”。其内部结构归纳<br>起来可分为：控制单元、逻辑单元和存储单元三部分，这三部分相互协调，可以进行分析<br>判断、运算并控制电脑各个部分协调工作。</p><h2 id="CPU的生产商及产品"><a href="#CPU的生产商及产品" class="headerlink" title="CPU的生产商及产品"></a>CPU的生产商及产品</h2><p>目前世界上生产CPU的厂商主要有Intel公司，AMD公司<br>inter公司的产品主要是酷睿i系列。</p><h2 id="处理器核数"><a href="#处理器核数" class="headerlink" title="处理器核数"></a>处理器核数</h2><ul><li>1 Intel公司<br>Intel公司六核处理器主要有：i7-5930K、i7-4960X、i7-4930K、i7-3970X等<br>Intel公司四核处理器主要有：第三代、第四代核第六代corei7四核处理器，第三代、四代核六代corei5四核处理器。</li><li>2 AMD公司<br>AMD公司主流cpu有FX系列8核，6核、4核处理器，<br>APU系列4核、三核、双核处理器，<br>phenomII（羿龙II）X4四核、X3三核、X2双核等。<h2 id="CPU及CPU散热器选购实战"><a href="#CPU及CPU散热器选购实战" class="headerlink" title="CPU及CPU散热器选购实战"></a>CPU及CPU散热器选购实战</h2></li></ul><ul><li>1 主频<br>购买不要追求过高的主频。</li><li>2 注意购买时机<br>购买时可以选择推出半年到一年的CPU产品</li><li>3 注意应用需求<br>在不同的应用环境下对于CPU的性能需求是不同的，所以，在进行电脑选购时<br>必须注意“适合应用”的原则。</li><li>4 注意预防购买假的CPU<br>（1） 看分界线<br>原包装在外盒背面印有多种文字的产品介绍，这些文字的上下分界处，有一行看起来很像<br>黑道的分解线。如果是正品的话，即可发现这些黑道其实是极小的“intel”标志组成，而且十分清晰。<br>（2）看包装盒颜色<br>正品色彩鲜艳，次品色彩比较浅。<br>（3）看封装线<br>正品盒装Intel CPU的塑料封纸的封装线不可能在盒的右侧条形码处。<br>（4）看水印字<br>正品刮不下来<br>（5）看激光标签<br>正品采用了四重着色技术，层次丰富，字迹清晰。<br>（6）电话查询<br>盒装上有一串很长的编码，可以通过拨打热线电话800-820-1100来查产品的真伪。<br>（7）看热封点<br>正品有4个热封点，每个热封点有两个圆点，它们在揭开后就不能复原。<br>（8）看风扇<br>看风扇的热片和轴承，原装的风扇的轴承是金属的，散热片见得凹槽为圆弧形，而且热片的低端厚实。假风扇的做工很粗糙，手感很轻。</li><li>5 使用时尽量选择高外频<br>在主频情况相同的情况下，更高的外频和前端总线可以提供更大的数据传输带宽，因此相对来说表现也更优秀。<h3 id="CPU风扇选购实战"><a href="#CPU风扇选购实战" class="headerlink" title="CPU风扇选购实战"></a>CPU风扇选购实战</h3></li></ul><ul><li>1 cpu风扇的生产厂商：清华华天公司，富士康公司、博美特公司<br>注：除了风冷扇热之外，还有一种比较好的散热方式-水冷散热。</li></ul>]]></content>
      <categories>
        <category>电脑硬件选购</category>
      </categories>
      <tags>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>股市投资知识</title>
    <url>/2025/01/07/%E8%82%A1%E5%B8%82%E6%8A%95%E8%B5%84%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="对敲"><a href="#对敲" class="headerlink" title="对敲"></a>对敲</h1><p>大额的成交意图想要不被发现，目前只需要使用一些拆单软件，把一笔大单拆为多笔小单即可；<br>机构或大户们也可以 通过“做单”的形式，用自成交（自己买入自己的卖出委托，或者自己卖给自己的买入委托）的方式制造出大单成交，也就是所谓的“对敲”。</p><p>比如：某大机构想建仓买货的时候，通过单笔30万股的大单卖出，同时把50万股买入的大单子，<br>通过人手或辅助拆单软件拆成几十到几百笔小单去买入，这样市场看到的资金流指标将会是“大资金流出”，而实情是这个机构净买入了20万股；</p><p>当这个机构实际上想卖货的时候，再反过来操作做，市场上看到的资金流指标就成了“大资金流入”，而实情是该机构净卖出了股票，实现了出货20万股。</p>]]></content>
      <categories>
        <category>股票知识</category>
      </categories>
      <tags>
        <tag>股市</tag>
      </tags>
  </entry>
  <entry>
    <title>选购主板</title>
    <url>/2018/10/17/%E9%80%89%E8%B4%AD%E4%B8%BB%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="主板的认识"><a href="#主板的认识" class="headerlink" title="主板的认识"></a>主板的认识</h2><p>主板是一个电脑的中枢，所有部件及其外设只有通过它才能与处理器连接在一起进行通信，<br>并由处理器发出相应的操作指令执行相关的操作。<br>主板上包含CPU、内存条插座、芯片组、BIOS芯片、供电电路、各种接口插座、各种散热器等部件。<br>它们决定了主板的性能和类型。</p><h3 id="主流主板"><a href="#主流主板" class="headerlink" title="主流主板"></a>主流主板</h3><p>目前有Intel公司处理器的主板和AMD公司处理器的主板。</p><h3 id="识别主板芯片组"><a href="#识别主板芯片组" class="headerlink" title="识别主板芯片组"></a>识别主板芯片组</h3><p>主板芯片组是主板的灵魂与核心，芯片组的性能优劣决定了主板性能的好坏。所有的信息<br>都是交给芯片组来完成的。在主板的构架中，北桥芯片和南桥芯片是硬件设备进行通信及沟通的桥梁<br>。<br>北桥芯片位于CPU插座与pci-e插槽的中间，其芯片体型较大，一般会覆盖一个散热风扇。<br>北桥芯片主要负责联系CPU和控制内存。<br>南桥芯片一般位于主板的下方，PCI插槽附件。它主要负责支持键盘控制器、USB接口、实时时钟控制<br>、数据传递方式和高级电源管理。</p><h3 id="主板BIOS芯片"><a href="#主板BIOS芯片" class="headerlink" title="主板BIOS芯片"></a>主板BIOS芯片</h3><pre><code>BIOS实际上是“Basic Input/Output System”的英文缩写，中文意思是“基本输入/输出系统”。BIOS实际上
</code></pre><p>是电脑中底层的一种程序。当启动系统时，BIOS进行加电自检、检查系统基本部件，然后<br>系统启动启动程序将系统的配置参数写入CMOS中。<br>CMOS指的是主板上的一块可以反复读写的RAM芯片，也称为互补金属氧化物半导体随机存储器。CMOS主要用<br>来保存当前系统的硬件配置和用户对某些参数的设定，靠一块纽扣电池供电，即使断电内容也不会丢失。</p><h3 id="CMOS跳线"><a href="#CMOS跳线" class="headerlink" title="CMOS跳线"></a>CMOS跳线</h3><ul><li>1 跳线的目的<br>用于清除CMOS中的数据，在清空数据之后，BIOS将出厂时的原始数据传给CMOS存储器。</li><li>2 CMOS跳线的作用<br>用放电的方法来清除开机密码或者BIOS进入密码。</li><li>3 CMOS跳线的方法<br>将CMOS电池旁边的跳线帽拔出，插入另外一个针和中间针上几秒，然后在拔出插回<br>原来的位置。或者将电池取出，将电池盒上的正负极短路几秒，再把电池安上即可。<h3 id="硬盘接口"><a href="#硬盘接口" class="headerlink" title="硬盘接口"></a>硬盘接口</h3>硬盘的接口非常多，主要有IDE接口、SATA接口、SCSI接口、Fibre Channel接口、IEEE1394接口和USB接口。</li><li>1 IDE接口<br>IDE接口的英文全称为integrated Drive Electronics（电子集成驱动器），它的本意是<br>把盘体与控制器集成在一起的做法减少了硬盘的接口电缆数目与长度，数据传输可靠得到了增强，硬盘控制起来变得更容易。<br>有39针的接口</li><li>2 SCSI接口<br>SCSI的英文全称是small computer system interface（小型计算机系统接口）。它的优势<br>在于支持多种设备，独立的总线使得他对CPU的占用率很低，传输速率也比ATA接口快很多，但价格也高很多。</li><li>3 SRIAL ATA接口<br>用四个针口就完成了所有工作，SATAII接口的传输速率达到了3Gbps，SATAIII接口的传输速率达到了6gbps。</li><li>4 Fibre channel 接口<br>中文名“光纤通道”，它与SCSI接口祸IDE接口有很大不同。</li></ul>]]></content>
      <categories>
        <category>电脑硬件选购</category>
      </categories>
      <tags>
        <tag>电脑主板</tag>
      </tags>
  </entry>
  <entry>
    <title>Plotly与机器学习</title>
    <url>/2019/06/03/Plotly%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><h3 id="用SVM对经典的IRIS数据集（鸢尾花）进行分类"><a href="#用SVM对经典的IRIS数据集（鸢尾花）进行分类" class="headerlink" title="用SVM对经典的IRIS数据集（鸢尾花）进行分类"></a>用SVM对经典的IRIS数据集（鸢尾花）进行分类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 3.1 SVM</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, datasets</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">2</span>] <span class="comment"># 只去前两个特征</span></span><br><span class="line">Y = iris.target      <span class="comment"># 分类标签</span></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># 设定网格大小</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">'linear'</span>)</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line"></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">x_ = np.arange(x_min, x_max, h)</span><br><span class="line">y_ =  np.arange(y_min, y_max, h)</span><br><span class="line">xx, yy = np.meshgrid(x_, y_)</span><br><span class="line">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) <span class="comment"># xx.ravel() 返回连续扁平的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the result into a color plot</span></span><br><span class="line">Z = Z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">cmap = [[<span class="number">1.0</span>,<span class="string">'RGB(10,64,159)'</span>],[<span class="number">0.5</span>,<span class="string">'RGB(5,159,126)'</span>],[<span class="number">1.0</span>,<span class="string">'RGB(159,26,64)'</span>]]</span><br><span class="line"><span class="comment"># 画布</span></span><br><span class="line">trace1 = go.Heatmap(x=x_, y=y_, z=Z,</span><br><span class="line">                    colorscale=cmap,</span><br><span class="line">                    showscale=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">trace2 = go.Scatter(x=X[:, <span class="number">0</span>], y=X[:, <span class="number">1</span>], </span><br><span class="line">                    mode=<span class="string">'markers'</span>,</span><br><span class="line">                    marker=dict(color=Y, </span><br><span class="line">                                colorscale=cmap, </span><br><span class="line">                                showscale=<span class="literal">False</span>,</span><br><span class="line">                                line=dict(color=<span class="string">'black'</span>, width=<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">"3-Class classification using Support Vector Machine with linear kernel"</span>)</span><br><span class="line">fig = go.Figure(data= [trace1, trace2], layout=layout)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\SVM_clustering.html'</span>)</span><br></pre></td></tr></table></figure><p>绘制热力图时，用到了Plotly.graph_objs中的Heatmap函数，函数中的x，y，z三个参数分别对应X轴坐标，Y坐标，以及X轴线与Y轴线相交所得的每个小方块的颜色。<br>如果传递给x参数的大小是a，传递给y参数的大小是b，则传递给z参数的大小为a*b的矩阵。</p><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>本案例使用三种模型（RBF、Linear、Plotlynomial）进行回归实践，并可视化结果，数据使用NumPy随机生成。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment"># 3.2 SVR</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">X = np.sort(<span class="number">5</span> * np.random.rand(<span class="number">40</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - np.random.rand(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">svr_rbf = SVR(kernel=<span class="string">'rbf'</span>, C=<span class="number">1e3</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">svr_lin = SVR(kernel=<span class="string">'linear'</span>, C=<span class="number">1e3</span>)</span><br><span class="line">svr_poly = SVR(kernel=<span class="string">'poly'</span>, C=<span class="number">1e3</span>, degree=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">y_rbf = svr_rbf.fit(X, y).predict(X)</span><br><span class="line">y_lin = svr_lin.fit(X, y).predict(X)</span><br><span class="line">y_poly = svr_poly.fit(X, y).predict(X)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_to_plotly</span><span class="params">(x)</span>:</span></span><br><span class="line">    k = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(x)):</span><br><span class="line">        k.append(x[i][<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">lw = <span class="number">2</span></span><br><span class="line">p1 = go.Scatter(x=data_to_plotly(X), y=y,</span><br><span class="line">                mode=<span class="string">'markers'</span>,</span><br><span class="line">                marker=dict(color=<span class="string">'darkorange'</span>),</span><br><span class="line">                name=<span class="string">'data'</span>)</span><br><span class="line"></span><br><span class="line">p2 = go.Scatter(x=data_to_plotly(X), y=y_rbf, </span><br><span class="line">                mode=<span class="string">'lines'</span>,</span><br><span class="line">                line=dict(color=<span class="string">'navy'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'RBF model'</span>)</span><br><span class="line"></span><br><span class="line">p3 = go.Scatter(x=data_to_plotly(X), y=y_lin, </span><br><span class="line">                mode=<span class="string">'lines'</span>,</span><br><span class="line">                line=dict(color=<span class="string">'cyan'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'Linear model'</span>)</span><br><span class="line"></span><br><span class="line">p4 = go.Scatter(x=data_to_plotly(X), y=y_poly, </span><br><span class="line">                mode=<span class="string">'lines'</span>, </span><br><span class="line">                line=dict(color=<span class="string">'cornflowerblue'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'Polynomial model'</span>)</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">'Support Vector Regression'</span>,</span><br><span class="line">                   hovermode=<span class="string">'closest'</span>,</span><br><span class="line">                   xaxis=dict(title=<span class="string">'data'</span>),</span><br><span class="line">                   yaxis=dict(title=<span class="string">'target'</span>))</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=[p1, p2, p3, p4], layout=layout)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\SVR.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a>聚类问题</h2><p>聚类结果可视化一般分为两部分，一个是画出聚类中心点，另一个是将同类别的数据绘制为同一种颜色。这里仍然使用Scatter函数完成。<br>案列分为三部分，第一部分产生聚类数据，第二部分是使用K-means算法与MiniBatchKmeans算法训练模型；第三部分是绘制三张图片。第一张是K-means分类的结果；<br>第二张是MiniBatchKmeans分类的结果，第三张是突出两种分类结果的差异。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans, KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> pairwise_distances_argmin</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生随机数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">45</span></span><br><span class="line">centers = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">-1</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">-1</span>]]</span><br><span class="line">n_clusters = len(centers)</span><br><span class="line">X, labels_true = make_blobs(n_samples = <span class="number">3000</span>, centers = centers, cluster_std = <span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_samples是待生成的样本的总数</span></span><br><span class="line"><span class="comment"># centers表示类别数</span></span><br><span class="line"><span class="comment"># cluster_std表示每个类别的方差，例如我们希望生成2类数据，其中一类比另一类具有更大的方差，可以将cluster_std设置为[1.0,3.0]。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用K-means算法</span></span><br><span class="line">k_means = KMeans(init = <span class="string">'k-means++'</span>, n_clusters = <span class="number">3</span>, n_init = <span class="number">10</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">k_means.fit(X)</span><br><span class="line">t_batch = time.time() - t0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用MiniBatchKMeans算法</span></span><br><span class="line">mbk = MiniBatchKMeans(init = <span class="string">'k-means++'</span>, n_clusters = <span class="number">3</span>, batch_size = batch_size,</span><br><span class="line">                      n_init = <span class="number">10</span>, max_no_improvement = <span class="number">10</span>, verbose = <span class="number">0</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">mbk.fit(X)</span><br><span class="line">t_mini_batch = time.time() - t0</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">colors = [<span class="string">'#4EACC5'</span>, <span class="string">'#FF9C34'</span>, <span class="string">'#4E9A06'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># We want to have the same colors for the same cluster from the</span></span><br><span class="line"><span class="comment"># MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per</span></span><br><span class="line"><span class="comment"># closest one.</span></span><br><span class="line">k_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line">mbk_means_cluster_centers = np.sort(mbk.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Compute minimum distances between one point and a set of points</span></span><br><span class="line">k_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)</span><br><span class="line">mbk_means_labels = pairwise_distances_argmin(X, mbk_means_cluster_centers)</span><br><span class="line">order = pairwise_distances_argmin(k_means_cluster_centers,</span><br><span class="line">                                  mbk_means_cluster_centers)</span><br><span class="line"><span class="comment">#第一张图</span></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">1</span>, cols=<span class="number">3</span>,</span><br><span class="line">                          print_grid=<span class="literal">False</span>,</span><br><span class="line">                          subplot_titles=(<span class="string">'KMeans&lt;br&gt;train time: %.2fs\ninertia: %f'</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_),</span><br><span class="line">                                          <span class="string">'MiniBatchKmeans&lt;br&gt;train time: %.2fs\ninertia: %f'</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_), </span><br><span class="line">                                          <span class="string">'Difference'</span>))</span><br><span class="line"><span class="comment"># k-means</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> zip(range(n_clusters), colors):</span><br><span class="line">    my_members = k_means_labels == k</span><br><span class="line">    cluster_center = k_means_cluster_centers[k]</span><br><span class="line">    kmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">4</span>))</span><br><span class="line">    kmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                    line=dict(color=<span class="string">'black'</span>,</span><br><span class="line">                                                              width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(kmeans1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    fig.append_trace(kmeans2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis1'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis1'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># minibatchkmeans 第二张图</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> zip(range(n_clusters), colors):</span><br><span class="line">    my_members = mbk_means_labels == order[k]</span><br><span class="line">    cluster_center = mbk_means_cluster_centers[order[k]]</span><br><span class="line">    minibatchkmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                                 showlegend=<span class="literal">False</span>,</span><br><span class="line">                                 mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">4</span>))</span><br><span class="line">    minibatchkmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                                 showlegend=<span class="literal">False</span>,</span><br><span class="line">                                 mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                            line=dict(color=<span class="string">'black'</span>,</span><br><span class="line">                                                                      width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(minibatchkmeans1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fig.append_trace(minibatchkmeans2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis2'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis2'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialise the different array to all False第三张图</span></span><br><span class="line">different = (mbk_means_labels == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(n_clusters):</span><br><span class="line">    different += ((k_means_labels == k) != (mbk_means_labels == order[k]))</span><br><span class="line"></span><br><span class="line">identic = np.logical_not(different)</span><br><span class="line">difference1 = go.Scatter(x=X[identic, <span class="number">0</span>], y=X[identic, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=<span class="string">'#bbbbbb'</span>, size=<span class="number">4</span>))</span><br><span class="line">        </span><br><span class="line">difference2 = go.Scatter(x=X[different, <span class="number">0</span>], y=X[different, <span class="number">1</span>], </span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=<span class="string">'magenta'</span>, size=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(difference1, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">fig.append_trace(difference2, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis3'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis3'</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\K-means.html'</span>)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Plotly分类</tag>
      </tags>
  </entry>
  <entry>
    <title>Plotly金融绘图</title>
    <url>/2019/06/02/Plotly%E9%87%91%E8%9E%8D%E7%BB%98%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="快速绘制k线图"><a href="#快速绘制k线图" class="headerlink" title="快速绘制k线图"></a>快速绘制k线图</h2><h3 id="快速绘制OHLC-美国线-图"><a href="#快速绘制OHLC-美国线-图" class="headerlink" title="快速绘制OHLC(美国线)图"></a>快速绘制OHLC(美国线)图</h3><p>Pandas是金融领域中非常好用且高效的模块。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line">trace = go.Ohlc(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/first_ohlc.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>上面最关键的代码是trace = go.Ohlc….,还可以用如下方式绘制：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory   <span class="keyword">as</span> ff  <span class="comment"># 导入plotly工具箱库中的图像工厂方法并命名为FF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">fig = ff.create_ohlc(df.open, df.high, df.low, df.close, dates=df.index)</span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/first_ohlc_old.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="快速绘制蜡烛图"><a href="#快速绘制蜡烛图" class="headerlink" title="快速绘制蜡烛图"></a>快速绘制蜡烛图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line"></span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/first_candlestick.html'</span>)</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">同理给出以前版本的蜡烛图绘制方法：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory   <span class="keyword">as</span> ff  <span class="comment"># 导入plotly工具箱库中的图像工厂方法并命名为FF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">fig = ff.create_candlestick(df.open, df.high, df.low, df.close, dates=df.index)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/first_candlestick_old.html'</span>)</span><br></pre></td></tr></table></figure><p>go.Candlestick 和go.Ohlc函数用起来简单明了，但是绘图的结果中包含了所有的日期信息</p><h2 id="k线图的优化"><a href="#k线图的优化" class="headerlink" title="k线图的优化"></a>k线图的优化</h2><h3 id="过滤非交易时间"><a href="#过滤非交易时间" class="headerlink" title="过滤非交易时间"></a>过滤非交易时间</h3><p>过滤非交易时间是X轴的操作，这个工作需要在布局管理中进行。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Ohlc(       </span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(</span><br><span class="line">    xaxis=go.XAxis(</span><br><span class="line">        autorange=<span class="literal">True</span>,</span><br><span class="line">        mirror=<span class="string">'all'</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">        showline=<span class="literal">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        showgrid=<span class="literal">True</span>,</span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>),</span><br><span class="line">    yaxis=go.YAxis(</span><br><span class="line">        autorange=<span class="literal">True</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_filter_time.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>最关键的代码是categoryorder=”category ascending”, type=’category’。这两行的代码的意思是，吧X轴的元素<br>看成分类的原素type=’category’，并对其进行升序排序（categoryorder=”category ascending”,）。既然元素的属性<br>为类别，不是时间，也就是没有过滤非交易时间的问题了。<br>对于categoryorder参数，默认是“trace”，即以默认的df.index进行排序。可以是升序也可以是降序（categoryorder=”category descending”），甚至可以自定义<br>顺序（array），这时需要额外的参数支持（categoryarray），用来传递自定义的index。<br>对于蜡烛线的代码如下：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>] = dict(</span><br><span class="line">    xaxis=dict(</span><br><span class="line">        showline=<span class="literal">True</span>, <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line"></span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/candlestick_filter_time.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="设置形状、颜色和注释"><a href="#设置形状、颜色和注释" class="headerlink" title="设置形状、颜色和注释"></a>设置形状、颜色和注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(x=df.index,</span><br><span class="line">                open=df.open,</span><br><span class="line">                high=df.high,</span><br><span class="line">                low=df.low,</span><br><span class="line">                close=df.close,</span><br><span class="line">                increasing=dict(line=dict(color=<span class="string">'#FF0000'</span>)),<span class="comment">#上涨的颜色</span></span><br><span class="line">                decreasing=dict(line=dict(color=<span class="string">'#0C05F9'</span>)) <span class="comment">#下跌的颜色</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line">fig[<span class="string">'layout'</span>] = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'showline'</span>: <span class="literal">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        <span class="string">'tickangle'</span>: <span class="number">-60</span>,</span><br><span class="line">        <span class="string">'categoryorder'</span>: <span class="string">"category ascending"</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'苹果公司K线图'</span>,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'股票价格'</span>&#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [&#123;</span><br><span class="line">        <span class="string">'x0'</span>: <span class="string">'2016-08-22'</span>, <span class="string">'x1'</span>: <span class="string">'2016-10-05'</span>,</span><br><span class="line">        <span class="string">'y0'</span>: <span class="number">0</span>, <span class="string">'y1'</span>: <span class="number">1</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'line'</span>: &#123;<span class="string">'color'</span>: <span class="string">'rgb(30,30,30)'</span>, <span class="string">'width'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'annotations'</span>: [&#123;</span><br><span class="line">        <span class="string">'x'</span>: <span class="string">'2016-09-12'</span>, <span class="string">'y'</span>: <span class="number">0.05</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'showarrow'</span>: <span class="literal">True</span>, <span class="string">'xanchor'</span>: <span class="string">'left'</span>,</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'区间最低价'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/candlestick_style.html'</span>)</span><br></pre></td></tr></table></figure><p>对于颜色设置，上涨设置为红色，下跌设置为蓝色，increasing=dict(line=dict(color=’#FF0000’)),decreasing=dict(line=dict(color=’#0C05F9’))<br>xref(yref) 参数有2个值：paper 和 x（y），如果值为x，则x0、x1对应的值为坐标轴的绝对值，；如果值为paper，则x0、x1对应的值为坐标的相对值。<br>本例中“y0=0，y1=1”表示shapes的Y轴起点在y0=0处、终点在y1=1处。<br>对应OHLC图，其绘制方法是一样的：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Ohlc(x=df.index,</span><br><span class="line">                open=df.open,</span><br><span class="line">                high=df.high,</span><br><span class="line">                low=df.low,</span><br><span class="line">                close=df.close,</span><br><span class="line">                increasing=dict(line=dict(color=<span class="string">'#FF0000'</span>)),</span><br><span class="line">                decreasing=dict(line=dict(color=<span class="string">'#0C05F9'</span>))</span><br><span class="line">                )</span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>] = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'showline'</span>: <span class="literal">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        <span class="string">'tickangle'</span>: <span class="number">-60</span>,</span><br><span class="line">        <span class="string">'categoryorder'</span>: <span class="string">"category ascending"</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'苹果公司K线图'</span>,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'股票价格'</span>&#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [&#123;</span><br><span class="line">        <span class="string">'x0'</span>: <span class="string">'2016-08-22'</span>, <span class="string">'x1'</span>: <span class="string">'2016-10-05'</span>,</span><br><span class="line">        <span class="string">'y0'</span>: <span class="number">0</span>, <span class="string">'y1'</span>: <span class="number">1</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'line'</span>: &#123;<span class="string">'color'</span>: <span class="string">'rgb(30,30,30)'</span>, <span class="string">'width'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'annotations'</span>: [&#123;</span><br><span class="line">        <span class="string">'x'</span>: <span class="string">'2016-09-12'</span>, <span class="string">'y'</span>: <span class="number">0.05</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'showarrow'</span>: <span class="literal">True</span>, <span class="string">'xanchor'</span>: <span class="string">'left'</span>,</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'区间最低价'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_style.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="添加技术指标"><a href="#添加技术指标" class="headerlink" title="添加技术指标"></a>添加技术指标</h3><p>将k线图和5日均线图画在同一张图上。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># K线图</span></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5日均线拟合直线</span></span><br><span class="line">add_line = go.Scatter(</span><br><span class="line">         x=df.index,</span><br><span class="line">         y=df.open,</span><br><span class="line">         name= <span class="string">'Open Vals'</span>,</span><br><span class="line">         line=dict(color=<span class="string">'black'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">data = go.Data([trace,add_line])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(</span><br><span class="line">    xaxis=go.XAxis(</span><br><span class="line">        autorange=<span class="literal">True</span>,</span><br><span class="line">        mirror=<span class="string">'all'</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">        showline=<span class="literal">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        showgrid=<span class="literal">True</span>,</span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>),</span><br><span class="line">    yaxis=go.YAxis(</span><br><span class="line">        autorange=<span class="literal">True</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_add_svg.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="自定义数据的金融绘图"><a href="#自定义数据的金融绘图" class="headerlink" title="自定义数据的金融绘图"></a>自定义数据的金融绘图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">open_data = [<span class="number">33.0</span>, <span class="number">33.3</span>, <span class="number">33.5</span>, <span class="number">33.0</span>, <span class="number">34.1</span>]</span><br><span class="line">high_data = [<span class="number">33.1</span>, <span class="number">33.3</span>, <span class="number">33.6</span>, <span class="number">33.2</span>, <span class="number">34.8</span>]</span><br><span class="line">low_data = [<span class="number">32.7</span>, <span class="number">32.7</span>, <span class="number">32.8</span>, <span class="number">32.6</span>, <span class="number">32.8</span>]</span><br><span class="line">close_data = [<span class="number">33.0</span>, <span class="number">32.9</span>, <span class="number">33.3</span>, <span class="number">33.1</span>, <span class="number">33.1</span>]</span><br><span class="line">dates = [datetime(year=<span class="number">2016</span>, month=<span class="number">10</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2016</span>, month=<span class="number">11</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2016</span>, month=<span class="number">12</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2017</span>, month=<span class="number">1</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2017</span>, month=<span class="number">2</span>, day=<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ohlc</span></span><br><span class="line">trace = go.Candlestick(x=dates, <span class="comment">#画蜡烛图，换成Ohlc就是画美国线</span></span><br><span class="line">                open=open_data,</span><br><span class="line">                high=high_data,</span><br><span class="line">                low=low_data,</span><br><span class="line">                close=close_data)</span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line"></span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/candlestick_custom_data.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="高级金融绘图"><a href="#高级金融绘图" class="headerlink" title="高级金融绘图"></a>高级金融绘图</h2><p>高级金融绘图是用cufflinks进行绘制；<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment"># 5.4 高级金融绘图</span></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 5.4.1 入门案例</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.ohlc()</span><br><span class="line">qf=cf.QuantFig(df,title=<span class="string">'高级金融张图'</span>,legend=<span class="string">'top'</span>,name=<span class="string">'QF'</span>)</span><br><span class="line">qf.add_bollinger_bands()</span><br><span class="line">qf.iplot()</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 5.4.2 综合案例</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.ohlcv()</span><br><span class="line">qf=cf.QuantFig(df,title=<span class="string">'高级金融张图'</span>,legend=<span class="string">'top'</span>,name=<span class="string">'QF'</span>)</span><br><span class="line">qf.add_bollinger_bands()</span><br><span class="line">qf.add_sma([<span class="number">10</span>,<span class="number">20</span>],width=<span class="number">2</span>,color=[<span class="string">'green'</span>,<span class="string">'lightgreen'</span>],legendgroup=<span class="literal">True</span>)</span><br><span class="line">qf.add_rsi(periods=<span class="number">20</span>,color=<span class="string">'java'</span>)</span><br><span class="line">qf.add_bollinger_bands(periods=<span class="number">20</span>,boll_std=<span class="number">2</span>,colors=[<span class="string">'magenta'</span>,<span class="string">'grey'</span>],fill=<span class="literal">True</span>)</span><br><span class="line">qf.add_volume()</span><br><span class="line">qf.add_macd()</span><br><span class="line">qf.iplot()</span><br><span class="line"><span class="comment">#%%</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>金融绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly的动态可视化绘图03</title>
    <url>/2019/05/25/plotly%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE03/</url>
    <content><![CDATA[<h2 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h2><p>1、 基本绘制方法<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment">#----pre def</span></span><br><span class="line">pyplt =  py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------code</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    y = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],</span><br><span class="line">    mode = <span class="string">'markers'</span>,</span><br><span class="line">    marker = dict(</span><br><span class="line">        size = [<span class="number">40</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>],<span class="comment">#定义每个点的大小</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data =  [trace0]</span><br><span class="line">pyplt(data, filename=<span class="string">"bubble_basice_demo.html"</span>)</span><br></pre></td></tr></table></figure><p></p><p>2、 样式的设置<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    y = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],</span><br><span class="line">    mode = <span class="string">'markers'</span>,</span><br><span class="line">    text = [<span class="string">'A&lt;br&gt;size:40'</span>,<span class="string">'B&lt;br&gt;size:60'</span>,<span class="string">'C&lt;br&gt;size:80'</span>,<span class="string">'D&lt;br&gt;size:100'</span>],</span><br><span class="line">    marker = dict(</span><br><span class="line">        color = [<span class="number">120</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">135</span>],</span><br><span class="line">        opacity = [<span class="number">1</span>, <span class="number">0.8</span>, <span class="number">0.6</span>, <span class="number">0.4</span>],</span><br><span class="line">        size = [<span class="number">40</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>],</span><br><span class="line">        showscale = <span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>text指定每一个对应的悬浮文字（<br>表示换行），color指定每个点的颜色，opacity指定每个点的透明度，size指定每个点的大小，showscale = Ture 表示显示右边的颜色条的大小。</p><p>3、 缩放设置<br>调节气泡尺寸大小可以通过sizeref参数进行设置，当sizeref值大于1时，将减小气泡的大小，当小于1时，将增大气泡大小。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    y = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],</span><br><span class="line">    mode = <span class="string">'markers'</span>,</span><br><span class="line">    name = <span class="string">'default'</span>,</span><br><span class="line">    text = [<span class="string">'A&lt;/br&gt;size:40&lt;/br&gt;default'</span>,<span class="string">'B&lt;/br&gt;size:60&lt;/br&gt;default'</span>,<span class="string">'C&lt;/br&gt;size:80&lt;/br&gt;default'</span>,<span class="string">'D&lt;/br&gt;size:100&lt;/br&gt;default'</span>],</span><br><span class="line">    marker = dict(</span><br><span class="line">        size = [<span class="number">400</span>,<span class="number">600</span>,<span class="number">800</span>,<span class="number">1000</span>],</span><br><span class="line">        sizemode = <span class="string">'area'</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">    mode=<span class="string">'markers'</span>,</span><br><span class="line">    name=<span class="string">'default'</span>,</span><br><span class="line">    text=[<span class="string">'A&lt;/br&gt;size:40&lt;/br&gt;sizeref:0.2'</span>, <span class="string">'B&lt;/br&gt;size:60&lt;/br&gt;sizeref:0.2'</span>, <span class="string">'C&lt;/br&gt;size:80&lt;/br&gt;sizeref:0.2'</span>,</span><br><span class="line">          <span class="string">'D&lt;/br&gt;size:100&lt;/br&gt;sizeref:0.2'</span>],</span><br><span class="line">    marker=dict(</span><br><span class="line">        size=[<span class="number">400</span>, <span class="number">600</span>, <span class="number">800</span>, <span class="number">1000</span>],</span><br><span class="line">        sizeref = <span class="number">0.2</span>,</span><br><span class="line">        sizemode=<span class="string">'area'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">    mode=<span class="string">'markers'</span>,</span><br><span class="line">    name=<span class="string">'default'</span>,</span><br><span class="line">    text=[<span class="string">'A&lt;/br&gt;size:40&lt;/br&gt;sizeref:2'</span>, <span class="string">'B&lt;/br&gt;size:60&lt;/br&gt;sizeref:2'</span>, <span class="string">'C&lt;/br&gt;size:80&lt;/br&gt;sizeref:2'</span>,</span><br><span class="line">          <span class="string">'D&lt;/br&gt;size:100&lt;/br&gt;sizeref:2'</span>],</span><br><span class="line">    marker=dict(</span><br><span class="line">        size=[<span class="number">400</span>, <span class="number">600</span>, <span class="number">800</span>, <span class="number">1000</span>],</span><br><span class="line">        sizeref = <span class="number">2</span>,</span><br><span class="line">        sizemode=<span class="string">'area'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>sizeref=2表示将气泡大小设置为原来的1/2,；参数sizemode有diameter和area两个值，diameter表示按直径缩放，area表示按面积缩放</p><p>参数解读 ：<br>详情参考：<a href="https://plot.ly/python/reference/#scatter-marker-sizeref" target="_blank" rel="noopener">https://plot.ly/python/reference/#scatter-marker-sizeref</a></p><ul><li>text：列表，元素为相应节点的悬浮文字内容</li><li>marker：数据节点参数，包括大小，颜色，格式等<br>size：列表，元素为相应节点的悬浮文字内容<br>sizeref：缩放比例，如设置为2，则缩小为原来的1/2<br>sizemode：缩放的标准，默认以diameter（直径缩放），也可以area（面积缩放）。<br>color：列表，元素为相应节点的颜色<br>showscale：默认为FALSE，不显示右侧的颜色条，TRUE显示<br>opacity：列表，元素为0~1之间的数，表示相应节点的透明度</li></ul><h2 id="线形图"><a href="#线形图" class="headerlink" title="线形图"></a>线形图</h2><p>1、 基本案例<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">profit_rate = [<span class="number">-0.001</span>,<span class="number">-0.013</span>,<span class="number">0.004</span>,<span class="number">0.002</span>,<span class="number">0.003</span>,<span class="number">-0.001</span>,<span class="number">-0.009</span>,<span class="number">0.0</span>,<span class="number">0.007</span>,<span class="number">-0.005</span>,<span class="number">0.0</span>,<span class="number">0.001</span>,<span class="number">-0.006</span>,<span class="number">-0.006</span>,<span class="number">-0.009</span>,<span class="number">-0.013</span>,<span class="number">0.005</span>,<span class="number">0.007</span>,<span class="number">0.004</span>,<span class="number">-0.006</span>,</span><br><span class="line"><span class="number">-0.009</span>,<span class="number">-0.004</span>,<span class="number">0.015</span>,<span class="number">0.007</span>,<span class="number">0.001</span>,<span class="number">0.003</span>,<span class="number">-0.009</span>,<span class="number">-0.005</span>,<span class="number">0.001</span>,<span class="number">-0.008</span>,<span class="number">-0.016</span>,<span class="number">0.002</span>,<span class="number">-0.013</span>,<span class="number">-0.009</span>,<span class="number">-0.014</span>,<span class="number">0.009</span>,<span class="number">-0.003</span>,<span class="number">0.002</span>,<span class="number">-0.001</span>,<span class="number">0.011</span>,<span class="number">0.004</span>]</span><br><span class="line"></span><br><span class="line">date = pd.date_range(start = <span class="string">'3/1/2017'</span>, end = <span class="string">'4/30/2017'</span>)</span><br><span class="line"></span><br><span class="line">trace = [go.Scatter(</span><br><span class="line">    x =date,</span><br><span class="line">    y = profit_rate</span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line">layout = dict(</span><br><span class="line">    title = <span class="string">'浦发银行20170301-20170428涨跌幅变化'</span>,</span><br><span class="line">    xaxis =dict(title = <span class="string">'Date'</span>),</span><br><span class="line">    yaxis = dict(title = <span class="string">'profit_rate'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = dict(data = trace, layout = layout)</span><br><span class="line">pyplt(fig, filename=<span class="string">'basic-line.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="数据缺口与连接"><a href="#数据缺口与连接" class="headerlink" title="数据缺口与连接"></a>数据缺口与连接</h3><p>数据集往往并不完美，可能有缺失的数据，在plotly中可以通过设置Scatter函数中的connectgaps属性来显示这些数据缺口或对缺口进行连接。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">month = [<span class="string">'January'</span>, <span class="string">'February'</span>,<span class="string">'March'</span>,<span class="string">'April'</span>,<span class="string">'May'</span>,<span class="string">'June'</span>,<span class="string">'July'</span>,<span class="string">'August'</span>,<span class="string">'September'</span>,<span class="string">'October'</span>,<span class="string">'November'</span>,<span class="string">'December'</span>] <span class="comment">#x轴坐标</span></span><br><span class="line">high_2000 = [<span class="number">32.5</span>,<span class="number">37.6</span>,<span class="number">49.9</span>,<span class="number">53.0</span>,<span class="literal">None</span>,<span class="number">75.4</span>,<span class="number">76.5</span>,<span class="number">76.6</span>,<span class="number">70.7</span>,<span class="number">60.6</span>,<span class="number">45.1</span>,<span class="number">29.3</span>]</span><br><span class="line">low_2000 = [<span class="number">13.8</span>,<span class="number">22.3</span>,<span class="number">32.5</span>,<span class="number">37.2</span>,<span class="literal">None</span>,<span class="number">56.1</span>,<span class="number">57.7</span>,<span class="number">58.3</span>,<span class="number">51.2</span>,<span class="number">42.8</span>,<span class="number">31.6</span>,<span class="number">15.9</span>]</span><br><span class="line">high_2007 = [<span class="number">36.5</span>,<span class="number">26.6</span>,<span class="number">43.6</span>,<span class="number">52.3</span>,<span class="literal">None</span>,<span class="number">81.4</span>,<span class="number">80.5</span>,<span class="number">82.2</span>,<span class="number">76.0</span>,<span class="number">67.3</span>,<span class="number">46.1</span>,<span class="number">35.0</span>]</span><br><span class="line">low_2007 = [<span class="number">23.6</span>,<span class="number">14.0</span>,<span class="number">27.0</span>,<span class="number">36.8</span>,<span class="literal">None</span>,<span class="number">57.7</span>,<span class="number">58.9</span>,<span class="number">61.2</span>,<span class="number">53.3</span>,<span class="number">48.5</span>,<span class="number">31.0</span>,<span class="number">23.6</span>]</span><br><span class="line">high_2014 = [<span class="number">28.8</span>,<span class="number">28.5</span>,<span class="number">37.0</span>,<span class="number">56.3</span>,<span class="literal">None</span>,<span class="number">79.7</span>,<span class="number">78.5</span>,<span class="number">77.8</span>,<span class="number">74.1</span>,<span class="number">62.6</span>,<span class="number">45.3</span>,<span class="number">39.9</span>]</span><br><span class="line">low_2014 = [<span class="number">12.7</span>,<span class="number">14.3</span>,<span class="number">18.6</span>,<span class="number">35.5</span>,<span class="literal">None</span>,<span class="number">58.0</span>,<span class="number">60.0</span>,<span class="number">58.6</span>,<span class="number">51.7</span>,<span class="number">45.2</span>,<span class="number">32.2</span>,<span class="number">29.1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x =month,</span><br><span class="line">    y = high_2014,</span><br><span class="line">    name = <span class="string">'High 2014'</span>,</span><br><span class="line">    line = dict(</span><br><span class="line">        color = (<span class="string">'rgb(205, 12, 24)'</span>),</span><br><span class="line">        width = <span class="number">4</span></span><br><span class="line">    ) ,</span><br><span class="line">    connectgaps = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=low_2014,</span><br><span class="line">    name=<span class="string">'low_2014 2014'</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(22, 96, 167)'</span>),</span><br><span class="line">        width=<span class="number">4</span></span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=high_2007,</span><br><span class="line">    name=<span class="string">'high_2007 '</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(205, 12, 24)'</span>),</span><br><span class="line">        width=<span class="number">4</span>,</span><br><span class="line">        dash = <span class="string">'dash'</span>    <span class="comment">#虚线（断线），dot虚线（点），dashdot</span></span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=low_2007,</span><br><span class="line">    name=<span class="string">'low_2007'</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(22, 96, 167)'</span>),</span><br><span class="line">        width=<span class="number">4</span>,</span><br><span class="line">        dash = <span class="string">'dash'</span></span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">trace4 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=high_2000,</span><br><span class="line">    name=<span class="string">'high_2000'</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(205, 12, 24)'</span>),</span><br><span class="line">        width=<span class="number">4</span>,</span><br><span class="line">        dash = <span class="string">'dot'</span></span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace5 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=low_2000,</span><br><span class="line">    name=<span class="string">'low_2000'</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(22, 96, 167)'</span>),</span><br><span class="line">        width=<span class="number">4</span>,</span><br><span class="line">        dash = <span class="string">'dot'</span></span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0, trace1, trace2, trace3, trace4,trace5]</span><br><span class="line"></span><br><span class="line">layout = dict(</span><br><span class="line">    title = <span class="string">'Average High and Low Temperatures in New York'</span>,</span><br><span class="line">    xaxis =dict(title = <span class="string">'Month'</span>),</span><br><span class="line">    yaxis = dict(title = <span class="string">'Temperature(degrees F)'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = dict(data = data, layout = layout)</span><br><span class="line">pyplt(fig, filename=<span class="string">'styled-line.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>数据中缺失的数据设置为None。在Scatter函数中，设置connectgaps属性为False，表示不连接，显示接口，Ture表示为连接。Scatter函数中的line属性用于对线形图形的样式控制；<br>color控制颜色，width设置宽度；dash用于设置类型，dash表示有短线组成的虚线，dot表示由点组成的虚线，dashdot表示由点和短线组成的虚线。</p><h3 id="数据插值"><a href="#数据插值" class="headerlink" title="数据插值"></a>数据插值</h3><p>调整Scatter函数line属性中的shape值可以对插值的方法进行控制，完成数据点的插值设置。插值的方法就是根据已有的零散数据点，找到一条满足一定条件的曲线，使之经过全部的数据点。<br>plotly提供6种插值的方法。分别是‘linear’，‘spline’，‘hv’，‘vh’，‘hvh’，‘vhv’。如：shape：‘spline’<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trace5 = go.Scatter(</span><br><span class="line">    x=month,</span><br><span class="line">    y=low_2000,</span><br><span class="line">    name=<span class="string">'low_2000'</span>,</span><br><span class="line">    line=dict(</span><br><span class="line">        color=(<span class="string">'rgb(22, 96, 167)'</span>),</span><br><span class="line">        width=<span class="number">4</span>,</span><br><span class="line">        shape = <span class="string">'linear'</span> <span class="comment">#直线连接</span></span><br><span class="line">        </span><br><span class="line">    ),</span><br><span class="line">    connectgaps=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><h3 id="填充线形图"><a href="#填充线形图" class="headerlink" title="填充线形图"></a>填充线形图</h3><p>要绘制恒宝股份在一段时间内的最高价与最低价，每条可见线对应股票的开盘价，线条的上影线对应当天的最高价，线条的下影线对应当天的最低价。<br>要绘制这样的图，先把其拆分为两部分，一部分是对3条可见线的绘制，另一部分是对三条填充线进行绘制。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#完成了对三条填充线进行绘制</span></span><br><span class="line">x = x + x_rev,<span class="comment">#（x只给了10个数据）是从0到10，再从10到1的逆序</span></span><br><span class="line">y = y1_upper+y1_lower, <span class="comment"># 从第一天的最高价到第10天的最高价，再从第10天到第1天的最高价的序列</span></span><br><span class="line">fill = <span class="string">'tozerox'</span>,</span><br><span class="line">fillcolor = <span class="string">'raba(0,0,205,0.2)'</span>,</span><br><span class="line">line = go.Line(color = <span class="string">'transparent'</span>)<span class="comment">#color属性为 'transparent'，对线条进行隐藏</span></span><br><span class="line"><span class="comment">#其中y1_lower = y1_lower[ : : -1] 逆序，x_rev = x[::-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置数据轨迹</span></span><br><span class="line">trace1  = go.Scatter(</span><br><span class="line">    x = x + x_rev,<span class="comment">#（x只给了10个数据）是从0到10，再从10到1的逆序</span></span><br><span class="line">    y = y1_upper+y1_lower, <span class="comment"># 从第一天的最高价到第10天的最高价，再从第10天到第1天的最高价的序列</span></span><br><span class="line">    fill = <span class="string">'tozerox'</span>,</span><br><span class="line">    fillcolor = <span class="string">'raba(0,0,205,0.2)'</span>,</span><br><span class="line">    line = go.Line(color = <span class="string">'transparent'</span>)<span class="comment">#color属性为 'transparent'，对线条进行隐藏</span></span><br><span class="line">    showlegend = <span class="literal">False</span>,<span class="comment">#布尔变量，用于切换图标显示</span></span><br><span class="line">    name = <span class="string">'恒宝股份'</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">trace2  = go.Scatter(</span><br><span class="line">    x = x,</span><br><span class="line">    y = y1,</span><br><span class="line">    line = go.Line(color = <span class="string">'reb(0,0,205)'</span>)</span><br><span class="line">    mode = <span class="string">'line'</span>,</span><br><span class="line">    name = <span class="string">'恒宝股份'</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="comment">#布局</span></span><br><span class="line">layout = go.Layout(</span><br><span class="line">    paper_bgcolor = <span class="string">'rgb(255,255,255)'</span>,</span><br><span class="line">    plot_bgcolor = <span class="string">'rgb(229,229,229)'</span>,</span><br><span class="line">    xaxis = go.XAxis(</span><br><span class="line">            gridcolor = <span class="string">'rgb(255,255,255)'</span>,</span><br><span class="line">            range = [<span class="number">1</span>,<span class="number">10</span>],</span><br><span class="line">            showgrid = Ture,</span><br><span class="line">            showline = <span class="literal">False</span>,</span><br><span class="line">            showticklabels = TRUE,</span><br><span class="line">            tickcolor = <span class="string">'rgb(127,127,127)'</span>,</span><br><span class="line">            ticks = <span class="string">'outside'</span>,</span><br><span class="line">            zeroline = <span class="literal">False</span></span><br><span class="line">        ),</span><br><span class="line">    yaxis = go.YAxis(</span><br><span class="line">        gridcolor = <span class="string">'rgb(255,255,255)'</span>,</span><br><span class="line">        showgrid = Ture,</span><br><span class="line">        showline = <span class="literal">False</span>,</span><br><span class="line">        showticklabels = TRUE,<span class="comment">#显示坐标标记</span></span><br><span class="line">        tickcolor = <span class="string">'rgb(127,127,127)'</span>,</span><br><span class="line">        ticks = <span class="string">'outside'</span>,</span><br><span class="line">        zeroline = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly基础图形</tag>
      </tags>
  </entry>
  <entry>
    <title>ploty高级图形01</title>
    <url>/2019/05/28/ploty%E9%AB%98%E7%BA%A7%E5%9B%BE%E5%BD%A201/</url>
    <content><![CDATA[<h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#----pre def</span></span><br><span class="line">pyplt =  py.offline.plot</span><br><span class="line"></span><br><span class="line">x_datetime = [datetime(year=<span class="number">2013</span>,month=<span class="number">10</span>,day=<span class="number">4</span>),datetime(year=<span class="number">2013</span>,month=<span class="number">11</span>,day=<span class="number">5</span>),datetime(year=<span class="number">2013</span>,month=<span class="number">12</span>,day=<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">x_string = [<span class="string">'2013-10-04'</span>,<span class="string">'2013-11-05'</span>,<span class="string">'2013-12-06'</span>]<span class="comment">#时间格式的字符串</span></span><br><span class="line"></span><br><span class="line">trace_time = go.Scatter(x=x_datetime,y=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>],name = <span class="string">'trace_datetime'</span>)</span><br><span class="line">trace_string = go.Scatter(x=x_string,y=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>],name=<span class="string">'trace_string'</span>)</span><br><span class="line"></span><br><span class="line">data = [trace_time,trace_string]</span><br><span class="line">pyplt(data,filename=<span class="string">'timeSeries.html'</span>)</span><br></pre></td></tr></table></figure><p>从代码可以看出，只要传入的x是日期或时间格式的字符串，plotly就会自动识别为时间格式。</p><h3 id="时间范围约束"><a href="#时间范围约束" class="headerlink" title="时间范围约束"></a>时间范围约束</h3><p>有时候我们只想展示部分时间范围内的绘图结果，这时通过传递一个range参数即可实现这个功能<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#----pre def</span></span><br><span class="line">pyplt =  py.offline.plot</span><br><span class="line"></span><br><span class="line">x_datetime = [datetime(year=<span class="number">2013</span>,month=<span class="number">10</span>,day=<span class="number">4</span>),datetime(year=<span class="number">2013</span>,month=<span class="number">11</span>,day=<span class="number">5</span>),datetime(year=<span class="number">2013</span>,month=<span class="number">12</span>,day=<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_unix_time</span><span class="params">(dt)</span>:</span></span><br><span class="line">    <span class="string">''''</span></span><br><span class="line"><span class="string">    :param dt:datetime 类型的时间戳</span></span><br><span class="line"><span class="string">    ：return:dt相对于utc起始时间差别的毫秒数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    epoch = datetime.utcfromtimestamp(<span class="number">0</span>) <span class="comment">#获取0时刻对应的utc（世界标准时间）</span></span><br><span class="line">    <span class="keyword">return</span> (dt - epoch).total_seconds() * <span class="number">1000</span> <span class="comment">#计算传入时间相对于utc起始时间的毫秒数</span></span><br><span class="line"></span><br><span class="line">data = [go.Scatter(</span><br><span class="line">    x = x_datetime,</span><br><span class="line">    y = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line">layout = go.Layout(xaxis = dict(</span><br><span class="line">    range = [to_unix_time(datetime(<span class="number">2013</span>,<span class="number">10</span>,<span class="number">17</span>)),</span><br><span class="line">          to_unix_time(datetime(<span class="number">2013</span>,<span class="number">11</span>,<span class="number">20</span>))]</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=data,layout=layout)</span><br><span class="line">pyplt(data,filename=<span class="string">'timeSeries.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>主要是在x轴的布局上限制x的取值范围。</p><h3 id="滑动选择控件"><a href="#滑动选择控件" class="headerlink" title="滑动选择控件"></a>滑动选择控件</h3><p>滑块与选择器主要是通过Layout布局函数来实现的。对于选择器，主要是在xais.rangeselector.buttons中定义一些参数，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xaxis = dict(</span><br><span class="line">      rangeselector = dict(</span><br><span class="line">          buttons=list([</span><br><span class="line">              dict(count = <span class="number">1</span>,</span><br><span class="line">                  label = <span class="string">'1m'</span>,</span><br><span class="line">                  step = <span class="string">'month'</span></span><br><span class="line">                  stepmode = <span class="string">'backward'</span></span><br><span class="line">              ),</span><br><span class="line">          ]) </span><br><span class="line">      )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>(1) xaxis 表示对x轴进行定义：rangeselector表示对x轴的选择器进行定义；button表示选择器的按钮，是一个列表形式，每个列表元素都是一个选择器按钮。<br>(2) “count = 1,step = ‘month’ “表示这个选择器覆盖的时间长度是“1xmonth”，即一个月，“label=‘1m’”表示标签为1m<br>(3) stepmode 有以下两种使用方法</p><ul><li>当stepmode=’backward’时，表示从后往前推进countxstep时间，列如，当count=1，step=‘year’时，表示时间范围将近一年。</li><li>当stepmode = ‘todate’时，一般只有一种方用法，就是计算今年以来的时间。例如，当count=1，step=‘year’时，表示范围从最后日期到最后日期所在的年初，而不是一年。</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> FF</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#----pre def</span></span><br><span class="line">pyplt =  py.offline.plot</span><br><span class="line"></span><br><span class="line">data_matrix = [[<span class="string">'国家'</span>,<span class="string">'年份'</span>,<span class="string">'人口'</span>],</span><br><span class="line">               [<span class="string">'中国'</span>,<span class="number">2000</span>, <span class="number">1267430000</span>],</span><br><span class="line">               [<span class="string">'美国'</span>,<span class="number">2000</span>, <span class="number">282200000</span>],</span><br><span class="line">               [<span class="string">'加拿大'</span>,<span class="number">2000</span>,<span class="number">27790000</span>],</span><br><span class="line">               [<span class="string">'中国'</span>, <span class="number">2000</span>, <span class="number">1267430000</span>],</span><br><span class="line">               [<span class="string">'美国'</span>, <span class="number">2000</span>, <span class="number">282200000</span>],</span><br><span class="line">               [<span class="string">'加拿大'</span>, <span class="number">2000</span>, <span class="number">27790000</span>],</span><br><span class="line">               [<span class="string">'加拿大'</span>,<span class="number">2000</span>,<span class="number">27790000</span>],</span><br><span class="line">               [<span class="string">'中国'</span>, <span class="number">2000</span>, <span class="number">1267430000</span>],</span><br><span class="line">               [<span class="string">'美国'</span>, <span class="number">2000</span>, <span class="number">282200000</span>],</span><br><span class="line">               [<span class="string">'加拿大'</span>, <span class="number">2000</span>, <span class="number">27790000</span>]</span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">table = FF.create_table(data_matrix)</span><br><span class="line">pyplt(table,filename=<span class="string">'simple_table'</span>,show_link=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>代码用到了figure_factory类，这个类存储了除之前的基础绘图方法的一些高级绘图方法。</p><h3 id="添加链接"><a href="#添加链接" class="headerlink" title="添加链接"></a>添加链接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_matrix = [</span><br><span class="line">    [<span class="string">'user'</span>,<span class="string">'Language'</span>,<span class="string">'chart Type'</span>,<span class="string">'#of Views'</span>],</span><br><span class="line">    [<span class="string">'&lt;a href="https://plot.ly/~empet/folder/home"&gt;empet&lt;/a&gt;'</span>,......         ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>运用HTML语言中<a> 标签的herf属性即可：’<a href="https://plot.ly/~empet/folder/home" target="_blank" rel="noopener">empet</a>‘</a></p><h3 id="使用Pandas"><a href="#使用Pandas" class="headerlink" title="使用Pandas"></a>使用Pandas</h3><p>数据分析用Pandas，<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'day01.csv'</span>,index_col=[<span class="number">0</span>])</span><br><span class="line">df_sample = df[<span class="number">100</span>:<span class="number">120</span>]</span><br><span class="line"></span><br><span class="line">table = FF.create_table(df_sample,index=<span class="literal">True</span>,index_title=<span class="string">'Date'</span>)</span><br><span class="line">pyplt(table,filename=<span class="string">'simple_table.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>Pandas的数据结构DataFrame是一种表格结构。</p><h3 id="改变大小与颜色"><a href="#改变大小与颜色" class="headerlink" title="改变大小与颜色"></a>改变大小与颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colorscale = [[<span class="number">0</span>,<span class="string">'#4d004c'</span>],[<span class="number">.5</span>, <span class="string">'#f2e5ff'</span>],[<span class="number">1</span>,<span class="string">'#ffffff'</span>]]</span><br><span class="line">fontcolor = [<span class="string">'#FCFCFC'</span>,<span class="string">'#00EE00'</span>,<span class="string">'#FF3030'</span>]</span><br><span class="line"></span><br><span class="line">table = FF.create_table(df_sample,index=<span class="literal">True</span>,colorscale=colorscale,font_color = fontcolor)</span><br><span class="line">table.layout.width=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置文本大小</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(table.layout.annotations)):</span><br><span class="line">    table.layout.annotations[i].font.size = <span class="number">10</span> + (i % <span class="number">50</span>)*<span class="number">0.2</span></span><br></pre></td></tr></table></figure><p>(1) colorscale参数是一个列表，是[[0,’#4d004c’],[.5, ‘#f2e5ff’],[1,’#ffffff’]]表示表头的颜色是#4d004c; [.5, ‘#f2e5ff’] 除表头外，表格的奇数行的背景颜色是’#f2e5ff’，同理[1,’#ffffff’]表示偶数行的背景色是’#ffffff’<br>(2) fontcolors参数时一个列表，它既可以是一个元素的列表，表示所有表格的文字使用一种颜色（默认是[‘#000000’]）,也可以是三个元素的列表，分别宝石表头，奇数列，偶数列的文字颜色，甚至可以是一个与表格行数相同的列表。可以为每一行自定义一个颜色。<br>(3) table.layout.width=1000 把表格的宽度设置为1000</p><h3 id="表格与图"><a href="#表格与图" class="headerlink" title="表格与图"></a>表格与图</h3><p>将表格与图展示在一张图上。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> FF</span><br><span class="line">  <span class="comment">#创建表格</span></span><br><span class="line">  figure = FF.create_table(table_data, height_constant = <span class="number">60</span>)</span><br><span class="line">  <span class="comment">#吧图添加到figure中</span></span><br><span class="line">  figure[<span class="string">'data'</span>].extend(go.Data([trace,trace1]))</span><br><span class="line"><span class="comment">#对两幅图进行布局管理</span></span><br><span class="line">figure.layout.xaxis.update(&#123;<span class="string">'domain'</span>:[[<span class="number">0</span>,<span class="number">.5</span>]&#125;)</span><br><span class="line">figure.layout.xaxis2.update(&#123;<span class="string">'domain'</span>:[<span class="number">0.6</span>, <span class="number">1.</span>]&#125;)</span><br><span class="line"><span class="comment">#设置第二幅图的y轴与x的对应。把字典figure.layout.yaxis2由空值变为&#123;‘anchor’:'x2','title':'分值'&#125;，其中&#123;‘anchor’:'x2'&#125;的意思是yaxis2坐标轴是与xaxis2坐标轴对应的。</span></span><br><span class="line">figure.layout.yaxis2,update(&#123;‘anchor’:<span class="string">'x2'</span>&#125;)  </span><br><span class="line">figure.layout.yaxis2,update(&#123;<span class="string">'title'</span>:<span class="string">'分值'</span>&#125;) </span><br><span class="line"><span class="comment">#设置figure的边界与标题</span></span><br><span class="line">figure.layout.margin.update(&#123;<span class="string">'t'</span>:<span class="number">50</span>, <span class="string">'b'</span>:<span class="number">100</span>&#125;)<span class="comment">#距离顶部50个单位，距离底部100个单位</span></span><br><span class="line">figure.layout.update（‘title’:<span class="string">'xxxxxxxx'</span>）<span class="comment">#标题</span></span><br></pre></td></tr></table></figure><p></p><h2 id="多个坐标轴"><a href="#多个坐标轴" class="headerlink" title="多个坐标轴"></a>多个坐标轴</h2><p>一幅图中多个图表的数据可能相差很大，所以要以不同的坐标标定。</p><h3 id="双坐标轴"><a href="#双坐标轴" class="headerlink" title="双坐标轴"></a>双坐标轴</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">'Y 轴双轴示例'</span>，</span><br><span class="line">    yaxis = dict(title = <span class="string">'yaxis 标题'</span>)，</span><br><span class="line">    yaxis2 = dict(title = <span class="string">'yaxis 标题'</span>,titlefont = dict(color = <span class="string">'rgb(148, 103, 189)'</span>),</span><br><span class="line">    tickfont = dict(color = <span class="string">'rgb(148, 103, 189)'</span>),</span><br><span class="line">    overlaying = <span class="string">'y'</span>,side = <span class="string">'right'</span>),</span><br><span class="line">    </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>关键的代码：<br>titlefont用于设置标题格式，这里谁知yaxis2的标题颜色<br>tickfont 用于设置刻度格式，这里谁知yaxis2的标题颜色<br>overlaying是覆盖的意思，y表示覆盖y轴。<br>side的参数为top，bottom，left，right中的一种，表示坐标轴的位置，right表示右坐标轴，即yaxis2为右坐标轴。</p><h4 id="多坐标轴"><a href="#多坐标轴" class="headerlink" title="多坐标轴"></a>多坐标轴</h4><p>多坐标轴跟双坐标类似，在布局上多几个坐标轴的参数。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    layout = go.Layout(</span><br><span class="line">        title = <span class="string">'Y 轴双轴示例'</span>，</span><br><span class="line">        yaxis = dict(title = <span class="string">'yaxis 标题'</span>)，</span><br><span class="line">        yaxis2 = dict(title = <span class="string">'yaxis 标题'</span>,titlefont = dict(color = <span class="string">'rgb(148, 103, 189)'</span>),</span><br><span class="line">        tickfont = dict(color = <span class="string">'rgb(148, 103, 189)'</span>),</span><br><span class="line">        overlaying = <span class="string">'y'</span>,</span><br><span class="line">        side = <span class="string">'right'</span>,</span><br><span class="line">        anchor = ‘free’,</span><br><span class="line">        position = <span class="number">0.85</span></span><br><span class="line">        ),</span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">    比较重要的是下面几行：</span><br><span class="line">    overlaying = <span class="string">'y'</span>,</span><br><span class="line">    side = <span class="string">'right'</span>,</span><br><span class="line">    anchor = ‘free’,表示要绑定的坐标轴，如果为free，则其坐标轴由position的值指定，</span><br><span class="line">    position = <span class="number">0.85</span> <span class="comment">#表示字啊0.85这个位置上是yaxis2所在的位置。</span></span><br><span class="line"><span class="comment">## 多子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 双子图</span></span><br><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line">fig = tools.make_subplots(row =<span class="number">2</span>,cols=<span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace1,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>].update(height=<span class="number">600</span>, width=<span class="number">600</span>, title=<span class="string">'i &lt; 3 subplots'</span>)</span><br></pre></td></tr></table></figure><p></p><p>方法二：</p><p>用domain参数；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis = dict(</span><br><span class="line">        domain=[<span class="number">0</span>,<span class="number">0.7</span>]</span><br><span class="line">     ),</span><br><span class="line">    xaxis2=dict(</span><br><span class="line">        domain = [<span class="number">0.8</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    yaxis2=dict(</span><br><span class="line">        anchor=<span class="string">'x2'</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="多子图"><a href="#多子图" class="headerlink" title="多子图"></a>多子图</h3><p>方法一：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#用make_subplot</span></span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line">fig = tools.make_subplots(row =<span class="number">2</span>,cols=<span class="number">2</span>，subplot_titles = (<span class="string">'Plot1'</span>, <span class="string">'Plot2'</span>, <span class="string">'Plot3'</span>, <span class="string">'Plot4'</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis = dict(</span><br><span class="line">        domain=[<span class="number">0</span>,<span class="number">0.45</span>]</span><br><span class="line">     ),</span><br><span class="line">     yaxis = dict(</span><br><span class="line">        domain=[<span class="number">0</span>,<span class="number">0.45</span>]</span><br><span class="line">     ),</span><br><span class="line">    xaxis2=dict(</span><br><span class="line">        domain = [<span class="number">0.55</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    xaxis3=dict(</span><br><span class="line">        domain=[<span class="number">0</span>,<span class="number">0.45</span>]</span><br><span class="line">        anchor=<span class="string">'y3'</span></span><br><span class="line">    )</span><br><span class="line">    xaxis4=dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>,<span class="number">1</span>]</span><br><span class="line">        anchor=<span class="string">'y4'</span></span><br><span class="line">    )</span><br><span class="line">       yaxis2 = dict(</span><br><span class="line">        domain=[<span class="number">0</span>,<span class="number">0.45</span>]</span><br><span class="line">        anchor=<span class="string">'x2'</span></span><br><span class="line">     ),</span><br><span class="line">     yaxis3 = dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>,<span class="number">1</span>]</span><br><span class="line">     ),</span><br><span class="line">     yaxis4 = dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>,<span class="number">1</span>]</span><br><span class="line">         anchor=<span class="string">'x4'</span></span><br><span class="line">     ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="分割视图区间"><a href="#分割视图区间" class="headerlink" title="分割视图区间"></a>分割视图区间</h3><p>想为每个子图定义自己的大小，就涉及视图区间的分配问题，make_subplots方法为解决这个问题封装了一个参数specs，这个参数的简单使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">2</span>, cols=<span class="number">2</span>, specs=[[&#123;&#125;, &#123;&#125;], [&#123;<span class="string">'colspan'</span>: <span class="number">2</span>&#125;, <span class="literal">None</span>]],</span><br><span class="line">                          subplot_titles=(<span class="string">'First Subplot'</span>,<span class="string">'Second Subplot'</span>, <span class="string">'Third Subplot'</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace0, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(showlegend=<span class="literal">False</span>, title=<span class="string">'Specs with Subplot Title'</span>)</span><br></pre></td></tr></table></figure><p>spes参数定义了如何分配视图区间，本案例中的specs=[[{}, {}], [{‘colspan’: 2, None]}，表示第一行的两个子图平均分配区间，第二行的第一个子图占据2列的区间，<br>更复杂的如下：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = tools.make_subplots(rows=<span class="number">5</span>, cols=<span class="number">2</span>,</span><br><span class="line">                          specs=[[&#123;&#125;, &#123;<span class="string">'rowspan'</span>: <span class="number">2</span>&#125;],</span><br><span class="line">                                 [&#123;&#125;, <span class="literal">None</span>],</span><br><span class="line">                                 [&#123;<span class="string">'rowspan'</span>: <span class="number">2</span>, <span class="string">'colspan'</span>: <span class="number">2</span>&#125;, <span class="literal">None</span>],</span><br><span class="line">                                 [<span class="literal">None</span>, <span class="literal">None</span>],</span><br><span class="line">                                 [&#123;&#125;, &#123;&#125;]],</span><br><span class="line">                          print_grid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace5, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace6, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(height=<span class="number">600</span>, width=<span class="number">1000</span>, title=<span class="string">'specs examples'</span>)</span><br><span class="line">```  </span><br><span class="line">  把<span class="number">5</span>*<span class="number">2</span>的视图区间分配给<span class="number">6</span>个子图。</span><br><span class="line"><span class="comment">### 子图共享坐标轴</span></span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">```python</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">    y=[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">    xaxis=<span class="string">'x2'</span>,</span><br><span class="line">    yaxis=<span class="string">'y'</span></span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>],</span><br><span class="line">    xaxis=<span class="string">'x'</span>,</span><br><span class="line">    yaxis=<span class="string">'y3'</span></span><br><span class="line">)</span><br><span class="line">trace4 = go.Scatter(</span><br><span class="line">    x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>],</span><br><span class="line">    y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>],</span><br><span class="line">    xaxis=<span class="string">'x4'</span>,</span><br><span class="line">    yaxis=<span class="string">'y4'</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2, trace3, trace4]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis=dict(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>]</span><br><span class="line">    ),</span><br><span class="line">    yaxis=dict(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>]</span><br><span class="line">    ),</span><br><span class="line">    xaxis2=dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    xaxis4=dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">        anchor=<span class="string">'y4'</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis3=dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    yaxis4=dict(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">        anchor=<span class="string">'x4'</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/subplot_shared_axes.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>方法二：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">    y=[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>],</span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>],</span><br><span class="line">    y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">2</span>, cols=<span class="number">2</span>, shared_yaxes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace0, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(height=<span class="number">600</span>, width=<span class="number">600</span>,</span><br><span class="line">                     title=<span class="string">'Multiple Subplots with Shared Y-Axes'</span>)</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/subplot_share_yaxes.html'</span>)</span><br></pre></td></tr></table></figure><p></p><p>也可以设置两个坐标都共享：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">100</span>, <span class="number">110</span>, <span class="number">120</span>],</span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    y=[<span class="number">1000</span>, <span class="number">1100</span>, <span class="number">1200</span>],</span><br><span class="line">)</span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">3</span>, cols=<span class="number">1</span>, specs=[[&#123;&#125;], [&#123;&#125;], [&#123;&#125;]],</span><br><span class="line">                          shared_xaxes=<span class="literal">True</span>, shared_yaxes=<span class="literal">True</span>,</span><br><span class="line">                          vertical_spacing=<span class="number">0.001</span>)</span><br><span class="line">fig.append_trace(trace1, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(height=<span class="number">600</span>, width=<span class="number">600</span>, title=<span class="string">'Stacked Subplots with Shared X-Axes'</span>)</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/subplots_shared_xyaxes.html'</span>)</span><br></pre></td></tr></table></figure><p></p>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly高级图形</tag>
      </tags>
  </entry>
  <entry>
    <title>ploty高级图形02</title>
    <url>/2019/05/31/ploty%E9%AB%98%E7%BA%A7%E5%9B%BE%E5%BD%A202/</url>
    <content><![CDATA[<h2 id="多子图"><a href="#多子图" class="headerlink" title="多子图"></a>多子图</h2><h3 id="子坐标轴自定义"><a href="#子坐标轴自定义" class="headerlink" title="子坐标轴自定义"></a>子坐标轴自定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], y=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">trace2 = go.Scatter(x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], y=[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>])</span><br><span class="line">trace3 = go.Scatter(x=[<span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>], y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>])</span><br><span class="line">trace4 = go.Scatter(x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>], y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>])</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">2</span>, cols=<span class="number">2</span>, subplot_titles=(<span class="string">'Plot 1'</span>, <span class="string">'Plot 2'</span>,</span><br><span class="line">                                                          <span class="string">'Plot 3'</span>, <span class="string">'Plot 4'</span>))</span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis1'</span>].update(title=<span class="string">'xaxis 1 title'</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis2'</span>].update(title=<span class="string">'xaxis 2 title'</span>, range=[<span class="number">10</span>, <span class="number">50</span>])</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis3'</span>].update(title=<span class="string">'xaxis 3 title'</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis4'</span>].update(title=<span class="string">'xaxis 4 title'</span>, type=<span class="string">'log'</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis1'</span>].update(title=<span class="string">'yaxis 1 title'</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis2'</span>].update(title=<span class="string">'yaxis 2 title'</span>, range=[<span class="number">40</span>, <span class="number">80</span>])</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis3'</span>].update(title=<span class="string">'yaxis 3 title'</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis4'</span>].update(title=<span class="string">'yaxis 4 title'</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(title=<span class="string">'Customizing Subplot Axes'</span>)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/subplot_custom_axes.html'</span>)</span><br></pre></td></tr></table></figure><p>在plotly中对已经定义好的绘图进行自定义，需要修改figure中的Layout。本例的代码只定义了坐标轴的显示范围，坐标轴类型和是否显示网格，对于其他<br>的画面布局，也可以通过这种方式进行定义。</p><h3 id="嵌入式子图"><a href="#嵌入式子图" class="headerlink" title="嵌入式子图"></a>嵌入式子图</h3><p>最关键的参数是domain<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">    y=[<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>],</span><br><span class="line">    xaxis=<span class="string">'x2'</span>,</span><br><span class="line">    yaxis=<span class="string">'y2'</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis2=dict(</span><br><span class="line">        domain=[<span class="number">0.6</span>, <span class="number">0.95</span>],</span><br><span class="line">        anchor=<span class="string">'y2'</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis2=dict(</span><br><span class="line">        domain=[<span class="number">0.6</span>, <span class="number">0.95</span>],</span><br><span class="line">        anchor=<span class="string">'x2'</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/subplot_insert.html'</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="混合图"><a href="#混合图" class="headerlink" title="混合图"></a>混合图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># read in volcano database data</span></span><br><span class="line">df = pd.read_excel(<span class="string">r'dat/volcano_db.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># frequency of Country</span></span><br><span class="line">freq = df</span><br><span class="line">freq = freq.Country.value_counts().reset_index().rename(columns=&#123;<span class="string">'index'</span>: <span class="string">'x'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot(1) top 10 countries by total volcanoes</span></span><br><span class="line">locations = go.Bar(x=freq[<span class="string">'x'</span>][<span class="number">0</span>:<span class="number">10</span>],y=freq[<span class="string">'Country'</span>][<span class="number">0</span>:<span class="number">10</span>], marker=dict(color=<span class="string">'#CF1020'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read in 3d volcano surface data</span></span><br><span class="line">df_v = pd.read_excel(<span class="string">r'dat/volcano.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot(2) 3d surface of volcano</span></span><br><span class="line">threed = Surface(z=df_v.values.tolist(), colorscale=<span class="string">'Reds'</span>, showscale=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot(3)  scattergeo map of volcano locations</span></span><br><span class="line">trace3 = &#123;</span><br><span class="line">  <span class="string">"geo"</span>: <span class="string">"geo3"</span>,</span><br><span class="line">  <span class="string">"lon"</span>: df[<span class="string">'Longitude'</span>],</span><br><span class="line">  <span class="string">"lat"</span>: df[<span class="string">'Latitude'</span>],</span><br><span class="line">  <span class="string">"hoverinfo"</span>: <span class="string">'text'</span>,</span><br><span class="line">  <span class="string">"marker"</span>: &#123;</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"opacity"</span>: <span class="number">0.8</span>,</span><br><span class="line">    <span class="string">"color"</span>: <span class="string">'#CF1020'</span>,</span><br><span class="line">    <span class="string">"colorscale"</span>: <span class="string">'Viridis'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"mode"</span>: <span class="string">"markers"</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"scattergeo"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = go.Data([locations, threed, trace3])</span><br><span class="line"></span><br><span class="line"><span class="comment"># control the subplot below using domain in 'geo', 'scene', and 'axis'</span></span><br><span class="line">layout = &#123;</span><br><span class="line">  <span class="string">"plot_bgcolor"</span>: <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">"paper_bgcolor"</span>: <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">"titlefont"</span>: &#123;</span><br><span class="line">      <span class="string">"size"</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="string">"family"</span>: <span class="string">"Raleway"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"font"</span>: &#123;</span><br><span class="line">      <span class="string">"color"</span>: <span class="string">'white'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dragmode"</span>: <span class="string">"zoom"</span>,</span><br><span class="line">  <span class="string">"geo3"</span>: &#123;</span><br><span class="line">    <span class="string">"domain"</span>: &#123;</span><br><span class="line">      <span class="string">"x"</span>: [<span class="number">0</span>, <span class="number">0.55</span>],</span><br><span class="line">      <span class="string">"y"</span>: [<span class="number">0</span>, <span class="number">0.9</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"lakecolor"</span>: <span class="string">"rgba(127,205,255,1)"</span>,</span><br><span class="line">    <span class="string">"oceancolor"</span>: <span class="string">"rgb(6,66,115)"</span>,</span><br><span class="line">    <span class="string">"landcolor"</span>: <span class="string">'white'</span>,</span><br><span class="line">    <span class="string">"projection"</span>: &#123;<span class="string">"type"</span>: <span class="string">"orthographic"</span>&#125;,</span><br><span class="line">    <span class="string">"scope"</span>: <span class="string">"world"</span>,</span><br><span class="line">    <span class="string">"showlakes"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"showocean"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"showland"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"bgcolor"</span>: <span class="string">'black'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"margin"</span>: &#123;</span><br><span class="line">    <span class="string">"r"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"t"</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">"b"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">"l"</span>: <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scene"</span>: &#123;<span class="string">"domain"</span>: &#123;</span><br><span class="line">      <span class="string">"x"</span>: [<span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">      <span class="string">"y"</span>: [<span class="number">0</span>, <span class="number">0.55</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">           <span class="string">"xaxis"</span>: &#123;<span class="string">"gridcolor"</span>: <span class="string">'white'</span>&#125;,</span><br><span class="line">           <span class="string">"yaxis"</span>: &#123;<span class="string">"gridcolor"</span>: <span class="string">'white'</span>&#125;,</span><br><span class="line">           <span class="string">"zaxis"</span>: &#123;<span class="string">"gridcolor"</span>: <span class="string">'white'</span>&#125;</span><br><span class="line">           &#125;,</span><br><span class="line">  <span class="string">"showlegend"</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"&lt;br&gt;Volcano Database"</span>,</span><br><span class="line">  <span class="string">"xaxis"</span>: &#123;</span><br><span class="line">    <span class="string">"anchor"</span>: <span class="string">"y"</span>,</span><br><span class="line">    <span class="string">"domain"</span>: [<span class="number">0.6</span>, <span class="number">0.95</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"yaxis"</span>: &#123;</span><br><span class="line">    <span class="string">"anchor"</span>: <span class="string">"x"</span>,</span><br><span class="line">    <span class="string">"domain"</span>: [<span class="number">0.65</span>, <span class="number">0.95</span>],</span><br><span class="line">    <span class="string">"showgrid"</span>: <span class="literal">False</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">annotations = &#123; <span class="string">"text"</span>: <span class="string">"Source: NOAA"</span>,</span><br><span class="line">               <span class="string">"showarrow"</span>: <span class="literal">False</span>,</span><br><span class="line">               <span class="string">"xref"</span>: <span class="string">"paper"</span>,</span><br><span class="line">               <span class="string">"yref"</span>: <span class="string">"paper"</span>,</span><br><span class="line">               <span class="string">"x"</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="string">"y"</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">layout[<span class="string">'annotations'</span>] = [annotations]</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig, filename = <span class="string">"tmp/Mixed Subplots Volcano.html"</span>)</span><br></pre></td></tr></table></figure><h2 id="3-7-绘制SVG-可伸缩矢量图"><a href="#3-7-绘制SVG-可伸缩矢量图" class="headerlink" title="3.7 绘制SVG(可伸缩矢量图)"></a>3.7 绘制SVG(可伸缩矢量图)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1.2</span>, <span class="number">3.5</span>, <span class="number">5</span>,<span class="number">0.5</span>,<span class="number">7</span>],</span><br><span class="line">    y=[<span class="number">1</span>, <span class="number">1.8</span>, <span class="number">1.2</span>,<span class="number">0.5</span>,<span class="number">0.6</span>],</span><br><span class="line">    text=[<span class="string">'垂直线(破折号)'</span>, <span class="string">'水平线（点+破折号）'</span>, <span class="string">'对角线（点）'</span>,<span class="string">'对角线（相对于plot）'</span>,<span class="string">'对角线（相对于轴）'</span>],</span><br><span class="line">    mode=<span class="string">'text'</span>,</span><br><span class="line">)</span><br><span class="line">data = [trace0]</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">8</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'range'</span>: [<span class="number">0</span>, <span class="number">2.5</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        <span class="comment"># 画垂直线</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(55, 128, 191)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="string">'dash'</span>:<span class="string">'dash'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 水平线</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(50, 171, 96)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="string">'dash'</span>: <span class="string">'dashdot'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 对角线</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(128, 0, 128)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="string">'dash'</span>: <span class="string">'dot'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 相对于轴绘图</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'x'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'y'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(55, 128, 191)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 相对于plot绘图</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'xref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'rgb(50, 171, 96)'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: data,</span><br><span class="line">    <span class="string">'layout'</span>: layout,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/SVG_line.html'</span>)</span><br></pre></td></tr></table></figure><p>前面的图形都是通过go.Scatter 等函数绘制的，绘制SVG是在layout中进行设置的。本例中：</p><ul><li>dash 参数的使用，用于设置线性图结果的呈现方式，可选择值有solid（线条），dot（点），longdash（长破折号），dashdot（点+破折号）和longdashdot（长点+破折号），默认是solid</li><li>xref（yref）参数的使用，该参数有两个值：paper和x(y).如果值为x，则x0，x1对应的值为坐标轴的绝对值，比如“x0=0,x1=4”表示线的起点为0，终点在4；如果值为paper，则x0、x1对应的值为坐标轴的相对值，本例中<br>“x0=0，x1=0.5”表示线的起点x0在0处，线的终点x1在0.5*8=4处<h3 id="线形图的应用：创建图形的切线"><a href="#线形图的应用：创建图形的切线" class="headerlink" title="线形图的应用：创建图形的切线"></a>线形图的应用：创建图形的切线</h3>代码的功能通过人工的方法找出，f(x)= sin(x^2)+1在区间[1,3]之间的几个极值点。然后根据这几个极值点绘制水平线<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 代码SVG_tangent_line.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">x0 = np.linspace(<span class="number">1</span>, <span class="number">3</span>, <span class="number">200</span>)</span><br><span class="line">y0 = x0 * np.sin(np.power(x0, <span class="number">2</span>)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=x0,</span><br><span class="line">    y=y0,</span><br><span class="line">)</span><br><span class="line">data = [trace0]</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">"f(x)=sin(x^2)+1"</span>,</span><br><span class="line">    <span class="string">'shapes'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">2.30756</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">1.75</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">2.30756</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.7</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">2.5</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">2.5</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">3.80796</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">3.05</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">3.80796</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.7</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">2.5</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'line'</span>,</span><br><span class="line">            <span class="string">'x0'</span>: <span class="number">1.90</span>,</span><br><span class="line">            <span class="string">'y0'</span>: <span class="number">-1.1827</span>,</span><br><span class="line">            <span class="string">'x1'</span>: <span class="number">2.50</span>,</span><br><span class="line">            <span class="string">'y1'</span>: <span class="number">-1.1827</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">0.7</span>,</span><br><span class="line">            <span class="string">'line'</span>: &#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">                <span class="string">'width'</span>: <span class="number">2.5</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: data,</span><br><span class="line">    <span class="string">'layout'</span>: layout,</span><br><span class="line">&#125;</span><br><span class="line">pyplt(fig, filename=<span class="string">'tmp/tangent-line.html'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>plotly高级图形</tag>
      </tags>
  </entry>
  <entry>
    <title>python并发和网络</title>
    <url>/2019/04/10/python%E5%B9%B6%E5%8F%91%E5%92%8C%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li>使用线程来解决I/O限制问题</li><li>使用进程、网络或事件来处理cpu问题<br>标准库中有一个Queue函数。</li></ul><h3 id="multiprocessing包"><a href="#multiprocessing包" class="headerlink" title="multiprocessing包"></a>multiprocessing包</h3><p>multiprocessing包是Python中的多进程管理包。与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。<br>该进程可以运行在Python程序内部编写的函数。该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。<br>此外multiprocessing包中也有Lock/Event/Semaphore/Condition类 (这些对象可以像多线程那样，通过参数传递给各个进程)，用以同步进程，<br>其用法与threading包中的同名类一致。所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。<br>但在使用这些共享API的时候，我们要注意以下几点:</p><ul><li>在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。对于多线程来说，由于只有一个进程，所以不存在此必要性。</li><li>multiprocessing提供了threading包中没有的IPC(比如Pipe和Queue)，效率上更高。应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。</li><li><p>多进程应该避免共享资源。在多线程中，我们可以比较容易地共享资源，比如使用全局变量或者传递参数。在多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不合适。此时我们可以通过共享内存和Manager的方法来共享资源。<br>但这样做提高了程序的复杂度，并因为同步的需要而降低了程序的效率。</p><p>Process.PID中保存有PID，如果进程还没有start()，则PID为None。<br>window系统下，需要注意的是要想启动一个子进程，必须加上那句if _ _ name _ _ == “main”，进程相关的要写在这句下面。</p></li></ul><h4 id="简单创建多进程"><a href="#简单创建多进程" class="headerlink" title="简单创建多进程"></a>简单创建多进程</h4><p>有两种使用方法，直接传入要运行的方法或从Process继承并覆盖run()：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'say hi'</span>, i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=foo, args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        super(MyProcess, self).__init__()</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'say hi'</span>, self.arg</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = MyProcess(i)</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h4 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h4><p>构造方法：<br>def _ _ init _ _ (self, group=None, target=None, name=None, args=(), kwargs={}):</p><p>　group: 线程组，目前还没有实现，库引用中提示必须是None；<br>　　target: 要执行的方法；<br>　　name: 进程名；<br>　　args/kwargs: 要传入方法的参数。<br>注：一般是用 target和args/kwargs</p><p>实例方法：<br>　is_alive()：返回进程是否在运行。<br>　　join ( [ timeout ] )：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。<br>　　start()：进程准备就绪，等待CPU调度<br>　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。<br>　　terminate()：不管任务是否完成，立即停止工作进程</p><p>属性：<br>　authkey<br>　　daemon：和线程的setDeamon功能一样<br>　　exitcode(进程在运行时为None、如果为–N，表示被信号N结束）<br>　　name：进程名字。<br>　　pid：进程号。<br>daemon属性：</p><ul><li>如果某个子线程的daemon属性为False，主线程结束时会检测该子线程是否结束，如果该子线程还在运行，则主线程会等待它完成后再退出；</li><li><p>如果某个子线程的daemon属性为True，主线程运行结束时不对这个子线程进行检查而直接退出，同时所有daemon值为True的子线程将随主线程一起结束，而不论是否运行完成。</p><p>属性daemon的值默认为False，如果需要修改，必须在调用start()方法启动线程之前进行设置。另外要注意的是，<br>上面的描述并不适用于IDLE环境中的交互模式或脚本运行模式，因为在该环境中的主线程只有在退出Python IDLE时才终止。</p></li></ul><h2 id="Pool类"><a href="#Pool类" class="headerlink" title="Pool类"></a>Pool类</h2><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。<br>进程池设置最好等于CPU核心数量</p><p>构造方法：<br>def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):<br>Pool( [ processes[, initializer[, initargs[, maxtasksperchild[, context] ]]]])</p><ul><li>processes ：使用的工作进程的数量，如果processes是None那么使用 os.cpu_count()返回的数量。</li><li>initializer： 如果initializer是None，那么每一个工作进程在开始的时候会调用initializer(*initargs)。</li><li>maxtasksperchild：工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。maxtasksperchild默认是None，意味着只要Pool存在工作进程就会一直存活。</li><li>context: 用在制定工作进程启动时的上下文，一般使用 multiprocessing.Pool() 或者一个context对象的Pool()方法来创建一个池，两种方法都适当的设置了context<br>实例方法：<br>　　apply(func[, args[, kwds]])：同步进程池<br>　　apply_async(func[, args[, kwds[, callback[, error_callback]]]]) ：异步进程池<br>　　close() ： 关闭进程池，阻止更多的任务提交到pool，待任务完成后，工作进程会退出。<br>　　terminate() ： 结束工作进程，不在处理未完成的任务<br>　　join() : wait工作线程的退出，在调用join()前，必须调用close() or terminate()。这样是因为被终止的进程需要被父进程调用wait（join等价与wait），否则进程会成为僵尸进程。pool.join()必须使用在</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment">#例子一（异步进程池）：</span></span><br><span class="line"><span class="comment">#pool.close()或者pool.terminate()之后。其中close()跟terminate()的区别在于close()会等待池中的worker进程执行结束再关闭pool,而terminate()则是直接关闭。</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> arg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t_start=time.time()</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pool.apply_async(func=Foo, args=(i,), callback=Bar)<span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  <span class="comment"># 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br><span class="line">    pool.terminate()</span><br><span class="line">    t_end=time.time()</span><br><span class="line">    t=t_end-t_start</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'the program time is :%s'</span> %t</span><br><span class="line">    </span><br><span class="line">    <span class="comment">###例子二（同步进程池）：</span></span><br><span class="line">    <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Process, Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> i + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t_start=time.time()</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pool.apply(Foo, (i,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  <span class="comment"># 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br><span class="line">    t_end=time.time()</span><br><span class="line">    t=t_end-t_start</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'the program time is :%s'</span> %t</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##例子三：异步进程池使用get()方法获得进程执行结果值（错误使用get（）方法获取结果）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t_start=time.time()</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res = pool.apply_async(func=Foo, args=(i,), callback=Bar)<span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line">        <span class="keyword">print</span> res.get()  <span class="comment">###错误使用get</span></span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  <span class="comment"># 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br><span class="line">    pool.terminate()</span><br><span class="line">    t_end=time.time()</span><br><span class="line">    t=t_end-t_start</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'the program time is :%s'</span> %t</span><br><span class="line">    </span><br><span class="line">    <span class="comment">###例子四（正确使用get（）方法获取结果）</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res_list=[]</span><br><span class="line">    t_start=time.time()</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res = pool.apply_async(func=Foo, args=(i,), callback=Bar)</span><br><span class="line">        res_list.append(res) <span class="comment">##正确使用get</span></span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_list:</span><br><span class="line">        <span class="keyword">print</span> res.get()</span><br><span class="line">    t_end=time.time()</span><br><span class="line">    t=t_end-t_start</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'the program time is :%s'</span> %t</span><br></pre></td></tr></table></figure><h2 id="进程数据共享"><a href="#进程数据共享" class="headerlink" title="进程数据共享"></a>进程数据共享</h2><p>方法一（使用Array）：<br>Array(‘i’, range(10))中的‘i’参数C语言中的类型：<br>‘c’: ctypes.c_char　　　　 ‘u’: ctypes.c_wchar　　　　‘b’: ctypes.c_byte　　　　 ‘B’: ctypes.c_ubyte<br>‘h’: ctypes.c_short　　　 ‘H’: ctypes.c_ushort　　 ‘i’: ctypes.c_int　　　　　 ‘I’: ctypes.c_uint<br>‘l’: ctypes.c_long,　　　　‘L’: ctypes.c_ulong　　　　‘f’: ctypes.c_float　　　　‘d’: ctypes.c_double<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Array</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        a[i] = -a[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = Array(<span class="string">'i'</span>, range(<span class="number">10</span>))</span><br><span class="line">    p = Process(target=f, args=(arr,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    print(arr[:])</span><br></pre></td></tr></table></figure><p></p><p>方法二（使用Manager）：<br>Manager()返回的manager提供list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Barrier, Queue, Value and Array类型的支持。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d, l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="string">'2'</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="literal">None</span></span><br><span class="line">    l.reverse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.dict()</span><br><span class="line">        l = manager.list(range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">        p = Process(target=f, args=(d, l))</span><br><span class="line">        p.start()</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>IP:本机IP地址一直是：127.0.0.1 ，名称一直为localhost</p><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>Python套接字编程教程（ <a href="https://docs.python.org/3/howto/sockets.html" target="_blank" rel="noopener">https://docs.python.org/3/howto/sockets.html</a> ）</p><p>udp-服务器代码：服务器必须用socket包的两个方法来建立网络连接<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_address = (<span class="string">'localhost'</span>, <span class="number">6789</span>)</span><br><span class="line">max_size = <span class="number">4096</span>  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'starting the server at'</span>,datetime.now()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'waiting for a client to call'</span></span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#创建一个套接字，SOCK_DGRAM表示发送的数据报，表示用UDP</span></span><br><span class="line">server.bind(server_address) <span class="comment">#绑定套接字</span></span><br><span class="line"></span><br><span class="line">data,client = server.recvfrom(max_size)  <span class="comment">#接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'At'</span>,datetime.now(), client, <span class="string">'said'</span>, data)</span><br><span class="line">server.sendto(<span class="string">b'Are you talking to me?'</span>,client) <span class="comment">#发送数据</span></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><p></p><p>UDP-client代码：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_address = (<span class="string">'localhost'</span>, <span class="number">6789</span>)</span><br><span class="line">max_size = <span class="number">4096</span>  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'starting the client at'</span>,datetime.now()</span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#创建一个套接字，SOCK_DGRAM表示发送的数据报，表示用UDP</span></span><br><span class="line">client.sendto(<span class="string">b'hey?'</span>,server_address) <span class="comment">#发送数据</span></span><br><span class="line"></span><br><span class="line">data,server = client.recvfrom(max_size)  <span class="comment">#接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'At'</span>,datetime.now(), server, <span class="string">'said'</span>, data)</span><br><span class="line">   </span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p></p><p>TCP-server代码：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_address = (<span class="string">'localhost'</span>, <span class="number">6789</span>)</span><br><span class="line">max_size = <span class="number">1000</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'starting the server at'</span>,datetime.now()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'waiting for a client to call'</span></span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#创建一个套接字，SOCK_STREAM表示发送的数据报，表示用UDP</span></span><br><span class="line">server.bind(server_address) <span class="comment">#绑定套接字</span></span><br><span class="line">server.listen(<span class="number">5</span>) <span class="comment">#监听</span></span><br><span class="line"></span><br><span class="line">client, addr = server.accept()  <span class="comment">#接收客户端连接</span></span><br><span class="line">data = client.recv(max_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'At'</span>,datetime.now(), client, <span class="string">'said'</span>, data)</span><br><span class="line">client.sendall(<span class="string">b'Are you talking to me?'</span>) <span class="comment">#发送数据</span></span><br><span class="line"></span><br><span class="line">server.close()</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p></p><p>TCP-client代码：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">address = (<span class="string">'localhost'</span>, <span class="number">6789</span>)</span><br><span class="line">max_size = <span class="number">1000</span>  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'starting the client at'</span>,datetime.now()</span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#创建一个套接字，SOCK_STREAM表示发送的数据报，表示用UDP</span></span><br><span class="line">client.connect(address)</span><br><span class="line">client.sendall(<span class="string">b'hey'</span>)</span><br><span class="line">data = client.recv(max_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'At'</span>,datetime.now(), <span class="string">'someone said'</span>, data) </span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p></p><h2 id="远程处理"><a href="#远程处理" class="headerlink" title="远程处理"></a>远程处理</h2><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>RPC是一种非常流行的技术，有很多种实现方式。标准库中包含一种RPC实现，xmlrpc，使用XML作为传输格式。在服务器上定义并注册函数，。<br>客户端使用类似导入方式来调用它们。<br>xmlr_server.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在服务器上提供了double()函数，注册函数后，才能通过RPC调用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num*<span class="number">2</span></span><br><span class="line">server = simpleXMLRPCServer((<span class="string">"localhost"</span>,<span class="number">6789</span>))</span><br><span class="line">server.register_function(double,<span class="string">"double"</span>)<span class="comment">#注册函数</span></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><p>xmlr_client.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.client</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">客户端通过ServerProxy()和服务器连接。接着会调用proxy.double()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">proxy = xmlrpc.client.ServerProxy(<span class="string">"http://localhost:6789/"</span>)</span><br><span class="line">num = <span class="number">7</span></span><br><span class="line">result = proxy.double(num)</span><br><span class="line">print(<span class="string">'Double %s is %s '</span> %(num,result))</span><br></pre></td></tr></table></figure><h4 id="使用msgpack-rpc-python"><a href="#使用msgpack-rpc-python" class="headerlink" title="使用msgpack-rpc-python"></a>使用msgpack-rpc-python</h4><p>安装：pip install msgpack-rpc-python<br>server代码：msgpack_server.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> msgpackrpc <span class="keyword">import</span> Server, Address</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Services</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> num *<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = Server(Services())</span><br><span class="line">server.listen(Address(<span class="string">'localhost'</span>,<span class="number">6789</span>))</span><br><span class="line">server.start()</span><br></pre></td></tr></table></figure><p>client代码 :msgpack_client.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> msgpackrpc <span class="keyword">import</span> Client, Address</span><br><span class="line"></span><br><span class="line">client = Client(Address(<span class="string">'localhost'</span>,<span class="number">6789</span>))</span><br><span class="line">num = <span class="number">8</span></span><br><span class="line">result = client.call(<span class="string">'double'</span>,num)</span><br><span class="line">print(<span class="string">"Double %s is %s "</span> %(num, result))</span><br></pre></td></tr></table></figure><h4 id="使用fabric"><a href="#使用fabric" class="headerlink" title="使用fabric"></a>使用fabric</h4><pre><code>fabric包可以运行远程或者本地命令、上传或下载文件、用sudo权限运行命令。
 pip2 install fabric
</code></pre><p>fab1.py<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iso</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">    print(date.today().isoformat())</span><br></pre></td></tr></table></figure><p></p><p>输入以下命令执行：<br>fab -f fabl.py -H localhost iso</p><p>其中：-f fab1.py选项指定使用fabric文件执行fab1.py。-H localhosh选项指定运行本地的命令，最后的iso是fab文件中要运行的函数名。</p>]]></content>
      <categories>
        <category>Python心得</category>
      </categories>
      <tags>
        <tag>Python多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>qt 基础知识01</title>
    <url>/2024/07/14/qt-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/</url>
    <content><![CDATA[<h1 id="qt界面的三个基类"><a href="#qt界面的三个基类" class="headerlink" title="qt界面的三个基类"></a>qt界面的三个基类</h1><p>QWidget继承于QObject和QPaintDevice，QDialog和QMainWindow则继承于QWidget，QDialog、QMainWindow两者之间没有直接关系。本文主要整理了QMainWindow、QWidget、QDialog三者之间的区别和各自特点。</p><p>参考文献：<br><a href="https://blog.csdn.net/wzz953200463/article/details/134119220" target="_blank" rel="noopener">https://blog.csdn.net/wzz953200463/article/details/134119220</a><br><a href="https://blog.csdn.net/qq_41684134/article/details/87973825" target="_blank" rel="noopener">https://blog.csdn.net/qq_41684134/article/details/87973825</a></p><p><img src="images/image-3.png" alt="alt text"></p><img src="/.com//07/14/qt-基础知识01/image-3.jpg" title="QT父类"><h2 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h2><pre><code>QMainWindow 类提供一个有菜单条、锚接窗口（例如工具条）和一个状态条的主应用程序窗。
</code></pre><p>主窗口通常用在提供一个大的中央窗口部件（例如文本编辑或者绘制画布）以及周围 菜单、工具条和一个状态条。QMainWindow常常被继承，因为这使得封装中央部件、菜单和工具条以及窗口状态条变得更容易，当用户点击菜单项或者工具条按钮时，槽会被调用。</p><p>QMainWindow类提供一个有菜单条、工具栏、状态条的主应用程序窗口（例如：开发Qt常用的IDE-Visual Studio、Qt Creator等）。</p><p>一个主窗口提供了构建应用程序的用户界面框架。Qt拥有QMainWindow及其相关类来管理主窗口。<br>QMainWindow拥有自己的布局，我们可以使用QMenuBar（菜单栏）、QToolBar（工具栏）、QStatusBar（状态栏）以及QDockWidget（悬浮窗体），布局有一个可由任何种类小窗口所占据的中心区域。布局例如：<br><img src="images/image-2.png" alt="alt text"></p><ul><li>注意：使用QMainWindow窗口类时，必须要创建一个Qwidget对象，即便它是一个占位符。QMainWindow是一个特殊的窗口类，它预定义了一个布局，称为中央部件（central widget）。这个布局将占据整个窗口的可用空间，并且是QMainWindow的子部件。因此，直接为QMainWindow添加布局是无效的。</li></ul><h2 id="QWidget-类"><a href="#QWidget-类" class="headerlink" title="QWidget 类"></a>QWidget 类</h2><pre><code>QWidget 是QT框架中最基础的窗口类，可以理解为用户的基本单元。
</code></pre><p>窗口部件是用户界面的一个原子：它从窗口系统接收鼠标、键盘和其它事件，并且将自己的表现形式绘制在屏幕上。每一个窗口部件都是矩形，并且它们按Z轴顺序排列。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。</p><p>QWidget有很多成员函数，但是它们中的一些有少量的直接功能：例如，QWidget有字体属性，但是自己从来不用。为很多继承它的子类提供了实际的功能，比如QLabel、QPushButton、QCheckBox等等。</p><p>没有父窗体的小部件始终是一个独立的窗口（顶级窗口部件）。非窗口的小部件为子部件，它们在父窗口中显示。Qt中大多数部件主要被用作子部件。例如：可以显示一个按钮作为顶层窗口，但大多数人更喜欢将按钮内置于其它部件，如QDialog。</p><p><img src="images/image-4.png" alt="alt text"><br>上图显示了一个QGroupBox，里面包含了大量由QGridLayout布局的子控件。</p><h2 id="QDialog-类"><a href="#QDialog-类" class="headerlink" title="QDialog 类"></a>QDialog 类</h2><p>QDialog类是对话框窗口的基类。</p><p>对话框窗口是一个顶级窗体，主要用于短期任务以及和用户进行简要通讯。QDialog可以是模式的也可以是非模式的。QDialog支持扩展性并且可以提供返回值。它们可以有默认按钮。QDialog也可以有一个QSizeGrip在它的右下角，使用setSizeGripEnabled()。</p><p>QDialog 是最普通的顶级窗口。一个不会被嵌入到父窗口部件的窗口部件叫做顶级窗口部件。通常情况下，顶级窗口部件是有框架和标题栏的窗口（尽管使用了一定的窗口部件标记，创建顶级窗口部件时也可能没有这些装饰。）在Qt中，QMainWindow和不同的QDialog的子类是最普通的顶级窗口。</p><p>如果是顶级对话框，那就基于QDialog创建，如果是主窗体，那就基于QMainWindow，如果不确定，或者有可能作为顶级窗体，或有可能嵌入到其他窗体中，则基于QWidget创建。</p><p>注意：QDialog（以及其它使用Qt::Dialog类型的widget）使用父窗口部件的方法和Qt中其它类稍微不同。对话框总是顶级窗口部件，但是如果它有一个父对象，它的默认位置就是父对象的中间。它也将和父对象共享工具条条目。</p><p><strong><em>模式对话框</em></strong><br>阻塞同一应用程序中其它可视窗口输入的对话框。模式对话框有自己的事件循环，用户必须完成这个对话框中的交互操作，并且关闭了它之后才能访问应用程序中的其它任何窗口。模式对话框仅阻止访问与对话相关联的窗口，允许用户继续使用其它窗口中的应用程序。</p><p>显示模态对话框最常见的方法是调用其exec()函数，当用户关闭对话框，exec()将提供一个有用的返回值，并且这时流程控制继续从调用exec()的地方进行。通常情况下，要获得对话框关闭并返回相应的值，我们连接默认按钮，例如：”确定”按钮连接到accept()槽，”取消”按钮连接到reject()槽。另外我们也可以连接done()槽，传递给它Accepted或Rejected。</p><p><strong><em>非模式对话框</em></strong><br>和同一个程序中其它窗口操作无关的对话框。在文字处理中的查找和替换对话框通常是非模式的，允许用户同时与应用程序的主窗口和对话框进行交互。调用show()来显示非模式对话框，并立即将控制返回给调用者。</p><p>如果隐藏对话框后调用show()函数，对话框将显示在其原始位置，这是因为窗口管理器决定的窗户位置没有明确由程序员指定，为了保持被用户移动的对话框位置，在closeEvent()中进行处理，然后在显示之前，将对话框移动到该位置。</p><p><strong><em>“半模式”对话框</em></strong><br>调用setModal(true)或者setWindowModality()，然后show()。有别于exec()，show() 立即返回给控制调用者。</p><p>对于进度对话框来说，调用setModal(true)是非常有用的，用户必须拥有与其交互的能力，例如：取消长时间运行的操作。如果使用show()和setModal(true)共同执行一个长时间操作，则必须定期在执行过程中调用QApplication ::processEvents()，以使用户能够与对话框交互（可以参考QProgressDialog）。</p><h2 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h2><ul><li><p>QMainWindow 类提供一个有菜单条、锚接窗口（例如工具条）和一个状态条的主应用程序窗口。 主窗口通常用在提供一个大的中央窗口部件（例如文本编辑或者绘制画布）以及周围菜单、工具条和一个状态条。QMainWindow常常被继承，因为这使得封装中央部件、菜单和工具条以及窗口状态条变得更容易，当用户点击菜单项或者工具条按钮时，槽会被调用。</p></li><li><p>QWidget类是所有用户界面对象的基类。 窗口部件是用户界面的一个基本单元：它从窗口系统接收鼠标、键盘和其它事件，并且在屏幕上绘制自己。每一个窗口部件都是矩形的，并且它们按Z轴顺序排列。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。</p></li><li><p>QDialog 是最普通的顶级窗口。 一个不会被嵌入到父窗口部件的窗口部件叫做顶级窗口部件。通常情况下，顶级窗口部件是有框架和标题栏的窗口（尽管使用了一定的窗口部件标记，创建顶级窗口部件时也可能没有这些装饰。）在Qt中，QMainWindow和不同的QDialog的子类是最普通的顶级窗口</p></li></ul><h2 id="选用原则"><a href="#选用原则" class="headerlink" title="选用原则"></a>选用原则</h2><ul><li>如果是主窗体，则基于QMainWindow创建。</li><li>如果是顶级对话框，则基于QDialog创建。</li><li>如果需要<label style="color:red">嵌入</label>到其他窗体中，则基于QWidget创建</li><li>如果不确定，或者1 2两种情况都有，那么，就选择QWidget。</li></ul><h1 id="qt中常用的类"><a href="#qt中常用的类" class="headerlink" title="qt中常用的类"></a>qt中常用的类</h1><h2 id="QScrollArea"><a href="#QScrollArea" class="headerlink" title="QScrollArea"></a>QScrollArea</h2><h1 id="QString-、-QStringList"><a href="#QString-、-QStringList" class="headerlink" title="QString 、 QStringList"></a>QString 、 QStringList</h1><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString str = <span class="string">"/home/cyfeng/mycpp/FinalAUI3/mainwindows.cpp"</span>;</span><br><span class="line">QStringList <span class="built_in">list</span> = str.split(<span class="string">"/"</span>); <span class="comment">//以'/'为分割标识，将分割后的数据存在链表中</span></span><br><span class="line">QString splitstr;</span><br><span class="line"></span><br><span class="line">splitstr = <span class="built_in">list</span>.first();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"first\t"</span> &lt;&lt; splitstr.toStdString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">splitstr = <span class="built_in">list</span>.last();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"last\t"</span> &lt;&lt; splitstr.toStdString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">splitstr = <span class="built_in">list</span>.at(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"at(3)\t"</span> &lt;&lt; splitstr.toStdString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">splitstr = <span class="built_in">list</span>[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"[4]\t"</span> &lt;&lt; splitstr.toStdString() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[K线图] --&gt; B((数据准备))</span><br><span class="line">    B --&gt; C&#123;分析逻辑&#125;</span><br><span class="line">    C --&gt;|阳线| D[开盘价 &lt; 收盘价]</span><br><span class="line">    C --&gt;|阴线| E[开盘价 &gt; 收盘价]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB </span><br><span class="line">    subgraph 2025/02/18 </span><br><span class="line">        A[开盘:100] --&gt; B[收盘:105]</span><br><span class="line">        B --&gt; C[最高:115]</span><br><span class="line">        B --&gt; D[最低:95]</span><br><span class="line">    end </span><br><span class="line">    subgraph 2025/02/19 </span><br><span class="line">        E[开盘:110] --&gt; F[收盘:100]</span><br><span class="line">        F --&gt; G[最高:120]</span><br><span class="line">        F --&gt; H[最低:100]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>qt基类介绍</category>
      </categories>
      <tags>
        <tag>qt中的各个基类</tag>
      </tags>
  </entry>
</search>
