<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YHNE&#39;s blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-06-13T15:58:15.354Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彩票开发及选号笔记</title>
    <link href="http://yoursite.com/2023/06/13/%E5%BD%A9%E7%A5%A8%E5%BC%80%E5%8F%91%E5%8F%8A%E9%80%89%E5%8F%B7%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2023/06/13/%E5%BD%A9%E7%A5%A8%E5%BC%80%E5%8F%91%E5%8F%8A%E9%80%89%E5%8F%B7%E7%AC%94%E8%AE%B0/</id>
    <published>2023-06-13T14:36:59.000Z</published>
    <updated>2023-06-13T15:58:15.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选号规则"><a href="#选号规则" class="headerlink" title="选号规则"></a>选号规则</h2><p>1、假定上一次开过的全部都不中<br>2、假定随机（机选）的都不中<br>3、假定10次以上没开过奖的都不中<br>4、在剩下的选频率出现多次的且距上次开奖较近的号码<br>5、选具有一定规律的号码</p><ul><li>（1）开奖过的号码呈斜线</li><li>（2）多次连开，有二有三，有三有四，类似这样的号码 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;选号规则&quot;&gt;&lt;a href=&quot;#选号规则&quot; class=&quot;headerlink&quot; title=&quot;选号规则&quot;&gt;&lt;/a&gt;选号规则&lt;/h2&gt;&lt;p&gt;1、假定上一次开过的全部都不中&lt;br&gt;2、假定随机（机选）的都不中&lt;br&gt;3、假定10次以上没开过奖的都不中&lt;br&gt;4、在剩</summary>
      
    
    
    
    <category term="彩票开发" scheme="http://yoursite.com/categories/彩票开发/"/>
    
    
    <category term="彩票选号规则" scheme="http://yoursite.com/tags/彩票选号规则/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2023/01/30/hello-world/"/>
    <id>http://yoursite.com/2023/01/30/hello-world/</id>
    <published>2023-01-30T14:27:04.744Z</published>
    <updated>2018-10-05T05:43:33.433Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title:Hello World"></a>title:Hello World</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title:Hello World&quot;&gt;&lt;/a&gt;title:Hello World&lt;/h2&gt;&lt;p&gt;Welco</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>log4cxx移植笔记</title>
    <link href="http://yoursite.com/2022/01/04/log4cxx%E7%A7%BB%E6%A4%8D%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2022/01/04/log4cxx%E7%A7%BB%E6%A4%8D%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-04T14:46:21.000Z</published>
    <updated>2022-04-10T04:03:02.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="log4cxx文件的编译"><a href="#log4cxx文件的编译" class="headerlink" title="log4cxx文件的编译"></a>log4cxx文件的编译</h2><p>编译需要的三个文件：<br>1、apache-log4cxx-0.10.0</p><h2 id="log4cxx-配置文件解读"><a href="#log4cxx-配置文件解读" class="headerlink" title="log4cxx 配置文件解读"></a>log4cxx 配置文件解读</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;log4cxx文件的编译&quot;&gt;&lt;a href=&quot;#log4cxx文件的编译&quot; class=&quot;headerlink&quot; title=&quot;log4cxx文件的编译&quot;&gt;&lt;/a&gt;log4cxx文件的编译&lt;/h2&gt;&lt;p&gt;编译需要的三个文件：&lt;br&gt;1、apache-log4cxx</summary>
      
    
    
    
    <category term="log4cxx" scheme="http://yoursite.com/categories/log4cxx/"/>
    
    
    <category term="log4cxx的移植" scheme="http://yoursite.com/tags/log4cxx的移植/"/>
    
  </entry>
  
  <entry>
    <title>hexo 迁移</title>
    <link href="http://yoursite.com/2021/10/24/hexo-%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2021/10/24/hexo-%E8%BF%81%E7%A7%BB/</id>
    <published>2021-10-24T14:45:11.000Z</published>
    <updated>2023-05-14T15:28:13.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移时候主要用到可参考的博客"><a href="#迁移时候主要用到可参考的博客" class="headerlink" title="迁移时候主要用到可参考的博客"></a>迁移时候主要用到可参考的博客</h2><ul><li><a href="https://www.cnblogs.com/iHeling/p/14095937.html" target="_blank" rel="noopener">https://www.cnblogs.com/iHeling/p/14095937.html</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>先安装必备软件<label style="color:red">git</label>, <label style="color:red">node.js</label>,</li></ul><h2 id="必备文件"><a href="#必备文件" class="headerlink" title="必备文件"></a>必备文件</h2><ul><li>从之前的博客文件夹中选择必须要拷贝的文件，备份起来。首先是之前自己修改的文件，像配置文件_config.yml,theme文件夹，source文件夹自己写的原始文件这些都是必须要拷贝走的。除此之外还有scaffolds文件夹(文件的模板)，package.json(使用哪些包)，.gitignore(提交忽略哪些文件夹)</li><li>总结：</li><li>_config.yml</li><li>themes</li><li>source</li><li>scaffolds</li><li>package.json</li><li>.gitignore<br>是需要备份的，其他文件不需要管。</li></ul><h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><h3 id="安装hexo软件"><a href="#安装hexo软件" class="headerlink" title="安装hexo软件"></a>安装hexo软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把必须拷贝的文件，拷贝到新建的文件夹内，执行以下命令</span></span><br><span class="line"><span class="comment"># 在新建的文件夹内打开命令行，安装必要的模块，初始化</span></span><br><span class="line"><span class="comment"># 这里不用hexo init初始化，因为配置文件我们已经拷贝过来</span></span><br><span class="line"></span><br><span class="line">npm install  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其他一些必要的组件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="迁移hexo用到的相关命令"><a href="#迁移hexo用到的相关命令" class="headerlink" title="迁移hexo用到的相关命令"></a>迁移hexo用到的相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"coder-zhanglei"</span> <span class="comment">#设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">"1357028281@qq.com"</span> <span class="comment">#设置邮箱</span></span><br><span class="line">git config user.name <span class="comment">#查询设置的用户名</span></span><br><span class="line">git config user.email <span class="comment">#查询设置的邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 正式部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="MARKDOWn编辑"><a href="#MARKDOWn编辑" class="headerlink" title="MARKDOWn编辑"></a>MARKDOWn编辑</h2><h3 id="vscode安装如下插件即可实现markdown语法的编辑"><a href="#vscode安装如下插件即可实现markdown语法的编辑" class="headerlink" title="vscode安装如下插件即可实现markdown语法的编辑"></a>vscode安装如下插件即可实现markdown语法的编辑</h3><ul><li>1、markdown all in one</li><li>2、markdown Preview enhanced，将原生markdown预览的黑色背景改为白色</li><li>3、markdown preview github stying，Github风格的预览</li></ul><label style="color:red">注：这三个插件是实现markdown编辑预览的基本插件，实现更多的markdown语法的功能，可探索更多相关的插件。</label><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>1、 hexo d提交时出现错误：<em>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/do" target="_blank" rel="noopener">http://hexo.io/do</a>  TypeError [ERR_INVALID_ARG_TYPE]</em>:</p><label style="color:red">解决方法：</label>该问题是node.js版本过高，切换会旧版本即可，旧版本为：node-v12.22.9-x64.msi<br><br>2、  OpenSSL SSL_read: Connection was reset, <label style="color:red">errno 10054</label><label style="color:red">解决方法：</label>执行命令<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">"false"</span></span><br></pre></td></tr></table></figure><br><br>3、 Failed to connect to github.com <label style="color:red">port 443 after 21098 ms:</label> Timed out<br><br><label style="color:red">解决方法：</label><p><label style="color:blue">解决方法：</label>我们直接在终端先输入设置代理的命令，再输入取消代理的命令即可解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;迁移时候主要用到可参考的博客&quot;&gt;&lt;a href=&quot;#迁移时候主要用到可参考的博客&quot; class=&quot;headerlink&quot; title=&quot;迁移时候主要用到可参考的博客&quot;&gt;&lt;/a&gt;迁移时候主要用到可参考的博客&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="初识hexo" scheme="http://yoursite.com/categories/初识hexo/"/>
    
    
    <category term="初识hexo" scheme="http://yoursite.com/tags/初识hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 文章特性设置</title>
    <link href="http://yoursite.com/2021/10/24/hexo-%E6%96%87%E7%AB%A0%E7%89%B9%E6%80%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2021/10/24/hexo-%E6%96%87%E7%AB%A0%E7%89%B9%E6%80%A7%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-10-24T14:45:11.000Z</published>
    <updated>2022-03-12T14:13:27.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为字体添加颜色"><a href="#为字体添加颜色" class="headerlink" title="为字体添加颜色"></a>为字体添加颜色</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>这是<label style="color:red">红色</label>字体<br>这是<label style="color:green">绿色</label>字体<br>这是<label style="color:yellow">黄色</label>字体<br>这是<label style="color:blue">蓝色</label>字体<br>这是<label style="color:cyan">青色，蓝绿色</label>字体</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是&lt;label style=&quot;color:red&quot;&gt;红色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:green&quot;&gt;绿色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:yellow&quot;&gt;黄色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:blue&quot;&gt;蓝色&lt;/label&gt;字体</span><br><span class="line">这是&lt;label style=&quot;color:cyan&quot;&gt;青色，蓝绿色&lt;/label&gt;字体</span><br></pre></td></tr></table></figure><h2 id="文字风格设置"><a href="#文字风格设置" class="headerlink" title="文字风格设置"></a>文字风格设置</h2><p>内容块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这里的内容显示在内容块中</span><br></pre></td></tr></table></figure><p>显示效果</p><blockquote><p>这里的内容是在内容快中显示的</p></blockquote><p>删除线（中划线），需要使用“~”来包含需要删除线的文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~fsadfsa~~</span><br></pre></td></tr></table></figure><p>效果显示</p><blockquote><p><del>fsadfsa</del></p></blockquote><p>下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure></p><p>效果显示</p><blockquote><p><u>下划线的文本</u></p></blockquote><p>粗体+斜体，需要使用“***”，也就是三个星号，来包含需要粗体和斜体的文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***也就是三个星号***</span><br></pre></td></tr></table></figure></p><p>显示效果</p><blockquote><p><strong><em>也就是三个星号</em></strong></p></blockquote><p>斜体，需要使用“*”，也就是一个星号，来包含需要斜体的文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*也就是一个星号*</span><br></pre></td></tr></table></figure><p>效果显示</p><blockquote><p><em>也就是一个星号</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为字体添加颜色&quot;&gt;&lt;a href=&quot;#为字体添加颜色&quot; class=&quot;headerlink&quot; title=&quot;为字体添加颜色&quot;&gt;&lt;/a&gt;为字体添加颜色&lt;/h2&gt;&lt;h3 id=&quot;效果展示&quot;&gt;&lt;a href=&quot;#效果展示&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="初识hexo" scheme="http://yoursite.com/categories/初识hexo/"/>
    
    
    <category term="初识hexo" scheme="http://yoursite.com/tags/初识hexo/"/>
    
  </entry>
  
  <entry>
    <title>FPGA电子系统设计方法</title>
    <link href="http://yoursite.com/2019/12/31/FPGA%E7%94%B5%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/12/31/FPGA%E7%94%B5%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</id>
    <published>2019-12-31T02:33:06.000Z</published>
    <updated>2020-01-01T09:11:57.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电子系统设计步骤"><a href="#电子系统设计步骤" class="headerlink" title="电子系统设计步骤"></a>电子系统设计步骤</h2><p>  电子系统设计–&gt; 电子系统实验调试–&gt; 制作电路板–&gt;电子系统安装–&gt; 电子系统调试–&gt; 合格成品</p><h3 id="总体方案确定"><a href="#总体方案确定" class="headerlink" title="总体方案确定"></a>总体方案确定</h3><p>   根据掌握的资料，将总体系统分为若干个子系统（硬件单元电路。软件设计的功能模块），并画出有各个子系统相互连接而形成系统原理框图。<br>多分析，多思考，多比较，要从稳定性、工作可靠性、电路简单、成本低、功耗小、调试维修方便等方面综合考量，选出最佳方案。</p><p>1、硬件单元电路设计<br>  为了使电子系统的体积小，可靠性高，单元电路尽可能使集成电路组成。计算单元电路参数时应注意以下几点：<br>  （1） 在计算元器件工作电流、电压和功率等参数时，应考虑工作条件最为不利的情况，并留有适当的余量。<br>  （2） 对于原器件的极限参数必须留有足够的余量，一般取1.5~2倍的额定值<br>  （3） 对于电阻、电容参数的取值，应选计算值附近的标称值。电阻值一般在1MΩ内选择：非电解电容一般在100pf~0.47F选择；电解电容一般在1~2000uf范围内选用。<br>  （4）在保证电路达到功能指标要求的前提下。尽量减少元器件的品种，价格，体积等。<br>2、软件设计<br>   软件设计首先要完成功能模块的设计，功能模块设计好后可以反复使用。用VHDL语言编程写功能模块，用图形输入的方法将各个功能模块连接起来。<br>3、元器件的选择<br>    （1）一般优先选择集成电路<br>    （2）电阻器和电容器是两种最长见的元器件<br>    （3）分立半导体的选择<br>4、计算机模拟仿真<br>5、实验调试<br>6、绘总体电路图<br>  （1） 总体电路图尽可能画在同一张图上；注意信号的流向，一般从输入端画起，由左向右或由上至下按信号的流向依次画出各单元电路。<br>  （2） 注意总体电路图的紧凑和协调，要求布局合理、排列均匀。<br>  （3） 连线一般画成水平线或垂直线，尽可能的减少交叉和拐弯。</p><h3 id="元器件布局与布线"><a href="#元器件布局与布线" class="headerlink" title="元器件布局与布线"></a>元器件布局与布线</h3><p>1、 按照信号流走向布局<br>2、 优先确定特殊元器件位置<br>3、 防止电磁干扰<br>    （1）减小磁力线对印制导线的切割<br>    （2）两个电感类元件的位置应当使它们的磁场方向相互垂直，减小彼此间的磁力线耦合<br>    （3）对干扰源进行磁屏蔽，屏蔽罩应该良好接地<br>    （4）使用高频电缆直接传输信号时，电缆的屏蔽层应该一端接地<br>4、抑制热干扰<br>  首先要区分发热元器件和温度敏感元器件，尽量不要把几个发热元器件放在一起，并且考虑使用散热器或小风扇等装置，使元器件的温升不超过允许值。大功率器件可以直接固定在机壳上，利用金属外壳传导散热。</p><h3 id="印制焊盘的尺寸及形状"><a href="#印制焊盘的尺寸及形状" class="headerlink" title="印制焊盘的尺寸及形状"></a>印制焊盘的尺寸及形状</h3><p>  1、焊盘的内径（引线孔的直径）<br>  2、焊盘的外径<br>  3、焊盘形状<br>  4、灵活设计焊盘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电子系统设计步骤&quot;&gt;&lt;a href=&quot;#电子系统设计步骤&quot; class=&quot;headerlink&quot; title=&quot;电子系统设计步骤&quot;&gt;&lt;/a&gt;电子系统设计步骤&lt;/h2&gt;&lt;p&gt;  电子系统设计–&amp;gt; 电子系统实验调试–&amp;gt; 制作电路板–&amp;gt;电子系统安装–&amp;</summary>
      
    
    
    
    <category term="FPGA学习笔记" scheme="http://yoursite.com/categories/FPGA学习笔记/"/>
    
    
    <category term="FPGA电子系统设计" scheme="http://yoursite.com/tags/FPGA电子系统设计/"/>
    
  </entry>
  
  <entry>
    <title>软件工程-第二章：系统设计</title>
    <link href="http://yoursite.com/2019/11/02/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/11/02/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-11-02T12:00:24.000Z</published>
    <updated>2019-11-03T03:08:43.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构化分析"><a href="#结构化分析" class="headerlink" title="结构化分析"></a>结构化分析</h2><p>  结构化方法遵循的原理是自顶向下、逐步求精，使用的工具有数据流图、数据字典、判定表、判定树和结构化语言等。<br>  1969年Bohm和jacopini首次证明了只要用三种结构（顺序，选择和循环）就能表达一个入口和出口的流程图所能表达的任何程序<br>逻辑。</p><h2 id="面向对象分析的基本过程"><a href="#面向对象分析的基本过程" class="headerlink" title="面向对象分析的基本过程"></a>面向对象分析的基本过程</h2><p>  需求陈述的内容包括问题范围、功能需求、性能需求、应用环境及假设条件等。</p><h3 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h3><p>  面向对象建模得到模型包含对象的三个要素：对象模型（静态结构）、交互次序（动态结构）和数据变换（功能模型）。大型系统的对<br>象模型由4个层次组成：主题层、对象层、特征层（可细分为属性层、服务层）、关系层。</p><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>  结构设计的一般准则：划分模块时，尽量做到高内聚，低耦合，保持模块的相对独立性，以此为原则优化初始化的软件结构。</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>  所有软件结构设计都是要以模块化为基础，模块由单独命名和可编程的构件集成，以满足问题的需求。模块的基本属性有：</p><ul><li>接口：模块的输入输出口</li><li>功能：指模块实现什么功能</li><li>逻辑：描述内部如何实现要求的功能及所需的数据</li><li>状态：指模块的运行环境，即模块的调用与被调用关系<br>在设计模块时要考虑软件的模块数目、模块接口成本和软件总成本之间的关系。<br>模块数越多接口越多。<h4 id="模块的耦合"><a href="#模块的耦合" class="headerlink" title="模块的耦合"></a>模块的耦合</h4>耦合表示软件结构内不同模块彼此之间相互依赖的紧密程度，是衡量软件模块结构质量好坏的度量。软件设计应追求尽可能的松散合<br>，避免强耦合。越松散，模块间的联系就越少。模块的独立性就越强。<br>一般的耦合分为：数据、控制、公共环境、内容和标记耦合。<br>耦合原则：尽量使用数据耦合，少使用控制耦合，限制公共耦合，完全不使用内容耦合。<h4 id="模块的内聚"><a href="#模块的内聚" class="headerlink" title="模块的内聚"></a>模块的内聚</h4>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。简单的说，理想内聚的模块只做一件事<br>。<br>模块尽量使用高内聚，少用中内聚，不用低内聚。<h3 id="设计的优化"><a href="#设计的优化" class="headerlink" title="设计的优化"></a>设计的优化</h3>（1） 输入部分求精<br>（2） 输出部分求精<br>（3） 变化部分求精<h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3>描述详细设计的常用的三种工具：图形，表格和语言，以下是设计的具体方法。</li><li>结构化语言</li><li>判定表</li><li>判定树</li><li>结构化程序设计<h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><h4 id="面向对象抽象方法"><a href="#面向对象抽象方法" class="headerlink" title="面向对象抽象方法"></a>面向对象抽象方法</h4>分类的原则是抽象，即忽略事物的非本质特征，只注意那些与当前目标相关的本质特征，从而找出事物的特性，把具有共同性质的事<br>物划分为一类，得到一个抽象的概念。<br>面向对象方法支持过程抽象和数据抽象。类似一种抽象数据类型，对外提供方法，对内封装数据及实现。参数化抽象是指在类的规格<br>说明描述时，不具体说明所要操作的数据类型，而是把数据类型作为参数。这使得类的抽象程度更高。比如c++中的“模板”机制。</li></ul><h4 id="面向对象的基本原理"><a href="#面向对象的基本原理" class="headerlink" title="面向对象的基本原理"></a>面向对象的基本原理</h4><p>面向对象的而基本原理如下：<br>（1） 抽象（过程，数据）<br>（2） 封装<br>（3） 继承<br>（4） 消息<br>（5） 组织方法（对象和属性、类专成员、整体与部分）<br>（6） 功能分类（基本函数，状态-文件-响应、对象生命历程）<br>（7） 分类结论<br>（8） 组织结构<br>（9） 实例连接<br>（10） 消息连接</p><h2 id="数据库系统模型和结构"><a href="#数据库系统模型和结构" class="headerlink" title="数据库系统模型和结构"></a>数据库系统模型和结构</h2><h3 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h3><p>（1） 层次模型<br>（2） 网状模型<br>（3） 关系模型<br>（4） 数据独立存取模型</p><h3 id="关系数据库的范式理论"><a href="#关系数据库的范式理论" class="headerlink" title="关系数据库的范式理论"></a>关系数据库的范式理论</h3><p>  有5中不同层次的范式：第一范式（1nf）、第二范式（2nf）、第三范式（3nf）、第四范式（4nf）、第五范式（5nf）。一个<br>低一级范式的关系模型，通过分解方法转换为若干个高一级范式的关系模式的集合，称为规范化。</p><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>  要求元组中的每一个数据项都不能再分割，都是原子项，记作1NF。简单的说就是表中每一个元素都是单一的、不可再分的数据。</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>  满足第一范式，并且每个非关键字属性都完全依赖于主关键字。</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>  符合第二范式，所有非关键字属性之间不存在函数依赖关系。即非主关键字不能拆分为其他关键字的组合。</p><h4 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h4><p>  符合第三范式，在关系模型中没有超过一个的多值事实。多值事实就是某个属性有若干个值，这些值由另一个属性的一个值决定。</p><h4 id="第五范式"><a href="#第五范式" class="headerlink" title="第五范式"></a>第五范式</h4><p>  符合第五范式的表不能分解成两个或则多个表，且不丢失信息。</p><h3 id="范式之间的关系"><a href="#范式之间的关系" class="headerlink" title="范式之间的关系"></a>范式之间的关系</h3><p>  一般程度来说，规范化程度低会造成数据冗余和操作异常，但是范式程度低则检索直接，处理比较简单；范式程度高可以减少操作异<br>常和减少数据冗余，但是规范化程度高则在检索是要访问更多的关系，即需要做更多的操作，比较复杂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构化分析&quot;&gt;&lt;a href=&quot;#结构化分析&quot; class=&quot;headerlink&quot; title=&quot;结构化分析&quot;&gt;&lt;/a&gt;结构化分析&lt;/h2&gt;&lt;p&gt;  结构化方法遵循的原理是自顶向下、逐步求精，使用的工具有数据流图、数据字典、判定表、判定树和结构化语言等。&lt;br&gt;</summary>
      
    
    
    
    <category term="软件工程学习" scheme="http://yoursite.com/categories/软件工程学习/"/>
    
    
    <category term="系统设计" scheme="http://yoursite.com/tags/系统设计/"/>
    
  </entry>
  
  <entry>
    <title>matlab 最优化设计</title>
    <link href="http://yoursite.com/2019/08/22/matlab-%E6%9C%80%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/08/22/matlab-%E6%9C%80%E4%BC%98%E5%8C%96%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-08-22T09:27:59.000Z</published>
    <updated>2019-11-02T12:16:45.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性规划（line-programming）"><a href="#线性规划（line-programming）" class="headerlink" title="线性规划（line programming）"></a>线性规划（line programming）</h2><h3 id="MATLAB-求解"><a href="#MATLAB-求解" class="headerlink" title="MATLAB 求解"></a>MATLAB 求解</h3><ul><li>lineprog()是解线性规划的命令。调用格式在软件中可查。</li><li>lsqnonlin()是解决非线性最小二乘法问题。<h2 id="数理统计分析"><a href="#数理统计分析" class="headerlink" title="数理统计分析"></a>数理统计分析</h2>对离散数据和连续数据进行分析处理，即数理统计分析。matlab中包括曲线拟合和回归分析。<h3 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h3>计算样本均值的函数是mean。<h2 id="样本方差与标准差"><a href="#样本方差与标准差" class="headerlink" title="样本方差与标准差"></a>样本方差与标准差</h2>计算样本方差的函数是var；<br>标准差的函数为std；<h2 id="协方差和相关系数"><a href="#协方差和相关系数" class="headerlink" title="协方差和相关系数"></a>协方差和相关系数</h2>计算协方差的函数为cov；<br>计算相关系数的函数为corroef；<br>lyfit(x,y,n):表示用二乘法对已知数据x，y进行拟合，以求得n阶多项式系数向量。<br>[p,s] = polyfit(x,y,n) p为拟合多项式系数向量，s为拟合多项式系数向量的信息结构。<h3 id="函数线性组合"><a href="#函数线性组合" class="headerlink" title="函数线性组合"></a>函数线性组合</h3>g(x) = c1 + c2e^-2x + c3cos(-2x)e^-4x + c4x^2;求出待定系数。<br>实验数据<br>| x        | 0     |   0.2   |   0.4   |  0.7    |  0.9     |   0.92  |<br>| y        | 2.88  | 2.2576  |  1.9638 | 1.9258  | 2.0862   |   2.109  |<br>解：<br>（1） 编写M文件<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yy</span> = <span class="title">linefit2</span><span class="params">(x,y,A)</span></span></span><br><span class="line">n = <span class="built_in">length</span>(x);</span><br><span class="line">y = <span class="built_in">reshape</span>(y,n,<span class="number">1</span>);</span><br><span class="line">A = A';</span><br><span class="line">yy = A\y;</span><br><span class="line">yy = yy';</span><br></pre></td></tr></table></figure></li></ul><p>(2) 变量量矩阵<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0</span> <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.7</span> <span class="number">0.9</span> <span class="number">0.92</span>];</span><br><span class="line">y = [<span class="number">2.88</span> <span class="number">2.2576</span> <span class="number">1.9638</span> <span class="number">1.9258</span> <span class="number">2.0862</span> <span class="number">2.109</span>];</span><br></pre></td></tr></table></figure></p><p>(3) 输入表达式<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = [ones(size(x)); exp(<span class="number">-2</span>*x);cos(<span class="number">-2</span>*x).*exp(<span class="number">-4</span>*x);x.^<span class="number">2</span>];</span><br></pre></td></tr></table></figure></p><p>(4) 调用linefit2函数<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy = linefit2(x,y,A);</span><br></pre></td></tr></table></figure></p><p>(5) 绘制图形<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plot(x,y1);</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">0.92</span>]';</span><br><span class="line">A1 = [ones(size(x)); exp(<span class="number">-2</span>*x);cos(<span class="number">-2</span>*x).*exp(<span class="number">-4</span>*x);x.^<span class="number">2</span>];</span><br><span class="line">y1 = A1 * yy';</span><br><span class="line">plot(x,y1);</span><br></pre></td></tr></table></figure></p><h2 id="最小二乘法曲线拟合"><a href="#最小二乘法曲线拟合" class="headerlink" title="最小二乘法曲线拟合"></a>最小二乘法曲线拟合</h2><p>  MATLAB提供了polyfit函数命令进行最小二乘法的曲线拟合。<br>  p = ployfit(x,y,n) 对向量x和y进行n维多项式的最小二乘拟合，输出结果P为含有n+1个元素的行向量，该向量以维数递减的形式给出多项式的系数。n为次数。</p><h2 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h2><p>  变量之间的关系可以分为两种：确定性的函数关系和不确定性统计关系。统计分析是研究统计关系的一种数学方法，<strong>可以由一个变量的值去估计另一个变量的值。</strong>  </p><h3 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h3><p>  如果在总体中，因变量与自变量的统计关系符合一元线性的正态误差模型，即对给定的Xi有Yi=b0+b1xi+ε。<br>  matlab提供的一元线性回归函数为polyfit，因为一元线性回归其实就是一阶多项式拟合。</p><h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><p>   对于因变量y的全面解释往往需要多个自变量的共同作用。当有p个自变量x1,x2,…..xp时，多元线性回归的理论模型为：<br>   y = β0+β1x1+….+βxp+ε;<br>   其中，ε是随机误差，E(ε) = 0；<br>   matlab提供了regress函数进行多元线性回归，。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性规划（line-programming）&quot;&gt;&lt;a href=&quot;#线性规划（line-programming）&quot; class=&quot;headerlink&quot; title=&quot;线性规划（line programming）&quot;&gt;&lt;/a&gt;线性规划（line programmin</summary>
      
    
    
    
    <category term="matlab学习" scheme="http://yoursite.com/categories/matlab学习/"/>
    
    
    <category term="matlab基础知识" scheme="http://yoursite.com/tags/matlab基础知识/"/>
    
  </entry>
  
  <entry>
    <title>matlab 图形绘制</title>
    <link href="http://yoursite.com/2019/08/07/matlab-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/07/matlab-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</id>
    <published>2019-08-07T07:29:45.000Z</published>
    <updated>2019-08-16T02:38:30.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二维曲线的绘制"><a href="#二维曲线的绘制" class="headerlink" title="二维曲线的绘制"></a>二维曲线的绘制</h2><h3 id="相关的绘图命令"><a href="#相关的绘图命令" class="headerlink" title="相关的绘图命令"></a>相关的绘图命令</h3><p>1、 figure</p><ul><li>figure：创建一个图形窗口。</li><li>figure(n)：n是正整数，创建一个编号为n的图形窗口</li><li>figure(‘PropertyName’,’PropertyValue’,…):对指定的属性PropertyName，用指定的属性值PropertyValue创建一个新的图形窗口。<br>2、 plot</li><li>plot(x)</li><li>plot(x,y)</li><li>plot(x1,y1,x2,y2)</li><li>plot(x,y,s)其中x，y为向量或矩阵，s为用单引号标记的字符串，用来设置所画数据点的类型、大小、颜色以及数据点之间的连线的类型、粗细、颜色等。实际应用中，s是某些字母或符号的组合。</li><li>plot(x1,y1,s1,x2,y2,s2……)<br>3、 多图形显示<br>(1)、 图形分割</li><li>subplot(m,n,p)将当前窗口分割为m×n个视图区域，并指定地p个视图为当前视图。</li><li>subplot(‘position’,[left bottom width height]):产生的新子区域的位置由用户指定，后面的四元组为区域的具体参数控制，宽高的取值范围都是[0,9]</li></ul><h3 id="图形的叠加"><a href="#图形的叠加" class="headerlink" title="图形的叠加"></a>图形的叠加</h3><p>图形保持命令hold on/off控制原有图形的保持与不保持</p><h3 id="一元函数的绘制fplot"><a href="#一元函数的绘制fplot" class="headerlink" title="一元函数的绘制fplot"></a>一元函数的绘制fplot</h3><ul><li>plot命令是依据给定的数据点来做图的，在实际情况中，一般不清楚函数具体情况，因此依据所选取的数据点作图可能会忽略真实函数的某些特性。</li><li>fplot命令用于指导数据点的选取，通过其内部自适应算法，在函数变化比较平稳处，它所区的值相对稀疏些，在函数变化明显处取的数据点自动密一些。</li></ul><h3 id="图形注释"><a href="#图形注释" class="headerlink" title="图形注释"></a>图形注释</h3><ul><li>title(‘string’),title(fname)</li><li>h = title(….)</li><li>xlable(‘string’)在当前轴对象中的x轴标注说明语句string</li><li>ylabel(‘’)在当前轴对象中的y轴标注说明语句string</li><li>text(x,y,’string’)在图形中指定的位置（x,y）上显示字符串string</li><li>gtext（‘string’,’property’,’propertyvalue’）可以让鼠标在图形的任意位置进行标注。<h3 id="图例标注"><a href="#图例标注" class="headerlink" title="图例标注"></a>图例标注</h3>当在一幅图中出现多种曲线时，用户可以根据自己的需要，利用legend命令对不同的图例进行说明。</li></ul><h2 id="编译-m文件"><a href="#编译-m文件" class="headerlink" title="编译.m文件"></a>编译.m文件</h2><p> 在命令窗口中输入<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mcc -m test.m</span><br></pre></td></tr></table></figure></p><h2 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h2><p>1、 利用moviein命令对内存进行初始化，创建一个足够大的矩阵，使其能够容纳基于当前坐标轴大小的一系列指定的图形（帧）；moviein(n)可以创建一个足够大的n列矩阵。<br>2、 利用getframe命令生成每个帧。<br>3、 利用movie命令按照指定的速度和次数运行该动画，movie(M,n)可以播放由矩阵M所定义的画面n次默认n时，播放一次。<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[X,Y,Z] = peaks(<span class="number">30</span>);</span><br><span class="line">surf(X,Y,Z)</span><br><span class="line">axis([<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-10</span>,<span class="number">10</span>])</span><br><span class="line">axis off</span><br><span class="line">shading interp</span><br><span class="line">colormap(hot)</span><br><span class="line">M = moviein(<span class="number">20</span>);<span class="comment">%建立一个20列的大矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>= <span class="number">1</span>:<span class="number">20</span></span><br><span class="line">    view(<span class="number">-37.5</span>+<span class="number">24</span>*(<span class="built_in">i</span><span class="number">-1</span>),<span class="number">30</span>)<span class="comment">%改变视点</span></span><br><span class="line">    M(:,<span class="built_in">i</span>) = getframe; <span class="comment">%将图像保存到M矩阵中</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">movie(M,<span class="number">2</span>)<span class="comment">%画面播放两次</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二维曲线的绘制&quot;&gt;&lt;a href=&quot;#二维曲线的绘制&quot; class=&quot;headerlink&quot; title=&quot;二维曲线的绘制&quot;&gt;&lt;/a&gt;二维曲线的绘制&lt;/h2&gt;&lt;h3 id=&quot;相关的绘图命令&quot;&gt;&lt;a href=&quot;#相关的绘图命令&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="matlab学习" scheme="http://yoursite.com/categories/matlab学习/"/>
    
    
    <category term="matlab基础知识" scheme="http://yoursite.com/tags/matlab基础知识/"/>
    
  </entry>
  
  <entry>
    <title>matlab 程序设计基础</title>
    <link href="http://yoursite.com/2019/08/03/matlab-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/08/03/matlab-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/</id>
    <published>2019-08-03T07:10:40.000Z</published>
    <updated>2019-08-03T14:06:56.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p>  程序设计语言，程序结构大致可分为顺序结构，循环结构，与分支结构三类。</p><h3 id="程序流程控制指令"><a href="#程序流程控制指令" class="headerlink" title="程序流程控制指令"></a>程序流程控制指令</h3><p>1、 中断命令break<br>2、 return命令<br>3、 等待用户反应命令pause<br>   pause指令是暂停指令。程序运行时，到pause指令执行后，程序将暂停，等待用户按任意键后而继续执行。</p><ul><li>pause 暂停程序等待回应</li><li>pause(n) 程序运行过程中，等待n秒后继续运行</li><li>pause on 显示其后的pause指令，并执行pause指令</li><li>pause off 显示其后的pause指令，但不执行该指令<h2 id="人机交互语句"><a href="#人机交互语句" class="headerlink" title="人机交互语句"></a>人机交互语句</h2>1、 input命令<br>v= input(‘string’)  %以文本字符串string为信息给出用户提示信息，将用户输入的内容赋值给变量v<br>v = input(‘string’,’s’) % 以文本字符串string为信息给出用户提示信息，将用户输入的内容作为字符串赋值给变量v<br>2、 keyboard命令<br> 是调用键盘命令。当用户输入return并按enter键后，控制权交还给M文件。<br>3、 menu命令<br>生成一个菜单供用户选择输入<br>k = menu(‘mtitle’,’opt1’,’opt2’,…..,’optn’)<h2 id="子函数与私有函数"><a href="#子函数与私有函数" class="headerlink" title="子函数与私有函数"></a>子函数与私有函数</h2><h3 id="子函数"><a href="#子函数" class="headerlink" title="子函数"></a>子函数</h3> 在函数文件中定义的函数作为主函数，而在函数体内定义的其他函数均被视作子函数。子函数只能为主函数或同一主函数下其他的子函数所调用。<h3 id="私有函数"><a href="#私有函数" class="headerlink" title="私有函数"></a>私有函数</h3> MATLAB语言中把放置在目录private下的函数称为私有函数，这些函数只有private目录的父目录中的函数才能调用，其他目录的函数不能调用</li></ul><h3 id="子函数与私有函数的区别"><a href="#子函数与私有函数的区别" class="headerlink" title="子函数与私有函数的区别"></a>子函数与私有函数的区别</h3><p>1、 私有函数在可用的范围上大于子函数<br>2、 在函数编辑上的结构上，私有函数与一般的函数文件的编辑相同，而子函数则只能在主函数文件中编辑。<br>3、 当在MATLAB的M文件中调用函数时，首先检测该函数是否为此文件加下的子函数，若否，则检测是否为可用的私有函数，任然否，检测该函数是否为MATLAB搜索路径上的其他M文件。</p><h2 id="程序设计的优化"><a href="#程序设计的优化" class="headerlink" title="程序设计的优化"></a>程序设计的优化</h2><p>  虽然在MATLAB语言中没有规定使用变量是必须先定义，但是对于未定义的变量，如果操作系统出现越界赋值时，系统将不得不对变量进行扩充，这样大大降低了程序的运行效率，对于可能出现变量的维度不断扩大的情况下，应当预先估计变量可能出现的最大维度，进行预定义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;程序结构&quot;&gt;&lt;a href=&quot;#程序结构&quot; class=&quot;headerlink&quot; title=&quot;程序结构&quot;&gt;&lt;/a&gt;程序结构&lt;/h2&gt;&lt;p&gt;  程序设计语言，程序结构大致可分为顺序结构，循环结构，与分支结构三类。&lt;/p&gt;
&lt;h3 id=&quot;程序流程控制指令&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="matlab学习" scheme="http://yoursite.com/categories/matlab学习/"/>
    
    
    <category term="matlab基础知识" scheme="http://yoursite.com/tags/matlab基础知识/"/>
    
  </entry>
  
  <entry>
    <title>matlab基础知识</title>
    <link href="http://yoursite.com/2019/07/30/matlab%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/07/30/matlab%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2019-07-30T03:41:03.000Z</published>
    <updated>2019-08-02T07:57:39.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="matlab基本命令"><a href="#matlab基本命令" class="headerlink" title="matlab基本命令"></a>matlab基本命令</h2><p>1、 path命令<br>  在matlab的命令行中输入可以得到matlab的所有搜索路径。使用path扩展搜索目录：path(path,’D:\matlab’)<br>2、 genpath命令<br>  在命令行中输入可以得到，有MATLAB所有的搜索路径连接而成的一个长字符串。<br>3、 使addpath命令扩展目录<br>   addpathD:\matlab -begin 将matlab添加到整个搜索路径的开始<br>   addpathD:\matlab -end 将matlab添加到整个搜索路径的末尾。</p><h3 id="MATLAB帮助系统"><a href="#MATLAB帮助系统" class="headerlink" title="MATLAB帮助系统"></a>MATLAB帮助系统</h3><p>1、 帮助命令<br> help、help+函数名（类）、helpwin和helpdesk，其中后两个是用来调用MATLAB联机帮助窗口。<br>2、 lookfor函数<br>   当用户不知道某个函数的确切名称，可以用lookfor函数，根据关键字搜索。<br>3、 其他的帮助命令</p><ul><li>who：内存变量列表</li><li>whos：内存变量的详细信息</li><li>what：目录中的文件列表</li><li>which：确定文件位置</li><li>exist：变量检验函数<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3>1、 cd：显示或者改变工作目录<br>2、 clc：清除工作窗<br>3、 clear：清除内存变量<h3 id="续行符"><a href="#续行符" class="headerlink" title="续行符"></a>续行符</h3> “…”用3个或3个以上的连续黑点表示“续行”</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>   主要的数据类型：数字，字符串，向量，矩阵，单元型数据及结构型数据</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><p>   在未加特殊说明的情况下，matlab语言将所识别的一切变量视为局部变量，仅在其使用的M文件内有效。如果要将其定义为全局变量<br>加关键字global。</p><h3 id="数字的显示格式"><a href="#数字的显示格式" class="headerlink" title="数字的显示格式"></a>数字的显示格式</h3><p>  在默认的状态下，数据为整型，以整数表示，数据为实数，保留小数后4位的精度近式值。</p><h4 id="format控制数字显示格式"><a href="#format控制数字显示格式" class="headerlink" title="format控制数字显示格式"></a>format控制数字显示格式</h4><p>  format long,pi ;15位定点表示<br>  基本格式：format后加变量的类型用逗号隔开，加要输出的变量。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>  所有的字符串都用单引号设定后输入或赋值；字符串相关函数以str开头。</p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><ul><li>冒号法创建向量：x = first：increment：last；向量就相当于一维数组。</li><li>对数分隔的向量，x = logspace（first_value,last_value,number）</li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="矩阵的创建"><a href="#矩阵的创建" class="headerlink" title="矩阵的创建"></a>矩阵的创建</h3><ul><li>eye函数；创建单位矩阵；eye（size(A)） 创建和A相同的单位矩阵</li><li>rand函数，创建随机矩阵</li><li>compan(P) 创建系数向量是P的多项式伴随矩阵</li><li>diag(v)  创建一向量v中的元素为对角的对角阵</li><li>hilb(n) 创建nxn的Hilbert矩阵</li><li>zeros</li><li>ones</li></ul><h3 id="矩阵元素的修改"><a href="#矩阵元素的修改" class="headerlink" title="矩阵元素的修改"></a>矩阵元素的修改</h3><p>  A(m,:) = [] ;删除A的第m行<br>  A(:,n) = [] ;删除A的第n列<br>  A(m,n) = a; 对m行n列的元素赋值  </p><h2 id="单元型变量"><a href="#单元型变量" class="headerlink" title="单元型变量"></a>单元型变量</h2><p>  单元型变量是以单元为元素的数组，每个元素称为单元，每个单元可以包含其他类型的数组，如实数矩阵、字符串，复数向量。单元<br>变量通常用{}创建，其数据通过数组下标来引用。A={}；</p><h2 id="结构型变量"><a href="#结构型变量" class="headerlink" title="结构型变量"></a>结构型变量</h2><p>  结构型变量是根据属性名（field）组织起来的不同数据类型的集合。结构的任何一个属性可以包含不同的数据类型，如字符串，矩阵等。结构型变量用函数struct来创建。s = struct(‘field’,{},’field2’,{},…)  ;s = struct(‘field’,values1,’field2,values2’)</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>.*   点乘</li><li>.^  点乘方</li><li>./  、 .\  点右除，点左除</li><li>‘  矩阵转置。当矩阵是复数时，求矩阵的共轭转置</li><li>.’ 矩阵转置。当矩阵是复数时，不求矩阵的共轭转置<br>注解：点运算是指元素点对点的运算，即矩阵内元素对元素之间的运算。点运算要求参与运算的变量在结构上必须是相似的。</li><li>~= 不等于</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;matlab基本命令&quot;&gt;&lt;a href=&quot;#matlab基本命令&quot; class=&quot;headerlink&quot; title=&quot;matlab基本命令&quot;&gt;&lt;/a&gt;matlab基本命令&lt;/h2&gt;&lt;p&gt;1、 path命令&lt;br&gt;  在matlab的命令行中输入可以得到matla</summary>
      
    
    
    
    <category term="matlab学习" scheme="http://yoursite.com/categories/matlab学习/"/>
    
    
    <category term="matlab基础知识" scheme="http://yoursite.com/tags/matlab基础知识/"/>
    
  </entry>
  
  <entry>
    <title>stm32 uip心得</title>
    <link href="http://yoursite.com/2019/06/25/stm32-uip%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2019/06/25/stm32-uip%E5%BF%83%E5%BE%97/</id>
    <published>2019-06-25T03:40:21.000Z</published>
    <updated>2019-06-25T04:37:15.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uip时钟"><a href="#uip时钟" class="headerlink" title="uip时钟"></a>uip时钟</h2><p>  uIP-APP文件夹下的clock-arch.c文件是记录数据收发的时钟，即协议的系统心跳，系统心跳是用stm32中的定时器进行定时。<br>改变定时的时间即可改变数据的收发速度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//clock-arch.c文件</span></span><br><span class="line"><span class="keyword">extern</span> u32 uip_timer;<span class="comment">//uip 计时器，每10ms增加1.</span></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">clock_time_t</span></span><br><span class="line">clock_time(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> uip_timer; <span class="comment">/* 10ms 单位 */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器文件下的定时中断</span></span><br><span class="line"><span class="comment">//定时器6中断服务程序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM6_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS </span></span><br><span class="line">OSIntEnter();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET) <span class="comment">//检查指定的TIM中断发生与否:TIM 中断源 </span></span><br><span class="line">&#123;</span><br><span class="line">        uip_timer++;<span class="comment">//uip计时器增加1</span></span><br><span class="line">&#125; </span><br><span class="line">TIM_ClearITPendingBit(TIM6, TIM_IT_Update);  <span class="comment">//清除TIMx的中断待处理位:TIM 中断源 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS</span></span><br><span class="line">OSIntExit();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>              </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><p>1、 初始化硬件参数<br>2、 初始化uip协议<br>3、 绑定本机ip地址<br>4、 绑定网关<br>5、 设置网络掩码<br>6、 监听网路端口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">uip_ipaddr_t</span> ipaddr;  <span class="comment">//定义uipIP地址变量</span></span><br><span class="line">   <span class="comment">//初始化硬件芯片-----ENC28J60</span></span><br><span class="line">    <span class="keyword">while</span>(tapdev_init())<span class="comment">//初始化ENC28J60错误</span></span><br><span class="line">&#123;   </span><br><span class="line">delay_ms(<span class="number">200</span>);</span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">//初始化uip协议</span></span><br><span class="line">   uip_init();<span class="comment">//uIP初始化</span></span><br><span class="line">   AnalyzeIpAddress();   <span class="comment">//解析IP地址</span></span><br><span class="line">   uip_ipaddr(ipaddr, UIP_DRIPADDR0,UIP_DRIPADDR1,UIP_DRIPADDR2,UIP_DRIPADDR3);<span class="comment">//设置本地设置IP地址</span></span><br><span class="line">uip_sethostaddr(ipaddr);    </span><br><span class="line">uip_ipaddr(ipaddr, UIP_DRIPADDR0,UIP_DRIPADDR1,UIP_DRIPADDR2,UIP_DRIPADDR2); <span class="comment">//设置网关IP地址(其实就是你路由器的IP地址)</span></span><br><span class="line">uip_setdraddr(ipaddr); </span><br><span class="line">uip_ipaddr(ipaddr, <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>);<span class="comment">//设置网络掩码</span></span><br><span class="line">uip_setnetmask(ipaddr);</span><br><span class="line">   uip_listen(HTONS(<span class="number">1200</span>));<span class="comment">//监听1200端口,用于TCP Server</span></span><br></pre></td></tr></table></figure></p><h2 id="网络事件处理"><a href="#网络事件处理" class="headerlink" title="网络事件处理"></a>网络事件处理</h2><p>   uip_input(); IP包处理，该函数是和应用层结合的关键函数，该函数本质上是调用底层uip_process(UIP_DATA)函数，uip_process函数回调应用层的函数void tcp_server_demo_appcall(void)，<br>同理，事件轮询函数，即对每个client的事件的轮询函数uip_udp_periodic，都是调用uip_process，然后掉应应用层的回调函数，对每个client事件进行轮询。作为服务器可将数据发送到每个客户端。<br>在应用层里可以解析收到的数据和发送数据。(struct tcp_demo_appstate *)&amp;uip_conn-&gt;appstate; 该变量是存储需要发送的数据长度和数据内容。<br>   底层存储发送数据用的是uip_conn结构体，该结构体类有对应的ip和相应的应用层的数据接口，收到和发送的数据都存储在uip_buf中，数据的长度存储在uip_len中。应用层所有的操作都是对<br>底层变量uip_buf,和uip_len进行赋值。发送数据都先调用uip_arp_out()函数;加以太网头结构，然后调用硬件网格芯片接口函数tapdev_send();发送数据到以太网。在此之前已经在应用层回调函数中对发送的数据进行<br>赋值，即对uip_buf,和uip_len 进行了赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用层发送函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_server_senddata</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcp_demo_appstate</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">tcp_demo_appstate</span> *)&amp;<span class="title">uip_conn</span>-&gt;<span class="title">appstate</span>;</span></span><br><span class="line"><span class="comment">//s-&gt;textptr : 发送的数据包缓冲区指针</span></span><br><span class="line"><span class="comment">//s-&gt;textlen ：数据包的大小（单位字节）   </span></span><br><span class="line"><span class="keyword">if</span>(s-&gt;textlen&gt;<span class="number">0</span>)uip_send(s-&gt;textptr, s-&gt;textlen);<span class="comment">//发送TCP数据包 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//底层发送函数，对底层uip_buf变量进行赋值，对uip_len进行赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uip_send</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(len &gt; <span class="number">0</span>) </span><br><span class="line">  &#123;</span><br><span class="line">    uip_slen = len;</span><br><span class="line">    <span class="keyword">if</span>(data != uip_sappdata) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(uip_sappdata, (data), uip_slen);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真正的发送函数</span></span><br><span class="line">tapdev_send();<span class="comment">//发送数据到以太网，该数是对网络芯片的操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用层的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_server_demo_appcall</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcp_demo_appstate</span> *<span class="title">s</span> = (<span class="title">struct</span> <span class="title">tcp_demo_appstate</span> *)&amp;<span class="title">uip_conn</span>-&gt;<span class="title">appstate</span>;</span></span><br><span class="line"><span class="keyword">if</span>(uip_aborted())tcp_server_aborted();<span class="comment">//连接终止</span></span><br><span class="line"> <span class="keyword">if</span>(uip_timedout())tcp_server_timedout();<span class="comment">//连接超时   </span></span><br><span class="line"><span class="keyword">if</span>(uip_closed())tcp_server_closed();<span class="comment">//连接关闭   </span></span><br><span class="line"> <span class="keyword">if</span>(uip_connected())tcp_server_connected();<span class="comment">//连接成功    </span></span><br><span class="line"><span class="keyword">if</span>(uip_acked())tcp_server_acked();<span class="comment">//发送的数据成功送达 </span></span><br><span class="line"><span class="comment">//接收到一个新的TCP数据包 </span></span><br><span class="line"><span class="keyword">if</span> (uip_newdata())<span class="comment">//收到客户端发过来的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(uip_len&gt;<span class="number">199</span>)</span><br><span class="line">&#123;   </span><br><span class="line">((u8*)uip_appdata)[<span class="number">199</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;    </span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="keyword">char</span>*)tcp_server_receive,uip_appdata);</span><br><span class="line">tcp_server_sta|=<span class="number">1</span>&lt;&lt;<span class="number">6</span>;<span class="comment">//表示收到客户端数据</span></span><br><span class="line">            <span class="comment">//反馈信息可在这儿赋值</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tcp_server_sta&amp;(<span class="number">1</span>&lt;&lt;<span class="number">5</span>))<span class="comment">//有数据需要发送</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sendFlag &lt; clientFlag)</span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;textptr=tcp_server_sendCache;</span><br><span class="line">            s-&gt;textlen=<span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)tcp_server_sendCache);</span><br><span class="line">            sendFlag++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sendFlag = <span class="number">0</span>;</span><br><span class="line">            tcp_server_sta&amp;=~(<span class="number">1</span>&lt;&lt;<span class="number">5</span>);<span class="comment">//清除标记</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//当需要重发、新数据到达、数据包送达、连接建立时，通知uip发送数据 </span></span><br><span class="line"><span class="keyword">if</span>(uip_rexmit()||uip_newdata()||uip_acked()||uip_connected()||uip_poll())</span><br><span class="line">&#123;</span><br><span class="line">tcp_server_senddata();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络事件处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//uip事件处理函数</span></span><br><span class="line"><span class="comment">//必须将该函数插入用户主循环,循环调用.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uip_polling</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">timer</span> <span class="title">periodic_timer</span>, <span class="title">arp_timer</span>;</span></span><br><span class="line"><span class="keyword">static</span> u8 timer_ok=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">if</span>(timer_ok==<span class="number">0</span>)<span class="comment">//仅初始化一次</span></span><br><span class="line">&#123;</span><br><span class="line">timer_ok = <span class="number">1</span>;</span><br><span class="line">timer_set(&amp;periodic_timer,CLOCK_SECOND/<span class="number">2</span>);  <span class="comment">//创建1个0.5秒的定时器 </span></span><br><span class="line">timer_set(&amp;arp_timer,CLOCK_SECOND*<span class="number">10</span>);   <span class="comment">//创建1个10秒的定时器 </span></span><br><span class="line">&#125; </span><br><span class="line">uip_len=tapdev_read();<span class="comment">//从网络设备读取一个IP包,得到数据长度.uip_len在uip.c中定义</span></span><br><span class="line"><span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>) <span class="comment">//有数据</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//处理IP数据包(只有校验通过的IP包才会被接收) </span></span><br><span class="line"><span class="keyword">if</span>(BUF-&gt;type == htons(UIP_ETHTYPE_IP))<span class="comment">//是否是IP包? </span></span><br><span class="line">&#123;</span><br><span class="line">uip_arp_ipin();<span class="comment">//去除以太网头结构，更新ARP表</span></span><br><span class="line">uip_input();   <span class="comment">//IP包处理</span></span><br><span class="line"><span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量 uip_len &gt; 0</span></span><br><span class="line"><span class="comment">//需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)    </span></span><br><span class="line"><span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)<span class="comment">//需要回应数据</span></span><br><span class="line">&#123;</span><br><span class="line">uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (BUF-&gt;type==htons(UIP_ETHTYPE_ARP))<span class="comment">//处理arp报文,是否是ARP请求包?</span></span><br><span class="line">&#123;</span><br><span class="line">uip_arp_arpin();</span><br><span class="line"> <span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line"><span class="comment">//需要发送的数据在uip_buf, 长度是uip_len(这是2个全局变量)</span></span><br><span class="line"> <span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)tapdev_send();<span class="comment">//需要发送数据,则通过tapdev_send发送 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(timer_expired(&amp;periodic_timer))<span class="comment">//0.5秒定时器超时</span></span><br><span class="line">&#123;</span><br><span class="line">timer_reset(&amp;periodic_timer);<span class="comment">//复位0.5秒定时器 </span></span><br><span class="line"><span class="comment">//轮流处理每个TCP连接, UIP_CONNS缺省是40个  </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;UIP_CONNS;i++)</span><br><span class="line">&#123;</span><br><span class="line">uip_periodic(i);<span class="comment">//处理TCP通信事件  </span></span><br><span class="line"> <span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line"><span class="comment">//需要发送的数据在uip_buf, 长度是uip_len (这是2个全局变量)</span></span><br><span class="line"> <span class="keyword">if</span>(uip_len&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UIP_UDP<span class="comment">//UIP_UDP </span></span></span><br><span class="line"><span class="comment">//轮流处理每个UDP连接, UIP_UDP_CONNS缺省是10个</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;UIP_UDP_CONNS;i++)</span><br><span class="line">&#123;</span><br><span class="line">uip_udp_periodic(i);<span class="comment">//处理UDP通信事件</span></span><br><span class="line"> <span class="comment">//当上面的函数执行后，如果需要发送数据，则全局变量uip_len&gt;0</span></span><br><span class="line"><span class="comment">//需要发送的数据在uip_buf, 长度是uip_len (这是2个全局变量)</span></span><br><span class="line"><span class="keyword">if</span>(uip_len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">uip_arp_out();<span class="comment">//加以太网头结构，在主动连接时可能要构造ARP请求</span></span><br><span class="line">tapdev_send();<span class="comment">//发送数据到以太网</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"><span class="comment">//每隔10秒调用1次ARP定时器函数 用于定期ARP处理,ARP表10秒更新一次，旧的条目会被抛弃</span></span><br><span class="line"><span class="keyword">if</span>(timer_expired(&amp;arp_timer))</span><br><span class="line">&#123;</span><br><span class="line">timer_reset(&amp;arp_timer);</span><br><span class="line">uip_arp_timer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;uip时钟&quot;&gt;&lt;a href=&quot;#uip时钟&quot; class=&quot;headerlink&quot; title=&quot;uip时钟&quot;&gt;&lt;/a&gt;uip时钟&lt;/h2&gt;&lt;p&gt;  uIP-APP文件夹下的clock-arch.c文件是记录数据收发的时钟，即协议的系统心跳，系统心跳是用stm3</summary>
      
    
    
    
    <category term="嵌入式网络通信" scheme="http://yoursite.com/categories/嵌入式网络通信/"/>
    
    
    <category term="stm32 上uip移植" scheme="http://yoursite.com/tags/stm32-上uip移植/"/>
    
  </entry>
  
  <entry>
    <title>Plotly与机器学习</title>
    <link href="http://yoursite.com/2019/06/03/Plotly%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/06/03/Plotly%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-06-03T07:43:06.000Z</published>
    <updated>2019-06-10T02:45:36.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><h3 id="用SVM对经典的IRIS数据集（鸢尾花）进行分类"><a href="#用SVM对经典的IRIS数据集（鸢尾花）进行分类" class="headerlink" title="用SVM对经典的IRIS数据集（鸢尾花）进行分类"></a>用SVM对经典的IRIS数据集（鸢尾花）进行分类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 3.1 SVM</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, datasets</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">2</span>] <span class="comment"># 只去前两个特征</span></span><br><span class="line">Y = iris.target      <span class="comment"># 分类标签</span></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># 设定网格大小</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">'linear'</span>)</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line"></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">x_ = np.arange(x_min, x_max, h)</span><br><span class="line">y_ =  np.arange(y_min, y_max, h)</span><br><span class="line">xx, yy = np.meshgrid(x_, y_)</span><br><span class="line">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) <span class="comment"># xx.ravel() 返回连续扁平的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the result into a color plot</span></span><br><span class="line">Z = Z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">cmap = [[<span class="number">1.0</span>,<span class="string">'RGB(10,64,159)'</span>],[<span class="number">0.5</span>,<span class="string">'RGB(5,159,126)'</span>],[<span class="number">1.0</span>,<span class="string">'RGB(159,26,64)'</span>]]</span><br><span class="line"><span class="comment"># 画布</span></span><br><span class="line">trace1 = go.Heatmap(x=x_, y=y_, z=Z,</span><br><span class="line">                    colorscale=cmap,</span><br><span class="line">                    showscale=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">trace2 = go.Scatter(x=X[:, <span class="number">0</span>], y=X[:, <span class="number">1</span>], </span><br><span class="line">                    mode=<span class="string">'markers'</span>,</span><br><span class="line">                    marker=dict(color=Y, </span><br><span class="line">                                colorscale=cmap, </span><br><span class="line">                                showscale=<span class="keyword">False</span>,</span><br><span class="line">                                line=dict(color=<span class="string">'black'</span>, width=<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">"3-Class classification using Support Vector Machine with linear kernel"</span>)</span><br><span class="line">fig = go.Figure(data= [trace1, trace2], layout=layout)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\SVM_clustering.html'</span>)</span><br></pre></td></tr></table></figure><p>  绘制热力图时，用到了Plotly.graph_objs中的Heatmap函数，函数中的x，y，z三个参数分别对应X轴坐标，Y坐标，以及X轴线与Y轴线相交所得的每个小方块的颜色。<br>如果传递给x参数的大小是a，传递给y参数的大小是b，则传递给z参数的大小为a*b的矩阵。</p><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>   本案例使用三种模型（RBF、Linear、Plotlynomial）进行回归实践，并可视化结果，数据使用NumPy随机生成。<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment"># 3.2 SVR</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">X = np.sort(<span class="number">5</span> * np.random.rand(<span class="number">40</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - np.random.rand(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">svr_rbf = SVR(kernel=<span class="string">'rbf'</span>, C=<span class="number">1e3</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">svr_lin = SVR(kernel=<span class="string">'linear'</span>, C=<span class="number">1e3</span>)</span><br><span class="line">svr_poly = SVR(kernel=<span class="string">'poly'</span>, C=<span class="number">1e3</span>, degree=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">y_rbf = svr_rbf.fit(X, y).predict(X)</span><br><span class="line">y_lin = svr_lin.fit(X, y).predict(X)</span><br><span class="line">y_poly = svr_poly.fit(X, y).predict(X)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_to_plotly</span><span class="params">(x)</span>:</span></span><br><span class="line">    k = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(x)):</span><br><span class="line">        k.append(x[i][<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">lw = <span class="number">2</span></span><br><span class="line">p1 = go.Scatter(x=data_to_plotly(X), y=y,</span><br><span class="line">                mode=<span class="string">'markers'</span>,</span><br><span class="line">                marker=dict(color=<span class="string">'darkorange'</span>),</span><br><span class="line">                name=<span class="string">'data'</span>)</span><br><span class="line"></span><br><span class="line">p2 = go.Scatter(x=data_to_plotly(X), y=y_rbf, </span><br><span class="line">                mode=<span class="string">'lines'</span>,</span><br><span class="line">                line=dict(color=<span class="string">'navy'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'RBF model'</span>)</span><br><span class="line"></span><br><span class="line">p3 = go.Scatter(x=data_to_plotly(X), y=y_lin, </span><br><span class="line">                mode=<span class="string">'lines'</span>,</span><br><span class="line">                line=dict(color=<span class="string">'cyan'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'Linear model'</span>)</span><br><span class="line"></span><br><span class="line">p4 = go.Scatter(x=data_to_plotly(X), y=y_poly, </span><br><span class="line">                mode=<span class="string">'lines'</span>, </span><br><span class="line">                line=dict(color=<span class="string">'cornflowerblue'</span>, width=lw),</span><br><span class="line">                name=<span class="string">'Polynomial model'</span>)</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">'Support Vector Regression'</span>,</span><br><span class="line">                   hovermode=<span class="string">'closest'</span>,</span><br><span class="line">                   xaxis=dict(title=<span class="string">'data'</span>),</span><br><span class="line">                   yaxis=dict(title=<span class="string">'target'</span>))</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=[p1, p2, p3, p4], layout=layout)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\SVR.html'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a>聚类问题</h2><p>   聚类结果可视化一般分为两部分，一个是画出聚类中心点，另一个是将同类别的数据绘制为同一种颜色。这里仍然使用Scatter函数完成。<br>案列分为三部分，第一部分产生聚类数据，第二部分是使用K-means算法与MiniBatchKmeans算法训练模型；第三部分是绘制三张图片。第一张是K-means分类的结果；<br>第二张是MiniBatchKmeans分类的结果，第三张是突出两种分类结果的差异。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans, KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> pairwise_distances_argmin</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生随机数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">45</span></span><br><span class="line">centers = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">-1</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">-1</span>]]</span><br><span class="line">n_clusters = len(centers)</span><br><span class="line">X, labels_true = make_blobs(n_samples = <span class="number">3000</span>, centers = centers, cluster_std = <span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_samples是待生成的样本的总数</span></span><br><span class="line"><span class="comment"># centers表示类别数</span></span><br><span class="line"><span class="comment"># cluster_std表示每个类别的方差，例如我们希望生成2类数据，其中一类比另一类具有更大的方差，可以将cluster_std设置为[1.0,3.0]。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用K-means算法</span></span><br><span class="line">k_means = KMeans(init = <span class="string">'k-means++'</span>, n_clusters = <span class="number">3</span>, n_init = <span class="number">10</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">k_means.fit(X)</span><br><span class="line">t_batch = time.time() - t0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用MiniBatchKMeans算法</span></span><br><span class="line">mbk = MiniBatchKMeans(init = <span class="string">'k-means++'</span>, n_clusters = <span class="number">3</span>, batch_size = batch_size,</span><br><span class="line">                      n_init = <span class="number">10</span>, max_no_improvement = <span class="number">10</span>, verbose = <span class="number">0</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">mbk.fit(X)</span><br><span class="line">t_mini_batch = time.time() - t0</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line">colors = [<span class="string">'#4EACC5'</span>, <span class="string">'#FF9C34'</span>, <span class="string">'#4E9A06'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># We want to have the same colors for the same cluster from the</span></span><br><span class="line"><span class="comment"># MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per</span></span><br><span class="line"><span class="comment"># closest one.</span></span><br><span class="line">k_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line">mbk_means_cluster_centers = np.sort(mbk.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Compute minimum distances between one point and a set of points</span></span><br><span class="line">k_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)</span><br><span class="line">mbk_means_labels = pairwise_distances_argmin(X, mbk_means_cluster_centers)</span><br><span class="line">order = pairwise_distances_argmin(k_means_cluster_centers,</span><br><span class="line">                                  mbk_means_cluster_centers)</span><br><span class="line"><span class="comment">#第一张图</span></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">1</span>, cols=<span class="number">3</span>,</span><br><span class="line">                          print_grid=<span class="keyword">False</span>,</span><br><span class="line">                          subplot_titles=(<span class="string">'KMeans&lt;br&gt;train time: %.2fs\ninertia: %f'</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_),</span><br><span class="line">                                          <span class="string">'MiniBatchKmeans&lt;br&gt;train time: %.2fs\ninertia: %f'</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_), </span><br><span class="line">                                          <span class="string">'Difference'</span>))</span><br><span class="line"><span class="comment"># k-means</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> zip(range(n_clusters), colors):</span><br><span class="line">    my_members = k_means_labels == k</span><br><span class="line">    cluster_center = k_means_cluster_centers[k]</span><br><span class="line">    kmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="keyword">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">4</span>))</span><br><span class="line">    kmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                         showlegend=<span class="keyword">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                    line=dict(color=<span class="string">'black'</span>,</span><br><span class="line">                                                              width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(kmeans1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    fig.append_trace(kmeans2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis1'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis1'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># minibatchkmeans 第二张图</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> zip(range(n_clusters), colors):</span><br><span class="line">    my_members = mbk_means_labels == order[k]</span><br><span class="line">    cluster_center = mbk_means_cluster_centers[order[k]]</span><br><span class="line">    minibatchkmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                                 showlegend=<span class="keyword">False</span>,</span><br><span class="line">                                 mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">4</span>))</span><br><span class="line">    minibatchkmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                                 showlegend=<span class="keyword">False</span>,</span><br><span class="line">                                 mode=<span class="string">'markers'</span>, marker=dict(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                            line=dict(color=<span class="string">'black'</span>,</span><br><span class="line">                                                                      width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(minibatchkmeans1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fig.append_trace(minibatchkmeans2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis2'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis2'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialise the different array to all False第三张图</span></span><br><span class="line">different = (mbk_means_labels == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(n_clusters):</span><br><span class="line">    different += ((k_means_labels == k) != (mbk_means_labels == order[k]))</span><br><span class="line"></span><br><span class="line">identic = np.logical_not(different)</span><br><span class="line">difference1 = go.Scatter(x=X[identic, <span class="number">0</span>], y=X[identic, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="keyword">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=<span class="string">'#bbbbbb'</span>, size=<span class="number">4</span>))</span><br><span class="line">        </span><br><span class="line">difference2 = go.Scatter(x=X[different, <span class="number">0</span>], y=X[different, <span class="number">1</span>], </span><br><span class="line">                         showlegend=<span class="keyword">False</span>,</span><br><span class="line">                         mode=<span class="string">'markers'</span>, marker=dict(color=<span class="string">'magenta'</span>, size=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(difference1, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">fig.append_trace(difference2, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'xaxis3'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line">fig[<span class="string">'layout'</span>][<span class="string">'yaxis3'</span>].update(showticklabels=<span class="keyword">False</span>, ticks=<span class="string">''</span>,</span><br><span class="line">                               zeroline=<span class="keyword">False</span>, showgrid=<span class="keyword">False</span>)</span><br><span class="line">pyplt(fig, filename = <span class="string">r'tmp\K-means.html'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分类问题&quot;&gt;&lt;a href=&quot;#分类问题&quot; class=&quot;headerlink&quot; title=&quot;分类问题&quot;&gt;&lt;/a&gt;分类问题&lt;/h2&gt;&lt;h3 id=&quot;用SVM对经典的IRIS数据集（鸢尾花）进行分类&quot;&gt;&lt;a href=&quot;#用SVM对经典的IRIS数据集（鸢尾花）进</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="Plotly分类" scheme="http://yoursite.com/tags/Plotly分类/"/>
    
  </entry>
  
  <entry>
    <title>Plotly与GUI开发</title>
    <link href="http://yoursite.com/2019/06/03/Plotly%E4%B8%8EGUI%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/06/03/Plotly%E4%B8%8EGUI%E5%BC%80%E5%8F%91/</id>
    <published>2019-06-03T07:04:00.000Z</published>
    <updated>2019-06-03T07:41:43.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="各种Python-GUI编程的实现"><a href="#各种Python-GUI编程的实现" class="headerlink" title="各种Python GUI编程的实现"></a>各种Python GUI编程的实现</h2><h3 id="TKinter"><a href="#TKinter" class="headerlink" title="TKinter"></a>TKinter</h3><p>  Tkinter 是绑定了Python的Tk GUI框架，就是Python包装的Tcl代码，通过内嵌在Python的Tcl解释器实现。</p><h3 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h3><p>  wxPython是Python对跨平台的GUI框架wxWidgets的包装，作为一个Python的一个扩展模块来实现。</p><h3 id="PyGTK"><a href="#PyGTK" class="headerlink" title="PyGTK"></a>PyGTK</h3><p>  PyGTK是Python对GTK+GUI库的一系列包装。</p><h3 id="PySide"><a href="#PySide" class="headerlink" title="PySide"></a>PySide</h3><p>  PySide是Qt官方维护</p><h2 id="PyQt的安装"><a href="#PyQt的安装" class="headerlink" title="PyQt的安装"></a>PyQt的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install PyQt5==10.1.1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;各种Python-GUI编程的实现&quot;&gt;&lt;a href=&quot;#各种Python-GUI编程的实现&quot; class=&quot;headerlink&quot; title=&quot;各种Python GUI编程的实现&quot;&gt;&lt;/a&gt;各种Python GUI编程的实现&lt;/h2&gt;&lt;h3 id=&quot;TKint</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="python GUI开发" scheme="http://yoursite.com/tags/python-GUI开发/"/>
    
  </entry>
  
  <entry>
    <title>plotly网页开发01</title>
    <link href="http://yoursite.com/2019/06/03/plotly%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%9101/"/>
    <id>http://yoursite.com/2019/06/03/plotly%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%9101/</id>
    <published>2019-06-03T01:57:24.000Z</published>
    <updated>2019-06-03T07:03:03.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="plotly在Django中的应用"><a href="#plotly在Django中的应用" class="headerlink" title="plotly在Django中的应用"></a>plotly在Django中的应用</h1><p>  Django是用Python语言开发的一个免费开源的web框架，用于快速搭建高性能、优雅的网站，通过Django可以建立一个高性能web应用花费的时间和精力少。</p><h2 id="安装环境搭建"><a href="#安装环境搭建" class="headerlink" title="安装环境搭建"></a>安装环境搭建</h2><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试命令</span></span><br><span class="line">django-admin startproject plotly_and_django</span><br><span class="line"><span class="comment">#执行命令后</span></span><br><span class="line">plotly_and_django/</span><br><span class="line">    manage.py</span><br><span class="line">    plotly_and_django/</span><br><span class="line">    settings.py</span><br><span class="line">    urls.py</span><br><span class="line">    wsgi.py</span><br></pre></td></tr></table></figure></p><p>这些文件的具体含义如下：<br>(1)、 manage.py:这是项目交互的命令行实用程序，是django-admi.py工具周围的包装，不需要编辑此文件<br>(2)、 plotly_and_django/：用户的项目文件夹，包含以下文件</p><ul><li><strong>init</strong>.py :一个空的文件，用来告诉Python把这个文件当作Python的包对待</li><li>settings.py: 用于调整项目的设置和参数</li><li>urls.py : 用来存储项目中的URL，Django会通过正则表达式来匹配URL</li><li>wsgi.py: 里面包含了通过WSGI方式运行Django项目的一系列参数</li></ul><p>测试服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;plotly在Django中的应用&quot;&gt;&lt;a href=&quot;#plotly在Django中的应用&quot; class=&quot;headerlink&quot; title=&quot;plotly在Django中的应用&quot;&gt;&lt;/a&gt;plotly在Django中的应用&lt;/h1&gt;&lt;p&gt;  Django是用</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib简介02</title>
    <link href="http://yoursite.com/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B02/"/>
    <id>http://yoursite.com/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B02/</id>
    <published>2019-06-02T13:27:33.000Z</published>
    <updated>2019-06-02T14:29:40.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="确定坐标范围"><a href="#确定坐标范围" class="headerlink" title="确定坐标范围"></a>确定坐标范围</h2><p>  在matplotlib中，使用xlim(x,y)和ylim(x,y)函数可以确定坐标范围：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-5.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"><span class="comment"># x = np.linspace(-5, 5, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line">y1 = x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">xlabel(<span class="string">'x 值'</span>)</span><br><span class="line">ylabel(<span class="string">'y1 值'</span>)</span><br><span class="line"><span class="comment">#设置x轴范围，x轴只显示（-5,3），总区间（-5,5)</span></span><br><span class="line">xlim(<span class="number">-5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#设置y轴范围</span></span><br><span class="line">ylim(<span class="number">-10</span>, <span class="number">50</span>)</span><br><span class="line">plt.plot(x,y1)</span><br><span class="line">fig= plt.gcf()</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/axis_limit.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>  散点图时指在回归分析中，数据点在指教坐标系平面上的分布图。散点图表示因变量随自变量变化的大致趋势，因此可以选择合适的函数对数据点进行拟合。<br>散点图通常用于跨类别的聚合数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment">#产生测试数据</span></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">30</span>)</span><br><span class="line">y =np.sin(x)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">ax1.set_title(<span class="string">'散点图'</span>)</span><br><span class="line"><span class="comment">#设置X轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">'X'</span>)</span><br><span class="line"><span class="comment">#设置Y轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'Y'</span>)</span><br><span class="line"><span class="comment">#画散点图</span></span><br><span class="line">lValue = x</span><br><span class="line">ax1.scatter(x,y,c=<span class="string">'r'</span>,s= <span class="number">100</span>,linewidths=lValue,marker=<span class="string">'o'</span>)</span><br><span class="line"><span class="comment">#设置图标</span></span><br><span class="line">plt.legend(<span class="string">'x1'</span>)</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/scatter_1.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>散点图2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> rand<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]:</span><br><span class="line">    n = <span class="number">500</span></span><br><span class="line">    x, y = rand(<span class="number">2</span>, n)<span class="comment">#产生2*n的矩阵</span></span><br><span class="line">    ax.scatter(x, y, c=color, label=color,</span><br><span class="line">               alpha=<span class="number">0.3</span>, edgecolors=<span class="string">'none'</span>)</span><br><span class="line"><span class="comment">#设置每个点的颜色，x,y分别代表的横纵坐标，通过横纵坐标确定点的位置，c表示点的颜色color，s表示点的大小size，alpha表示点的透明度，1是不透明，0是透明。</span></span><br><span class="line">ax.legend()</span><br><span class="line">ax.grid(<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#设置网格</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/scatter_2.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>scatter函数中比较常用的参数如系：</p><ul><li>x，y:形如shape(n,)的数组，可选值</li><li>s:点的大小（也就是面积），默认值为20</li><li>c：点的颜色或颜色序列，默认为蓝色，其他如c = ‘r’(red),c== g‘green’</li><li>marker:形状，可选值，默认是圆</li></ul><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">#X是1,2,3,4,5,6,7,8,柱的个数</span></span><br><span class="line"><span class="comment"># numpy.random.uniform(low=0.0, high=1.0, size=None), normal</span></span><br><span class="line"><span class="comment">#uniform均匀分布的随机数，normal是正态分布的随机数，0.5-1均匀分布的数，一共有n个</span></span><br><span class="line">Y1 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">Y2 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">plt.bar(X,Y1,width = <span class="number">0.35</span>,facecolor = <span class="string">'lightskyblue'</span>,edgecolor = <span class="string">'white'</span>)</span><br><span class="line"><span class="comment">#width:柱的宽度</span></span><br><span class="line">plt.bar(X+<span class="number">0.35</span>,Y2,width = <span class="number">0.20</span>,facecolor = <span class="string">'yellowgreen'</span>,edgecolor = <span class="string">'white'</span>)</span><br><span class="line"><span class="comment">#水平柱状图plt.barh，属性中宽度width变成了高度height</span></span><br><span class="line"><span class="comment">#打两组数据时用+</span></span><br><span class="line"><span class="comment">#facecolor柱状图里填充的颜色</span></span><br><span class="line"><span class="comment">#edgecolor是边框的颜色</span></span><br><span class="line"><span class="comment">#想把一组数据打到下边，在数据前使用负号</span></span><br><span class="line">fig = plt.gcf()</span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/bar_1.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>bar函数的使用方法是：bar(left,height,width,bottom=None,**kwargs)</p><p>  left,height,width,bottom这四个参数确定了柱体的位置和大小。默认情况下，left为柱体的居中位置（可以通过align参数改变left值的含义），即：</p><ul><li>（left-width/2,bottom）为左下角位置</li><li>（left-width/2,bottom+height）为右上角位置</li></ul><h2 id="更多扩展"><a href="#更多扩展" class="headerlink" title="更多扩展"></a>更多扩展</h2><pre><code>网址：https://plot.ly.matplotlib/ ,获取Matplotlib与plotly结合的所有官方案例。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;确定坐标范围&quot;&gt;&lt;a href=&quot;#确定坐标范围&quot; class=&quot;headerlink&quot; title=&quot;确定坐标范围&quot;&gt;&lt;/a&gt;确定坐标范围&lt;/h2&gt;&lt;p&gt;  在matplotlib中，使用xlim(x,y)和ylim(x,y)函数可以确定坐标范围：&lt;br&gt;&lt;fi</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib简介01</title>
    <link href="http://yoursite.com/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B01/"/>
    <id>http://yoursite.com/2019/06/02/Matplotlib%E7%AE%80%E4%BB%8B01/</id>
    <published>2019-06-02T12:54:04.000Z</published>
    <updated>2019-06-02T13:27:22.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Matplotlib"><a href="#安装Matplotlib" class="headerlink" title="安装Matplotlib"></a>安装Matplotlib</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="调整Matplotlib参数"><a href="#调整Matplotlib参数" class="headerlink" title="调整Matplotlib参数"></a>调整Matplotlib参数</h2><h3 id="使用参数字典"><a href="#使用参数字典" class="headerlink" title="使用参数字典"></a>使用参数字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#导入模块包</span></span><br><span class="line"><span class="keyword">print</span> （plt.rc_params()）<span class="comment">#打印所有的参数</span></span><br></pre></td></tr></table></figure><p>在以上的参数中，常用的参数解释如下;</p><ul><li>axes：设置坐标轴边界，颜色，坐标刻度值大小和网络的显示</li><li>figure：设置边界颜色，图形大小和子区</li><li>font：设置字体，字号和样式</li><li>grid：设置网络颜色和线型</li><li>legend：设置图例和其中的文本显示</li><li>lines: 设置线条（颜色，线型，宽度等）和标记</li><li>savefig：对保存的图形进行单独设置</li><li>xtick和ytick：为X,Y轴的主刻度和次刻度设置颜色，大小，方向和标签大小<br>下面调用Matplotlib.rc()命令，通过传入关键字修改参数，<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line">pylab.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">plt.rc(<span class="string">"lines"</span>, marker= <span class="string">'x'</span>,linewidth=<span class="number">12</span>, color= <span class="string">'red'</span>)</span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>  可以使用matplot.matplotlib_fname()命令查找当前用户的配置文件目录，从而修改Matplotlib的文件参数，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">print</span> (plt.matplotlib_fname())</span><br></pre></td></tr></table></figure></p><h2 id="常用的API功能"><a href="#常用的API功能" class="headerlink" title="常用的API功能"></a>常用的API功能</h2><ul><li>figure():多次使用figure命令生成多个图时，图片号按顺序增加</li><li>text():添加文字说明，可以在图中的任意位置添加文字，并支持LaTex语法</li><li>xlable()、ylable():用于添加X轴和Y轴标签</li><li>title():用于添加图的标题</li><li>axis([xmin,xmax,ymin,ymax]):用于确定坐标范围</li><li>xlim(xmin,xmax)和ylim(ymin,ymax):用于调整坐标范围</li><li>annotate():文本注释</li><li>xticks(),yticks():设置轴记号，人为设置坐标轴刻度显示的值</li><li>subplot():设置子图，例如subplot（2,3,1）</li><li>axes：在Matplotlib中，整个图像为一个Figure对象</li></ul><h2 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Nov 25 11:39:15 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#使用import导入模块matplotlib.pyplot，并简写成plt</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#使用import导入模块numpy，并简写成np</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment"># 参数解释：start,stop是开始，结束的数字，num是生成多少个数字，默认50个；endpoint是最后一个stop数字是否包含进去，默认包含；retstep,是两个数字间的间距，默认不显示；dtype默认。</span></span><br><span class="line">y = x*<span class="number">3</span> + <span class="number">5</span></span><br><span class="line"><span class="comment">#线性方程y= x*3 + 5</span></span><br><span class="line">plt.title(<span class="string">"线性函数"</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">"x 值"</span>)</span><br><span class="line"><span class="comment">#设置x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">"y 值"</span>)</span><br><span class="line"><span class="comment">#设置y轴标签</span></span><br><span class="line">ax.plot(x, y)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/simple_line.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="增加子图"><a href="#增加子图" class="headerlink" title="增加子图"></a>增加子图</h2><p>案例1：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Nov 26 15:10:23 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">x1 = np.arange(<span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0.0</span>, <span class="number">4.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生x1，x2数据</span></span><br><span class="line">y1 = np.cos(<span class="number">2</span> * np.pi * x1) * np.exp(-x1)</span><br><span class="line">y2 = np.cos(<span class="number">2</span> * np.pi * x2)</span><br><span class="line"><span class="comment">#产生数据y1，y2</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># pyplot通过调用subplot或者add_subplot来增加子图，如p1 = plt.subplot(211) 或者 p1 = plt.subplot(2,1,1)， 表示创建一个2行，1列的图，p1为第一个子图，然后在p1上画曲线，设置标注标题图例等，就可以使用p1来调用相关的函数，可以直接使用pyplot画图，添加label，等。</span></span><br><span class="line">plt.plot(x1, y1)</span><br><span class="line">plt.title(<span class="string">'子图1'</span>)</span><br><span class="line"><span class="comment">#添加标题</span></span><br><span class="line">plt.ylabel(<span class="string">'y1 值'</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(x2, y2)</span><br><span class="line">plt.xlabel(<span class="string">'数量'</span>)</span><br><span class="line"><span class="comment">#添加标签</span></span><br><span class="line">plt.ylabel(<span class="string">'y2 值'</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/subplot_1.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>案例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Nov 26 15:20:04 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pympl = py.offline.plot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"><span class="comment">#产生f(t)函数</span></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.5</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生t1，t2数据</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(t1, f(t1), <span class="string">'bo'</span>, t2, f(t2), <span class="string">'k'</span>)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">'r--'</span>)</span><br><span class="line"></span><br><span class="line">plot_url = pympl(fig,filename=<span class="string">r'tmp/subplot_2.html'</span>, show_link=<span class="keyword">False</span>,resize=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Matplotlib&quot;&gt;&lt;a href=&quot;#安装Matplotlib&quot; class=&quot;headerlink&quot; title=&quot;安装Matplotlib&quot;&gt;&lt;/a&gt;安装Matplotlib&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Plotly金融绘图</title>
    <link href="http://yoursite.com/2019/06/02/Plotly%E9%87%91%E8%9E%8D%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/06/02/Plotly%E9%87%91%E8%9E%8D%E7%BB%98%E5%9B%BE/</id>
    <published>2019-06-02T07:21:53.000Z</published>
    <updated>2019-06-02T08:48:32.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速绘制k线图"><a href="#快速绘制k线图" class="headerlink" title="快速绘制k线图"></a>快速绘制k线图</h2><h3 id="快速绘制OHLC-美国线-图"><a href="#快速绘制OHLC-美国线-图" class="headerlink" title="快速绘制OHLC(美国线)图"></a>快速绘制OHLC(美国线)图</h3><p>  Pandas是金融领域中非常好用且高效的模块。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line">trace = go.Ohlc(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/first_ohlc.html'</span>)</span><br></pre></td></tr></table></figure></p><p> 上面最关键的代码是trace = go.Ohlc….,还可以用如下方式绘制：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory   <span class="keyword">as</span> ff  <span class="comment"># 导入plotly工具箱库中的图像工厂方法并命名为FF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">fig = ff.create_ohlc(df.open, df.high, df.low, df.close, dates=df.index)</span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/first_ohlc_old.html'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="快速绘制蜡烛图"><a href="#快速绘制蜡烛图" class="headerlink" title="快速绘制蜡烛图"></a>快速绘制蜡烛图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line"></span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/first_candlestick.html'</span>)</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">同理给出以前版本的蜡烛图绘制方法：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory   <span class="keyword">as</span> ff  <span class="comment"># 导入plotly工具箱库中的图像工厂方法并命名为FF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">fig = ff.create_candlestick(df.open, df.high, df.low, df.close, dates=df.index)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/first_candlestick_old.html'</span>)</span><br></pre></td></tr></table></figure><p> go.Candlestick 和go.Ohlc函数用起来简单明了，但是绘图的结果中包含了所有的日期信息</p><h2 id="k线图的优化"><a href="#k线图的优化" class="headerlink" title="k线图的优化"></a>k线图的优化</h2><h3 id="过滤非交易时间"><a href="#过滤非交易时间" class="headerlink" title="过滤非交易时间"></a>过滤非交易时间</h3><p>  过滤非交易时间是X轴的操作，这个工作需要在布局管理中进行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Ohlc(       </span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(</span><br><span class="line">    xaxis=go.XAxis(</span><br><span class="line">        autorange=<span class="keyword">True</span>,</span><br><span class="line">        mirror=<span class="string">'all'</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">        showline=<span class="keyword">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        showgrid=<span class="keyword">True</span>,</span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>),</span><br><span class="line">    yaxis=go.YAxis(</span><br><span class="line">        autorange=<span class="keyword">True</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_filter_time.html'</span>)</span><br></pre></td></tr></table></figure></p><p>  最关键的代码是categoryorder=”category ascending”, type=’category’。这两行的代码的意思是，吧X轴的元素<br>看成分类的原素type=’category’，并对其进行升序排序（categoryorder=”category ascending”,）。既然元素的属性<br>为类别，不是时间，也就是没有过滤非交易时间的问题了。<br>  对于categoryorder参数，默认是“trace”，即以默认的df.index进行排序。可以是升序也可以是降序（categoryorder=”category descending”），甚至可以自定义<br>顺序（array），这时需要额外的参数支持（categoryarray），用来传递自定义的index。<br>对于蜡烛线的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>] = dict(</span><br><span class="line">    xaxis=dict(</span><br><span class="line">        showline=<span class="keyword">True</span>, <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line"></span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/candlestick_filter_time.html'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="设置形状、颜色和注释"><a href="#设置形状、颜色和注释" class="headerlink" title="设置形状、颜色和注释"></a>设置形状、颜色和注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Candlestick(x=df.index,</span><br><span class="line">                open=df.open,</span><br><span class="line">                high=df.high,</span><br><span class="line">                low=df.low,</span><br><span class="line">                close=df.close,</span><br><span class="line">                increasing=dict(line=dict(color=<span class="string">'#FF0000'</span>)),<span class="comment">#上涨的颜色</span></span><br><span class="line">                decreasing=dict(line=dict(color=<span class="string">'#0C05F9'</span>)) <span class="comment">#下跌的颜色</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line">fig[<span class="string">'layout'</span>] = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'showline'</span>: <span class="keyword">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        <span class="string">'tickangle'</span>: <span class="number">-60</span>,</span><br><span class="line">        <span class="string">'categoryorder'</span>: <span class="string">"category ascending"</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'苹果公司K线图'</span>,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'股票价格'</span>&#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [&#123;</span><br><span class="line">        <span class="string">'x0'</span>: <span class="string">'2016-08-22'</span>, <span class="string">'x1'</span>: <span class="string">'2016-10-05'</span>,</span><br><span class="line">        <span class="string">'y0'</span>: <span class="number">0</span>, <span class="string">'y1'</span>: <span class="number">1</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'line'</span>: &#123;<span class="string">'color'</span>: <span class="string">'rgb(30,30,30)'</span>, <span class="string">'width'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'annotations'</span>: [&#123;</span><br><span class="line">        <span class="string">'x'</span>: <span class="string">'2016-09-12'</span>, <span class="string">'y'</span>: <span class="number">0.05</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'showarrow'</span>: <span class="keyword">True</span>, <span class="string">'xanchor'</span>: <span class="string">'left'</span>,</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'区间最低价'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/candlestick_style.html'</span>)</span><br></pre></td></tr></table></figure><p>  对于颜色设置，上涨设置为红色，下跌设置为蓝色，increasing=dict(line=dict(color=’#FF0000’)),decreasing=dict(line=dict(color=’#0C05F9’))<br>xref(yref) 参数有2个值：paper 和 x（y），如果值为x，则x0、x1对应的值为坐标轴的绝对值，；如果值为paper，则x0、x1对应的值为坐标的相对值。<br>本例中“y0=0，y1=1”表示shapes的Y轴起点在y0=0处、终点在y1=1处。<br>对应OHLC图，其绘制方法是一样的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line">trace = go.Ohlc(x=df.index,</span><br><span class="line">                open=df.open,</span><br><span class="line">                high=df.high,</span><br><span class="line">                low=df.low,</span><br><span class="line">                close=df.close,</span><br><span class="line">                increasing=dict(line=dict(color=<span class="string">'#FF0000'</span>)),</span><br><span class="line">                decreasing=dict(line=dict(color=<span class="string">'#0C05F9'</span>))</span><br><span class="line">                )</span><br><span class="line">data = go.Data([trace])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>] = &#123;</span><br><span class="line">    <span class="string">'xaxis'</span>: &#123;</span><br><span class="line">        <span class="string">'showline'</span>: <span class="keyword">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        <span class="string">'tickangle'</span>: <span class="number">-60</span>,</span><br><span class="line">        <span class="string">'categoryorder'</span>: <span class="string">"category ascending"</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'苹果公司K线图'</span>,</span><br><span class="line">    <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'股票价格'</span>&#125;,</span><br><span class="line">    <span class="string">'shapes'</span>: [&#123;</span><br><span class="line">        <span class="string">'x0'</span>: <span class="string">'2016-08-22'</span>, <span class="string">'x1'</span>: <span class="string">'2016-10-05'</span>,</span><br><span class="line">        <span class="string">'y0'</span>: <span class="number">0</span>, <span class="string">'y1'</span>: <span class="number">1</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'line'</span>: &#123;<span class="string">'color'</span>: <span class="string">'rgb(30,30,30)'</span>, <span class="string">'width'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'annotations'</span>: [&#123;</span><br><span class="line">        <span class="string">'x'</span>: <span class="string">'2016-09-12'</span>, <span class="string">'y'</span>: <span class="number">0.05</span>, <span class="string">'xref'</span>: <span class="string">'x'</span>, <span class="string">'yref'</span>: <span class="string">'paper'</span>,</span><br><span class="line">        <span class="string">'showarrow'</span>: <span class="keyword">True</span>, <span class="string">'xanchor'</span>: <span class="string">'left'</span>,</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'区间最低价'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_style.html'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="添加技术指标"><a href="#添加技术指标" class="headerlink" title="添加技术指标"></a>添加技术指标</h3><p>  将k线图和5日均线图画在同一张图上。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'dat/appl.csv'</span>, index_col=[<span class="string">'date'</span>], parse_dates=[<span class="string">'date'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># K线图</span></span><br><span class="line">trace = go.Candlestick(</span><br><span class="line">    x=df.index,</span><br><span class="line">    open=df.open,</span><br><span class="line">    high=df.high,</span><br><span class="line">    low=df.low,</span><br><span class="line">    close=df.close,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5日均线拟合直线</span></span><br><span class="line">add_line = go.Scatter(</span><br><span class="line">         x=df.index,</span><br><span class="line">         y=df.open,</span><br><span class="line">         name= <span class="string">'Open Vals'</span>,</span><br><span class="line">         line=dict(color=<span class="string">'black'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">data = go.Data([trace,add_line])</span><br><span class="line">fig = go.Figure(data = data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig[<span class="string">'layout'</span>].update(</span><br><span class="line">    xaxis=go.XAxis(</span><br><span class="line">        autorange=<span class="keyword">True</span>,</span><br><span class="line">        mirror=<span class="string">'all'</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">        showline=<span class="keyword">True</span>,  <span class="comment"># 画出 X 轴那条线</span></span><br><span class="line">        showgrid=<span class="keyword">True</span>,</span><br><span class="line">        tickangle=<span class="number">-60</span>,</span><br><span class="line">        categoryorder=<span class="string">"category ascending"</span>,</span><br><span class="line">        type=<span class="string">'category'</span>),</span><br><span class="line">    yaxis=go.YAxis(</span><br><span class="line">        autorange=<span class="keyword">True</span>,</span><br><span class="line">        gridcolor=<span class="string">'rgb(180, 180, 180)'</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyplt(fig, filename=<span class="string">r'tmp/ohlc_add_svg.html'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="自定义数据的金融绘图"><a href="#自定义数据的金融绘图" class="headerlink" title="自定义数据的金融绘图"></a>自定义数据的金融绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">open_data = [<span class="number">33.0</span>, <span class="number">33.3</span>, <span class="number">33.5</span>, <span class="number">33.0</span>, <span class="number">34.1</span>]</span><br><span class="line">high_data = [<span class="number">33.1</span>, <span class="number">33.3</span>, <span class="number">33.6</span>, <span class="number">33.2</span>, <span class="number">34.8</span>]</span><br><span class="line">low_data = [<span class="number">32.7</span>, <span class="number">32.7</span>, <span class="number">32.8</span>, <span class="number">32.6</span>, <span class="number">32.8</span>]</span><br><span class="line">close_data = [<span class="number">33.0</span>, <span class="number">32.9</span>, <span class="number">33.3</span>, <span class="number">33.1</span>, <span class="number">33.1</span>]</span><br><span class="line">dates = [datetime(year=<span class="number">2016</span>, month=<span class="number">10</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2016</span>, month=<span class="number">11</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2016</span>, month=<span class="number">12</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2017</span>, month=<span class="number">1</span>, day=<span class="number">10</span>),</span><br><span class="line">         datetime(year=<span class="number">2017</span>, month=<span class="number">2</span>, day=<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ohlc</span></span><br><span class="line">trace = go.Candlestick(x=dates, <span class="comment">#画蜡烛图，换成Ohlc就是画美国线</span></span><br><span class="line">                open=open_data,</span><br><span class="line">                high=high_data,</span><br><span class="line">                low=low_data,</span><br><span class="line">                close=close_data)</span><br><span class="line"></span><br><span class="line">data = [trace]</span><br><span class="line"></span><br><span class="line">pyplt(data, filename=<span class="string">r'tmp/candlestick_custom_data.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="高级金融绘图"><a href="#高级金融绘图" class="headerlink" title="高级金融绘图"></a>高级金融绘图</h2><p>  高级金融绘图是用cufflinks进行绘制；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment"># 5.4 高级金融绘图</span></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 5.4.1 入门案例</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.ohlc()</span><br><span class="line">qf=cf.QuantFig(df,title=<span class="string">'高级金融张图'</span>,legend=<span class="string">'top'</span>,name=<span class="string">'QF'</span>)</span><br><span class="line">qf.add_bollinger_bands()</span><br><span class="line">qf.iplot()</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 5.4.2 综合案例</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.ohlcv()</span><br><span class="line">qf=cf.QuantFig(df,title=<span class="string">'高级金融张图'</span>,legend=<span class="string">'top'</span>,name=<span class="string">'QF'</span>)</span><br><span class="line">qf.add_bollinger_bands()</span><br><span class="line">qf.add_sma([<span class="number">10</span>,<span class="number">20</span>],width=<span class="number">2</span>,color=[<span class="string">'green'</span>,<span class="string">'lightgreen'</span>],legendgroup=<span class="keyword">True</span>)</span><br><span class="line">qf.add_rsi(periods=<span class="number">20</span>,color=<span class="string">'java'</span>)</span><br><span class="line">qf.add_bollinger_bands(periods=<span class="number">20</span>,boll_std=<span class="number">2</span>,colors=[<span class="string">'magenta'</span>,<span class="string">'grey'</span>],fill=<span class="keyword">True</span>)</span><br><span class="line">qf.add_volume()</span><br><span class="line">qf.add_macd()</span><br><span class="line">qf.iplot()</span><br><span class="line"><span class="comment">#%%</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;快速绘制k线图&quot;&gt;&lt;a href=&quot;#快速绘制k线图&quot; class=&quot;headerlink&quot; title=&quot;快速绘制k线图&quot;&gt;&lt;/a&gt;快速绘制k线图&lt;/h2&gt;&lt;h3 id=&quot;快速绘制OHLC-美国线-图&quot;&gt;&lt;a href=&quot;#快速绘制OHLC-美国线-图&quot; cla</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="金融绘图" scheme="http://yoursite.com/tags/金融绘图/"/>
    
  </entry>
  
  <entry>
    <title>plotly和Pandas的cufflinks封装</title>
    <link href="http://yoursite.com/2019/06/02/plotly%E5%92%8CPandas%E7%9A%84cufflinks%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/06/02/plotly%E5%92%8CPandas%E7%9A%84cufflinks%E5%B0%81%E8%A3%85/</id>
    <published>2019-06-02T07:02:20.000Z</published>
    <updated>2019-06-02T07:21:03.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装cufflinks"><a href="#安装cufflinks" class="headerlink" title="安装cufflinks"></a>安装cufflinks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install categories</span><br></pre></td></tr></table></figure><p>cufflinks目前对Pandas的支持仅局限在Jupyter Notebook中，所以要打开Jupiter Notebook运行这些文件。<br>cufflinks是一个简单易用的模块：<br>（1） 获取cufflinks的源代码，<a href="https://gitub.com/santosjorge/cufflinks" target="_blank" rel="noopener">https://gitub.com/santosjorge/cufflinks</a><br>(2) cufflinks更多的案例，在网页中选择Chart Gallery链接。也可以下载文件cufflinks Tutorial - Chart Gallery.ipynb<br>(3) 要获取cufflinks高级的案例代码，Pandas Like Visualization 链接,也可以下载文件cufflinks Tutorial - Pandas Like.ipynb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.2 快速入门</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.set_index(<span class="string">'x'</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>, filename=<span class="string">'tmp/cf_line.html'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.3 快速获取数据</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, theme=<span class="string">'polar'</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter() <span class="comment"># 生成散点图数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>, mode=<span class="string">'markers'</span>, x=<span class="string">'x'</span>, y=<span class="string">'y'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.4 自定义绘图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = cf.datagen.lines(n_traces=<span class="number">3</span>,columns=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]) <span class="comment"># 生成一个3列的DataFrame（默认5列）。</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'black'</span>] <span class="comment"># 自定义每条线的颜色</span></span><br><span class="line">dashes = [<span class="string">'solid'</span>, <span class="string">'dash'</span>, <span class="string">'dashdot'</span>] <span class="comment"># 自定义每条线的Style</span></span><br><span class="line">widths = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment"># 自定义每条线的宽度</span></span><br><span class="line"></span><br><span class="line">plot_url = df.iplot(kind=<span class="string">'scatter'</span>, mode=<span class="string">'lines'</span>, colors=colors, dash=dashes,width=widths,xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'数量'</span>,title=<span class="string">'自定义绘图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">## 4.2.5 常见经典图形</span></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 1） 柱状图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line">df = cf.datagen.bars()</span><br><span class="line">df.iplot(kind=<span class="string">'bar'</span>, filename=<span class="string">r'tmp/cf_bar.html'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 2）柱状图（堆积）</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>, theme=<span class="string">'ggplot'</span>)</span><br><span class="line">df = cf.datagen.bars(n_categories=<span class="number">4</span>,columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">'bar'</span>, barmode=<span class="string">'stack'</span>, filename=<span class="string">'cufflinks/stacked-bar-chart'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 3)散点图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line">df = cf.datagen.lines(<span class="number">2</span>, columns=[<span class="string">'中信证券'</span>,<span class="string">'招商证券'</span>])</span><br><span class="line">df.iplot(kind=<span class="string">'scatter'</span>,mode=<span class="string">'markers'</span>,size=<span class="number">10</span>,symbol=<span class="string">'x'</span>,colorscale=<span class="string">'paired'</span>,</span><br><span class="line">                          xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'每股盈利增长率'</span>,title=<span class="string">'散点图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 4)价差图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line">df= cf.datagen.lines(<span class="number">2</span>,columns=[<span class="string">'万科A'</span>,<span class="string">'中粮地产'</span>])</span><br><span class="line">df.iplot(kind=<span class="string">'spread'</span>,xTitle=<span class="string">'日期'</span>,yTitle=<span class="string">'收益率'</span>,title=<span class="string">'价差图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 5）直方图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">df= cf.datagen.histogram(<span class="number">2</span>)</span><br><span class="line">df.iplot(kind=<span class="string">'histogram'</span>,opacity=<span class="number">.75</span>,title=<span class="string">'直方图'</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 6) 时间序列子图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>, theme=<span class="string">'pearl'</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.lines(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(subplots=<span class="keyword">True</span>, shape=(<span class="number">4</span>,<span class="number">1</span>), shared_xaxes=<span class="keyword">True</span>, fill=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"><span class="comment">### 7) 3D散点图</span></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="keyword">True</span>, world_readable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter3d(<span class="number">2</span>,<span class="number">150</span>)</span><br><span class="line">df.iplot(kind=<span class="string">'scatter3d'</span>,x=<span class="string">'x'</span>,y=<span class="string">'y'</span>,z=<span class="string">'z'</span>,size=<span class="number">15</span>,categories=<span class="string">'categories'</span>,text=<span class="string">'text'</span>,</span><br><span class="line">                             title=<span class="string">'3D散点图'</span>,colors=[<span class="string">'blue'</span>,<span class="string">'pink'</span>],width=<span class="number">0.5</span>,margin=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">                             opacity=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">df.iplot?</span><br><span class="line"><span class="comment">#%%</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装cufflinks&quot;&gt;&lt;a href=&quot;#安装cufflinks&quot; class=&quot;headerlink&quot; title=&quot;安装cufflinks&quot;&gt;&lt;/a&gt;安装cufflinks&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="cufflinks模块" scheme="http://yoursite.com/tags/cufflinks模块/"/>
    
  </entry>
  
  <entry>
    <title>plotly与Pandas</title>
    <link href="http://yoursite.com/2019/06/02/plotly%E4%B8%8EPandas/"/>
    <id>http://yoursite.com/2019/06/02/plotly%E4%B8%8EPandas/</id>
    <published>2019-06-02T06:50:59.000Z</published>
    <updated>2019-06-02T07:01:23.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本线形图"><a href="#基本线形图" class="headerlink" title="基本线形图"></a>基本线形图</h2><p>   Plotly可以识别Pandas数据格式，所以数据是Pandas的DataFrame或Series结构，可以直接传递给Plotly，不用转换为list数据格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Scatter(</span><br><span class="line">        x=df[<span class="string">'x'</span>], <span class="comment"># x可以是 DataFrame 的某一列</span></span><br><span class="line">        y=df[<span class="string">'y'</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data, filename=<span class="string">'tmp/basic_line.html'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="基本散点图"><a href="#基本散点图" class="headerlink" title="基本散点图"></a>基本散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">df_50 = pd.read_csv(<span class="string">r'dat/000016.csv'</span>, index_col=[<span class="string">'date'</span>]) <span class="comment"># 读取数据</span></span><br><span class="line">df_50.sort_index(inplace=<span class="keyword">True</span>) <span class="comment"># 排序</span></span><br><span class="line">df_50 = df_50.loc[<span class="string">'2017-01-03'</span>:,:]</span><br><span class="line">df_300 = pd.read_csv(<span class="string">r'dat/000300.csv'</span>, index_col=[<span class="string">'date'</span>])</span><br><span class="line">df_300.sort_index(inplace=<span class="keyword">True</span>) <span class="comment"># 排序</span></span><br><span class="line">df_300 = df_300.loc[<span class="string">'2017-01-01'</span>:]</span><br><span class="line"></span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">'data'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'x'</span>: df_50.index,</span><br><span class="line">            <span class="string">'y'</span>: df_50.volume,</span><br><span class="line">            <span class="string">'mode'</span>: <span class="string">'markers'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'上证50'</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'x'</span>: df_300.index,</span><br><span class="line">            <span class="string">'y'</span>: df_300.volume,</span><br><span class="line">            <span class="string">'mode'</span>: <span class="string">'markers'</span>,</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'沪深300'</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'layout'</span>: &#123;</span><br><span class="line">        <span class="string">'xaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">'时间'</span>,</span><br><span class="line">                  <span class="comment"># 'type': 'log',</span></span><br><span class="line">                  &#125;,</span><br><span class="line">        <span class="string">'yaxis'</span>: &#123;<span class="string">'title'</span>: <span class="string">"成交量"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = pyplt(fig, filename=<span class="string">'tmp/basic_scatter.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="基本柱状图"><a href="#基本柱状图" class="headerlink" title="基本柱状图"></a>基本柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------pre def</span></span><br><span class="line">pyplt = py.offline.plot</span><br><span class="line"></span><br><span class="line">N = <span class="number">40</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Bar(</span><br><span class="line">        x=df[<span class="string">'x'</span>], <span class="comment"># x可以是 DataFrame 的某一列</span></span><br><span class="line">        y=df[<span class="string">'y'</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data, filename=<span class="string">r'tmp/basic_bar.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本线形图&quot;&gt;&lt;a href=&quot;#基本线形图&quot; class=&quot;headerlink&quot; title=&quot;基本线形图&quot;&gt;&lt;/a&gt;基本线形图&lt;/h2&gt;&lt;p&gt;   Plotly可以识别Pandas数据格式，所以数据是Pandas的DataFrame或Series结构，可以直</summary>
      
    
    
    
    <category term="Python数据分析" scheme="http://yoursite.com/categories/Python数据分析/"/>
    
    
    <category term="Pandas基本图形" scheme="http://yoursite.com/tags/Pandas基本图形/"/>
    
  </entry>
  
</feed>
